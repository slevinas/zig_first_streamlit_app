tag,query
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> lastExportQuery,"
				select	r.pk_rcopia_create_log_id,
						r.date_created
				from	users u
				join rcopia_create_log r on r.fk_user_id = u.pk_user_id
				where	u.fk_company_id = $1
				and		u.security = 1
				order by r.pk_rcopia_create_log_id desc
				limit 1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> surveyUsersQuery,"
				select	distinct ""fk_User_ID_Self""
				from	""SurveyUser""
				join dblink (
						'hc_dev_dblink_server_connection' :: text, $mjrip$
							select 	pk_user_id
							from	users
							where	account_status = 1
							and		security = 1
							and	fk_company_id = 12 
						$mjrip$ :: text
					) as u (pk_user_id bigint) 
					on u.pk_user_id = ""fk_User_ID_Self""
				where	""fk_Resource_ID"" = 8400
				and		""DateAdded"" > $1"
 Application.lib.scheduled_scripts.TaskSmartReminders.run( ) -> companiesQuery,"
				select	fk_company_id
				from	company_config
				where	fast_track_allow_app = true"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> patientsQuery,"
				select	u.pk_user_id,
						u.fk_company_id,
						u.internalid,
						u.fname,
						u.mname,
						u.lname,
						u.dob,
						u.gender,
						u.phone
				from	users u
				where	u.fk_company_id = $1
				and		u.security = 1
				and		u.account_status = 1
				and		(u.datecreated > $2
						or u.dateupdated > $3 )"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"
				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit 1000"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.TaskSmartReminders.run( ) -> patientsQuery,"
				select	u.fk_company_id,
						u.pk_user_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u.fk_user_id,
						u2.is_site_user,
						sa.sms_allow
				from	users u
				join users u2 on u2.pk_user_id = u.fk_user_id and u2.user_time_zone_location is null
				join companies c on c.pk_company_id = u.fk_company_id 
					and c.is_active = true
					and c.region = 'US'::region
				join settings_apps sa on sa.fk_company_id = u.fk_company_id
					and sa.reminders_send = true
					and (sa.reminders_send_time::time at time zone c.time_zone_location)
						between ((pg_catalog.time(now()) at time zone c.time_zone_location) - interval '5 minutes')
						and ((pg_catalog.time(now()) at time zone c.time_zone_location) + interval '5 minutes')
				join user_todos ut on ut.fk_user_id = u.pk_user_id
					and	ut.active = true
					and (
							date(ut.active_start_date) = (date(now() at time zone c.time_zone_location) + sa.reminders_start_interval)
							or date(ut.active_end_date) = (date(now() at time zone c.time_zone_location) + sa.reminders_end_interval)
							or (
									date(now() at time zone c.time_zone_location) >=
									((select max(utrl.processing_date) 
									from user_todo_reminders_log utrl
									where utrl.fk_user_id = u.pk_user_id) + sa.reminders_inter_interval)
									and date(ut.active_start_date) < date(now() at time zone c.time_zone_location)
									and date(ut.active_end_date) >= date(now() at time zone c.time_zone_location)
								)
							or (
									(date(ut.active_start_date) < date(now() at time zone c.time_zone_location))
									and (date(ut.active_end_date) >= date(now() at time zone c.time_zone_location))
									and 
									(select count(*)
									from user_todo_reminders_log utrl7
									where utrl7.fk_user_id = u.pk_user_id) = 0
								)
						)
					and (
							(select max(utrl2.processing_date) 
							from user_todo_reminders_log utrl2
							where utrl2.fk_user_id = u.pk_user_id) is null
							or
							(select max(utrl3.processing_date) 
							from user_todo_reminders_log utrl3
							where utrl3.fk_user_id = u.pk_user_id) + sa.reminders_min_interval < date(now() at time zone c.time_zone_location)
						)
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
					and uscs.fk_completion_status_id = 1
				left outer join identity_to_account_map itam on itam.fk_user_id = u.pk_user_id
					and itam.fk_company_id in (150)
				where	u.security = 1
				and		u.account_status = 1
				and		u.email is not null
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				and		itam.pk_identity_to_account_map_id is null
				group by u.fk_company_id,
						u.pk_user_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u.fk_user_id,
						u2.is_site_user,
						sa.sms_allow
				union 
				select	u3.fk_company_id,
						u3.pk_user_id,
						u3.email,
						u3.mobile_phone,
						u3.may_receive_sms_notifications,
						u3.fk_user_id,
						u4.is_site_user,
						sa2.sms_allow
				from	users u3
				join users u4 on u4.pk_user_id = u3.fk_user_id and u4.user_time_zone_location is not null
				join companies c2 on c2.pk_company_id = u3.fk_company_id 
					and c2.is_active = true
					and c2.region = 'US'::region
				join settings_apps sa2 on sa2.fk_company_id = u3.fk_company_id
					and sa2.reminders_send = true
					and (sa2.reminders_send_time::time at time zone u4.user_time_zone_location)
						between ((pg_catalog.time(now()) at time zone u4.user_time_zone_location) - interval '5 minutes')
						and ((pg_catalog.time(now()) at time zone u4.user_time_zone_location) + interval '5 minutes')
				join user_todos ut2 on ut2.fk_user_id = u3.pk_user_id
					and	ut2.active = true
					and (
							date(ut2.active_start_date) = (date(now() at time zone u4.user_time_zone_location) + sa2.reminders_start_interval)
							or date(ut2.active_end_date) = (date(now() at time zone u4.user_time_zone_location) + sa2.reminders_end_interval)
							or (
									date(now() at time zone u4.user_time_zone_location) >=
									((select max(utrl4.processing_date) 
									from user_todo_reminders_log utrl4
									where utrl4.fk_user_id = u3.pk_user_id) + sa2.reminders_inter_interval)
									and date(ut2.active_start_date) < date(now() at time zone u4.user_time_zone_location)
									and date(ut2.active_end_date) >= date(now() at time zone u4.user_time_zone_location)
								)
							or (
									(date(ut2.active_start_date) < date(now() at time zone u4.user_time_zone_location))
									and (date(ut2.active_end_date) >= date(now() at time zone u4.user_time_zone_location))
									and 
									(select count(*)
									from user_todo_reminders_log utrl8
									where utrl8.fk_user_id = u3.pk_user_id) = 0
								)
						)
					and (
							(select max(utrl5.processing_date) 
							from user_todo_reminders_log utrl5
							where utrl5.fk_user_id = u3.pk_user_id) is null
							or
							(select max(utrl6.processing_date) 
							from user_todo_reminders_log utrl6
							where utrl6.fk_user_id = u3.pk_user_id) + sa2.reminders_min_interval < date(now() at time zone u4.user_time_zone_location)
						)
				join user_survey_completion_statuses uscs2 on uscs2.fk_user_todo_id = ut2.pk_user_todo_id
					and uscs2.fk_completion_status_id = 1
				left outer join identity_to_account_map itam2 on itam2.fk_user_id = u3.pk_user_id
					and itam2.fk_company_id in (150)
				where	u3.security = 1
				and		u3.account_status = 1
				and		u3.email is not null
				and 	u3.email <> ''
				and 	(u3.mayreceiveemailreminders = true or u3.mayreceiveemailreminders is null)
				and		itam2.pk_identity_to_account_map_id is null
				group by u3.fk_company_id,
						u3.pk_user_id,
						u3.email,
						u3.mobile_phone,
						u3.may_receive_sms_notifications,
						u3.fk_user_id,
						u4.is_site_user,
						sa2.sms_allow"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"
				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit 250"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.models.PatientPortalTemplate.getDefaultTemplateByCompanyId( ) -> templateQuery,"
				select	pk_patient_portal_template_id,
						fk_company_id,
						fk_user_id,
						name,
						default_template
				from	patient_portal_templates
				where	fk_company_id = $1 
				and 	default_template = true"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.models.ExternalPatient.getLastImportedHUPTIPatient( ) -> patientsQuery,"
				select	max(max_pat_id1) as Pat_ID1
				from	mosaiq_import_logs
				WHERE 	company_id = 96"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	pk_rave_export_log_id,
						fk_user_id,
						fk_surveyuser_id,
						fk_resource_id,
						submitter_fk_user_id,
						fk_user_todo_id
				from	rave_export_log
				where	fk_company_id = $1
				and		is_processed = false
				and		survey_outdated = false
				order by pk_rave_export_log_id
				limit 50"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	u.fname,
						u.lname,
						u.case_no,
						t.name,
						l.pk_rave_export_log_id,
						l.error_message
				from	rave_export_log l
				join users u on u.pk_user_id = l.fk_user_id
				left outer join user_todos ut on ut.pk_user_todo_id = l.fk_user_todo_id
				left outer join todos t on t.pk_todo_id = ut.fk_todo_id
				where	l.fk_company_id = $1
				and		l.is_processed = false
				and		l.survey_outdated = false
				order by u.lname,
						u.fname,
						t.name"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSmartReminders.run( ) -> companiesQuery,"
				select	fk_company_id
				from	company_config
				where	fast_track_allow_app = true"
 Application.lib.scheduled_scripts.TaskSmartReminders.run( ) -> patientsQuery,"
				select	u.fk_company_id,
						u.pk_user_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u.fk_user_id,
						u2.is_site_user,
						sa.sms_allow
				from	users u
				join users u2 on u2.pk_user_id = u.fk_user_id and u2.user_time_zone_location is null
				join companies c on c.pk_company_id = u.fk_company_id 
					and c.is_active = true
					and c.region = 'US'::region
				join settings_apps sa on sa.fk_company_id = u.fk_company_id
					and sa.reminders_send = true
					and (sa.reminders_send_time::time at time zone c.time_zone_location)
						between ((pg_catalog.time(now()) at time zone c.time_zone_location) - interval '5 minutes')
						and ((pg_catalog.time(now()) at time zone c.time_zone_location) + interval '5 minutes')
				join user_todos ut on ut.fk_user_id = u.pk_user_id
					and	ut.active = true
					and (
							date(ut.active_start_date) = (date(now() at time zone c.time_zone_location) + sa.reminders_start_interval)
							or date(ut.active_end_date) = (date(now() at time zone c.time_zone_location) + sa.reminders_end_interval)
							or (
									date(now() at time zone c.time_zone_location) >=
									((select max(utrl.processing_date) 
									from user_todo_reminders_log utrl
									where utrl.fk_user_id = u.pk_user_id) + sa.reminders_inter_interval)
									and date(ut.active_start_date) < date(now() at time zone c.time_zone_location)
									and date(ut.active_end_date) >= date(now() at time zone c.time_zone_location)
								)
							or (
									(date(ut.active_start_date) < date(now() at time zone c.time_zone_location))
									and (date(ut.active_end_date) >= date(now() at time zone c.time_zone_location))
									and 
									(select count(*)
									from user_todo_reminders_log utrl7
									where utrl7.fk_user_id = u.pk_user_id) = 0
								)
						)
					and (
							(select max(utrl2.processing_date) 
							from user_todo_reminders_log utrl2
							where utrl2.fk_user_id = u.pk_user_id) is null
							or
							(select max(utrl3.processing_date) 
							from user_todo_reminders_log utrl3
							where utrl3.fk_user_id = u.pk_user_id) + sa.reminders_min_interval < date(now() at time zone c.time_zone_location)
						)
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
					and uscs.fk_completion_status_id = 1
				left outer join identity_to_account_map itam on itam.fk_user_id = u.pk_user_id
					and itam.fk_company_id in (150)
				where	u.security = 1
				and		u.account_status = 1
				and		u.email is not null
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				and		itam.pk_identity_to_account_map_id is null
				group by u.fk_company_id,
						u.pk_user_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u.fk_user_id,
						u2.is_site_user,
						sa.sms_allow
				union 
				select	u3.fk_company_id,
						u3.pk_user_id,
						u3.email,
						u3.mobile_phone,
						u3.may_receive_sms_notifications,
						u3.fk_user_id,
						u4.is_site_user,
						sa2.sms_allow
				from	users u3
				join users u4 on u4.pk_user_id = u3.fk_user_id and u4.user_time_zone_location is not null
				join companies c2 on c2.pk_company_id = u3.fk_company_id 
					and c2.is_active = true
					and c2.region = 'US'::region
				join settings_apps sa2 on sa2.fk_company_id = u3.fk_company_id
					and sa2.reminders_send = true
					and (sa2.reminders_send_time::time at time zone u4.user_time_zone_location)
						between ((pg_catalog.time(now()) at time zone u4.user_time_zone_location) - interval '5 minutes')
						and ((pg_catalog.time(now()) at time zone u4.user_time_zone_location) + interval '5 minutes')
				join user_todos ut2 on ut2.fk_user_id = u3.pk_user_id
					and	ut2.active = true
					and (
							date(ut2.active_start_date) = (date(now() at time zone u4.user_time_zone_location) + sa2.reminders_start_interval)
							or date(ut2.active_end_date) = (date(now() at time zone u4.user_time_zone_location) + sa2.reminders_end_interval)
							or (
									date(now() at time zone u4.user_time_zone_location) >=
									((select max(utrl4.processing_date) 
									from user_todo_reminders_log utrl4
									where utrl4.fk_user_id = u3.pk_user_id) + sa2.reminders_inter_interval)
									and date(ut2.active_start_date) < date(now() at time zone u4.user_time_zone_location)
									and date(ut2.active_end_date) >= date(now() at time zone u4.user_time_zone_location)
								)
							or (
									(date(ut2.active_start_date) < date(now() at time zone u4.user_time_zone_location))
									and (date(ut2.active_end_date) >= date(now() at time zone u4.user_time_zone_location))
									and 
									(select count(*)
									from user_todo_reminders_log utrl8
									where utrl8.fk_user_id = u3.pk_user_id) = 0
								)
						)
					and (
							(select max(utrl5.processing_date) 
							from user_todo_reminders_log utrl5
							where utrl5.fk_user_id = u3.pk_user_id) is null
							or
							(select max(utrl6.processing_date) 
							from user_todo_reminders_log utrl6
							where utrl6.fk_user_id = u3.pk_user_id) + sa2.reminders_min_interval < date(now() at time zone u4.user_time_zone_location)
						)
				join user_survey_completion_statuses uscs2 on uscs2.fk_user_todo_id = ut2.pk_user_todo_id
					and uscs2.fk_completion_status_id = 1
				left outer join identity_to_account_map itam2 on itam2.fk_user_id = u3.pk_user_id
					and itam2.fk_company_id in (150)
				where	u3.security = 1
				and		u3.account_status = 1
				and		u3.email is not null
				and 	u3.email <> ''
				and 	(u3.mayreceiveemailreminders = true or u3.mayreceiveemailreminders is null)
				and		itam2.pk_identity_to_account_map_id is null
				group by u3.fk_company_id,
						u3.pk_user_id,
						u3.email,
						u3.mobile_phone,
						u3.may_receive_sms_notifications,
						u3.fk_user_id,
						u4.is_site_user,
						sa2.sms_allow"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"
				select	survey_indexing_run_id, 
						start_time, 
						end_time, 
						surveys_indexed, 
						is_last_run, 
						surveys_start_at, 
						surveys_end_at
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"
				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit 1000"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.didPrevScriptFinish( ) -> surveyIndexQuery,"	
				select	survey_indexing_run_id
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> [update],"
				update	survey_indexing_runs
				set 	is_last_run = false
				where	is_last_run = true"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"
				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit 250"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> surveyUsersQuery,"
				select	su.""pk_SurveyUser_ID"", 
						su.""DateAdded"", 
						su.""DateCompleted"", 
						su.""fk_Resource_ID"", 
						su.""fk_User_ID_Self"", 
						su.revision_type, 
						su.revision_fk_surveyuser_id, 
						updated_at,
						u.fk_company_id 
				from	""SurveyUser"" su
				join dblink(
						$joint$hc_dblink_server_connection$joint$::text, $joint$
							select	pk_user_id,
									fk_company_id
							from	users
							where	account_status = 1
						$joint$::text
					) as u (pk_user_id bigint, fk_company_id bigint) 
					on u.pk_user_id = su.""fk_User_ID_Self""
				where	su.updated_at > $1
				order by su.updated_at
					limit 300"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> [update],"
					update	survey_indexing_runs
					set		is_last_run = true
					where 	survey_indexing_run_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.TaskUFPTIMosaiqUpdates.run( ) -> lastProcessTimeQuery,"
				select	process_time
				from 	process_times
				where 	process_id = 2
				and		process_time is not null
				and 	process_name = 'TaskUFPTIMosaiqUpdates.cfc'
				order by process_time desc
				limit 1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	pk_rave_export_log_id,
						fk_user_id,
						fk_surveyuser_id,
						fk_resource_id,
						submitter_fk_user_id,
						fk_user_todo_id
				from	rave_export_log
				where	fk_company_id = $1
				and		is_processed = false
				and		survey_outdated = false
				order by pk_rave_export_log_id
				limit 50"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	u.fname,
						u.lname,
						u.case_no,
						t.name,
						l.pk_rave_export_log_id,
						l.error_message
				from	rave_export_log l
				join users u on u.pk_user_id = l.fk_user_id
				left outer join user_todos ut on ut.pk_user_todo_id = l.fk_user_todo_id
				left outer join todos t on t.pk_todo_id = ut.fk_todo_id
				where	l.fk_company_id = $1
				and		l.is_processed = false
				and		l.survey_outdated = false
				order by u.lname,
						u.fname,
						t.name"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"
				select	survey_indexing_run_id, 
						start_time, 
						end_time, 
						surveys_indexed, 
						is_last_run, 
						surveys_start_at, 
						surveys_end_at
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"
					select	survey_indexing_run_id, 
							start_time, 
							end_time, 
							surveys_indexed, 
							is_last_run, 
							surveys_start_at, 
							surveys_end_at
					from	survey_indexing_runs
					where	survey_indexing_run_id > 0
					order by survey_indexing_run_id desc
					limit 1"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.didPrevScriptFinish( ) -> surveyIndexQuery,"	
				select	survey_indexing_run_id
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> lastExportQuery,"
				select	r.pk_rcopia_create_log_id,
						r.date_created
				from	users u
				join rcopia_create_log r on r.fk_user_id = u.pk_user_id
				where	u.fk_company_id = $1
				and		u.security = 1
				order by r.pk_rcopia_create_log_id desc
				limit 1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> surveyUsersQuery,"
				select	distinct ""fk_User_ID_Self""
				from	""SurveyUser""
				join dblink (
						'hc_dev_dblink_server_connection' :: text, $mjrip$
							select 	pk_user_id
							from	users
							where	account_status = 1
							and		security = 1
							and	fk_company_id = 12 
						$mjrip$ :: text
					) as u (pk_user_id bigint) 
					on u.pk_user_id = ""fk_User_ID_Self""
				where	""fk_Resource_ID"" = 8400
				and		""DateAdded"" > $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> patientsQuery,"
				select	u.pk_user_id,
						u.fk_company_id,
						u.internalid,
						u.fname,
						u.mname,
						u.lname,
						u.dob,
						u.gender,
						u.phone
				from	users u
				where	u.fk_company_id = $1
				and		u.security = 1
				and		u.account_status = 1
				and		(u.datecreated > $2
						or u.dateupdated > $3 )"
 Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"
				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit 250"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"
				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit 1000"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.models.PatientPortalTemplate.getDefaultTemplateByCompanyId( ) -> templateQuery,"
				select	pk_patient_portal_template_id,
						fk_company_id,
						fk_user_id,
						name,
						default_template
				from	patient_portal_templates
				where	fk_company_id = $1 
				and 	default_template = true"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.models.ExternalPatient.getLastImportedHUPTIPatient( ) -> patientsQuery,"
				select	max(max_pat_id1) as Pat_ID1
				from	mosaiq_import_logs
				WHERE 	company_id = 96"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"
				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit 1000"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"
				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit 250"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.TaskUFPTIMosaiqUpdates.run( ) -> lastProcessTimeQuery,"
				select	process_time
				from 	process_times
				where 	process_id = 2
				and		process_time is not null
				and 	process_name = 'TaskUFPTIMosaiqUpdates.cfc'
				order by process_time desc
				limit 1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	pk_rave_export_log_id,
						fk_user_id,
						fk_surveyuser_id,
						fk_resource_id,
						submitter_fk_user_id,
						fk_user_todo_id
				from	rave_export_log
				where	fk_company_id = $1
				and		is_processed = false
				and		survey_outdated = false
				order by pk_rave_export_log_id
				limit 50"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	u.fname,
						u.lname,
						u.case_no,
						t.name,
						l.pk_rave_export_log_id,
						l.error_message
				from	rave_export_log l
				join users u on u.pk_user_id = l.fk_user_id
				left outer join user_todos ut on ut.pk_user_todo_id = l.fk_user_todo_id
				left outer join todos t on t.pk_todo_id = ut.fk_todo_id
				where	l.fk_company_id = $1
				and		l.is_processed = false
				and		l.survey_outdated = false
				order by u.lname,
						u.fname,
						t.name"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"
				select	survey_indexing_run_id, 
						start_time, 
						end_time, 
						surveys_indexed, 
						is_last_run, 
						surveys_start_at, 
						surveys_end_at
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.didPrevScriptFinish( ) -> surveyIndexQuery,"	
				select	survey_indexing_run_id
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> [update],"
				update	survey_indexing_runs
				set 	is_last_run = false
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> surveyUsersQuery,"
				select	su.""pk_SurveyUser_ID"", 
						su.""DateAdded"", 
						su.""DateCompleted"", 
						su.""fk_Resource_ID"", 
						su.""fk_User_ID_Self"", 
						su.revision_type, 
						su.revision_fk_surveyuser_id, 
						updated_at,
						u.fk_company_id 
				from	""SurveyUser"" su
				join dblink(
						$joint$hc_dblink_server_connection$joint$::text, $joint$
							select	pk_user_id,
									fk_company_id
							from	users
							where	account_status = 1
						$joint$::text
					) as u (pk_user_id bigint, fk_company_id bigint) 
					on u.pk_user_id = su.""fk_User_ID_Self""
				where	su.updated_at > $1
				order by su.updated_at
					limit 300"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> [update],"
					update	survey_indexing_runs
					set		is_last_run = true
					where 	survey_indexing_run_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Login.getPatientQuery( ) -> patientQuery,"
				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit 2"
 Application.App.findBy_( ) -> instances,"
				select
					""pk_userslog_id"",""fk_users_id"",""ts"",""ipaddy"",""action"",""fk_login_mode_id"",""kiosk_fk_user_id"" 
				from ""userslog"" 
				where
							""fk_users_id"" = $1
							and
							""action"" = $2
							and
					1 = 1
					order by ts desc 
					limit 1"
 Application.models.User.getUserCompanyId( ) -> userQuery,"
				select	fk_company_id
				from	users
				where	pk_user_id = $1"
 Application.models.User.getUserSecurity( ) -> userQuery,"
				select	u.security,
						u.sudo_retain_user_security,
						sudo_user.security as sudo_security
				from	users u
				left outer join users as sudo_user on sudo_user.pk_user_id = u.sudo_as_fk_user_id
				where	u.pk_user_id = $1"
 Application.models.User.getUserSecurity( ) -> userQuery,"
				select	u.security,
						u.sudo_retain_user_security,
						sudo_user.security as sudo_security
				from	users u
				left outer join users as sudo_user on sudo_user.pk_user_id = u.sudo_as_fk_user_id
				where	u.pk_user_id = $1"
 Application.models.User.getUserTimeZone( ) -> userQuery,"
					select	case
								when (u.user_time_zone_location is not null and u.user_time_zone_location <> '') 
								then u.user_time_zone_location
								when (phyuser.is_site_user is true and phyuser.user_time_zone_location is not null and phyuser.user_time_zone_location <> '') 
								then phyuser.user_time_zone_location
								when (sudophyuser.is_site_user is true and sudophyuser.user_time_zone_location is not null and sudophyuser.user_time_zone_location <> '') 
								then sudophyuser.user_time_zone_location
								when (c.time_zone_location is not null and c.time_zone_location <> '') 
								then c.time_zone_location
							else 'America/Los_Angeles'
							end as time_zone_location
					from	users u
					join companies c on u.fk_company_id = c.pk_company_id
					join users as phyuser on phyuser.pk_user_id = u.fk_user_id
					left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
					where 	u.pk_user_id = $1"
 Application.models.Role.getRolesUserId( ) -> getUser,"
				select	sudo_as_fk_user_id,
						sudo_retain_user_security
				from	users
				where	pk_user_id = $1"
 Application.models.Role.getRolesUserId( ) -> getUser,"
				select	sudo_as_fk_user_id,
						sudo_retain_user_security
				from	users
				where	pk_user_id = $1"
 Application.models.Role.getRolesQuery( ) -> rolesQuery,"
				select	group_concat(mpt.providertype) as roles_list,
						array_accum(mpt.pk_medserviceprovidertype_id) as role_ids_array,
						array_accum(mpt.feature_permissions_obj) as feature_permissions_obj_array
				from  	medserviceprovider mp
				join medserviceprovidertype mpt on mpt.pk_medserviceprovidertype_id = mp.fk_medserviceprovidertype_id
				where	mp.fk_user_id = $1"
 Application.models.User.getUserSecurity( ) -> userQuery,"
				select	u.security,
						u.sudo_retain_user_security,
						sudo_user.security as sudo_security
				from	users u
				left outer join users as sudo_user on sudo_user.pk_user_id = u.sudo_as_fk_user_id
				where	u.pk_user_id = $1"
 Application.models.User.getUserSecurity( ) -> userQuery,"
				select	u.security,
						u.sudo_retain_user_security,
						sudo_user.security as sudo_security
				from	users u
				left outer join users as sudo_user on sudo_user.pk_user_id = u.sudo_as_fk_user_id
				where	u.pk_user_id = $1"
 Application.models.User.getSudoUserId( ) -> userQuery,"
					select 	fk_user_id
					from 	users
					where 	pk_user_id = $1"
 Application.models.Settings.getMessagingCompanyConfig( ) -> checkCompanyConfig,"
				select 	count(*) as thecount
				from 	message_company_config2
				where 	fk_company_id = $1"
 Application.models.Settings.getMessagingCompanyConfig( ) -> messagingConfigQuery,"
				select 	patientside_messaging,
						medside_messaging,
						patientside_compose,
						medside_compose,
						messaging_forwarding,
						is_site_based,
						show_messaging_on_open_medside,
						show_all_post_types,
						include_link_in_email
				from 	message_company_config2
				where 	fk_company_id = $1"
 Application.models.User.getUserCompanyId( ) -> userQuery,"
				select	fk_company_id
				from	users
				where	pk_user_id = $1"
 Application.models.User.getUserSecurity( ) -> userQuery,"
				select	u.security,
						u.sudo_retain_user_security,
						sudo_user.security as sudo_security
				from	users u
				left outer join users as sudo_user on sudo_user.pk_user_id = u.sudo_as_fk_user_id
				where	u.pk_user_id = $1"
 Application.models.User.getIsSiteUser( ) -> userQuery,"
				select	u.is_site_user,
						u.sudo_as_fk_user_id,
						u2.is_site_user as sudo_is_site_user
				from	users u
				left outer join users u2 on u2.pk_user_id = u.sudo_as_fk_user_id
				where	u.pk_user_id = $1
				and		u.security > 1"
 Application.models.Role.getCompanyRoleIds( ) -> companyRolesQuery,"
				select	ctr.fk_medserviceprovidertype_id
				from	companies_to_roles ctr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = ctr.fk_medserviceprovidertype_id
					and mspt.is_active = true
				where	ctr.fk_company_id = $1"
 Application.models.Role.getCompanyRoleIds( ) -> messagingRolesQuery,"
				select	distinct mptcr.fk_medserviceprovidertype_id
				from	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
					and mspt.is_active = true
				where	mptcr.fk_company_id = $1
				and		mptcr.show_in_compose_actions = true
					and mptcr.fk_medserviceprovidertype_id not in ($2,$3,$4,$5,$6,$7,$8,$9)"
 Application.models.Settings.getSettings( ) -> settingsQuery,"
				select	*
							, reminders_send_time::time as reminders_send_time2
				from	settings_apps
				where	fk_company_id = $1"
 Application.models.Company.getCompanyConfig( ) -> companyConfigQuery,"
				select	kiosk_mode_allow_app,fast_track_allow_app,video_allow_app 
				from	company_config
				where	fk_company_id = $1"
 Application.models.Settings.getSettings( ) -> settingsQuery,"
				select	*
				from	settings_form_header
				where	fk_company_id = $1"
 Application.models.Company.getCompanyConfig( ) -> companyConfigQuery,"
				select	kiosk_mode_allow_app,fast_track_allow_app,video_allow_app 
				from	company_config
				where	fk_company_id = $1"
 Application.models.Settings.getSettings( ) -> settingsQuery,"
				select	*
				from	settings_patient_list
				where	fk_company_id = $1"
 Application.models.Company.getCompanyConfig( ) -> companyConfigQuery,"
				select	kiosk_mode_allow_app,fast_track_allow_app,video_allow_app 
				from	company_config
				where	fk_company_id = $1"
 Application.models.Settings.getSettings( ) -> settingsQuery,"
				select	*
				from	settings_self_reg
				where	fk_company_id = $1"
 Application.models.Company.getCompanyConfig( ) -> companyConfigQuery,"
				select	kiosk_mode_allow_app,fast_track_allow_app,video_allow_app 
				from	company_config
				where	fk_company_id = $1"
 Application.models.Settings.getDefaultTemplate( ) -> templateQuery,"
				select	pk_patient_portal_template_id
				from	patient_portal_templates
				where	fk_company_id = $1
				and		default_template = true"
 Application.models.Patient.initSession( ) -> [insert],"
				insert into userslog 
						(fk_users_id,
						ipaddy,
						action,
						fk_login_mode_id) 
				values ($1,
						$2,
						1,
						$3)"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Survey.getWellnessCheckFormInfo( ) -> surveyQuery,"
				select	smcs.fk_resource_id,
						t.pk_todo_id
				from	settings_apps sap
				join survey_messaging_company_surveys smcs on smcs.fk_company_id = sap.fk_company_id
				join survey_messaging_labels sml on sml.pk_survey_messaging_label_id = smcs.fk_survey_messaging_label_id
					and sml.label = 'WellnessCheck'
				join todos t on t.fk_resource_id = smcs.fk_resource_id
					and t.fk_company_id = smcs.fk_company_id
				join survey_access sa on sa.fk_company_id = t.fk_company_id
					and sa.fk_resource_id = t.fk_resource_id
					and sa.patient_edit = true
				where	sap.fk_company_id = $1
				and		sap.form_auto_assign = true"
 Application.models.Company.getPatientPortalDisplay( ) -> portalDisplayQuery,"
				select	portal_display_forms,
						portal_display_information_center,
						portal_display_contacts,
						portal_display_calendar,
						portal_display_beam_status,
						case 
							when has_portable_health_records = true
							then 'FEATURE_VISIBLE_TILE_VISIBLE'
							else 'FEATURE_HIDDEN_TILE_HIDDEN'
						end as portal_display_visit_summary,
						portal_display_lab_results,
						portal_display_news_feed,
						portal_display_my_files,
						portal_display_patient_education
				from	company_config
				where	fk_company_id = $1"
 Application.models.User.getUserCompanyId( ) -> userQuery,"
				select	fk_company_id
				from	users
				where	pk_user_id = $1"
 Application.models.User.getUserSecurity( ) -> userQuery,"
				select	u.security,
						u.sudo_retain_user_security,
						sudo_user.security as sudo_security
				from	users u
				left outer join users as sudo_user on sudo_user.pk_user_id = u.sudo_as_fk_user_id
				where	u.pk_user_id = $1"
 Application.models.User.getUserTimeZone( ) -> userQuery,"
					select	case
								when (u.user_time_zone_location is not null and u.user_time_zone_location <> '') 
								then u.user_time_zone_location
								when (phyuser.is_site_user is true and phyuser.user_time_zone_location is not null and phyuser.user_time_zone_location <> '') 
								then phyuser.user_time_zone_location
								when (sudophyuser.is_site_user is true and sudophyuser.user_time_zone_location is not null and sudophyuser.user_time_zone_location <> '') 
								then sudophyuser.user_time_zone_location
								when (c.time_zone_location is not null and c.time_zone_location <> '') 
								then c.time_zone_location
							else 'America/Los_Angeles'
							end as time_zone_location
					from	users u
					join companies c on u.fk_company_id = c.pk_company_id
					join users as phyuser on phyuser.pk_user_id = u.fk_user_id
					left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
					where 	u.pk_user_id = $1"
 patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"
				select	
							uscs.fk_user_id,
							uscs.fk_completion_status_id as status_id,
							uscs.fk_surveyuser_id,
							cs.status,
							ut.name as user_todo_name,
							ut.pk_user_todo_id as user_todo_id,
							to_char(ut.active_start_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_start_date,
							to_char(ut.active_end_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_end_date,
							ut.active_start_date at time zone c.time_zone_location as active_start_date_ts,
							ut.display_position,
							ut.fk_patient_portal_template_id,
							ut.active,
							ppt.name as template_name,
							ppt.share_template,
							t.name as todo_name,
							t.pk_todo_id as todo_id,
							t.fk_company_id as company_id,
							t.fk_resource_id as resource_id,
							ut.assigned_date at time zone c.time_zone_location,
							case
								when uscs.fk_completion_status_id = 3
								then uscs.date_modified
								else NULL
							end as date_completed,
							dense_rank() over (partition by ut.fk_user_id, ut.fk_todo_id
												order by ut.assigned_date, ut.pk_user_todo_id)
								as similar_todo_rank,
							count(*) over (partition by ut.fk_user_id, ut.fk_todo_id)
								as similar_todo_count
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
						and sa.patient_edit = true
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and cast(ut.active_start_date as date) <= $4 
						and (
								cast(ut.active_end_date	as date) + interval '1 day'	> $5 
								or ut.active_end_date is null
							)
						and ut.active = true
				order by t.name, 
						ut.active desc"
 patient.portal.model.rules.RuleDataService.getRulesByCompany( ) -> rulesQuery,"
				select	fk_company_id,
						fk_resource_id,
						physician_read,
						physician_edit,
						patient_read,
						patient_edit,
						site_read,
						site_edit
				from	survey_access
				where	fk_company_id = $1"
 Application.models.UserPortalTemplate.getUserPortalTemplate( ) -> userTemplateQuery,"
				select	ppt.pk_patient_portal_template_id,
						ppt.name,
						upt.fk_user_id,
						upt.pk_user_portal_template_id,
						upt.assigned_by_fk_user_id,
						upt.assigned_date,
						upt.active,
						upt.active_start_date,
						upt.modified_by_fk_user_id
				from	user_portal_templates upt
				join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where  	upt.fk_user_id = $1 
				and 	upt.active = true"
 Application.models.UserLog.detail( ) -> userLogQuery,"
				select 
					max(ts) as most_recent_login 
				from	userslog
				join users on users.pk_user_id = userslog.fk_users_id
				where	
							""fk_users_id"" = $dontbeevilman$818012$dontbeevilman$
							AND
					1 = 1"
 Application.lib.FileUtil.getFileManagerUser( ) -> fmUserQuery,"
	            select  ""pk_fileManagerUser_ID""
	            from    ""fileManagerUser""
	            where   ""fk_VT_ID"" = $1
				order by ""pk_fileManagerUser_ID"""
 Application.lib.FileUtil.getItemByName( ) -> itemQuery,"
				select	fmi.""pk_fileManagerItem_ID""
				from	""fileManagerACL"" fma
				join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
					and	lower(fmi.""Name"") = $1
					and	fmi.""isDirectory"" = $2 
				where	fma.""fk_fileManagerUser_ID"" = $3
	            and     fma.is_deleted = false"
 Application.lib.FileUtil.getItemByParent( ) -> itemsQuery,"
				select	fmi.""pk_fileManagerItem_ID"",
						fmi.""fk_fileManagerData_ID"",
						fmi.""Name"",
						fmi.""fileExtension"",
						fmi.""DateAdded"",
						fmi.""DateGenerated"",
						fmi.author,
						fma.""pk_fileManagerACL_ID"",
	                    null as logUserId,
	                    null as docDate,
	                    null as docAuthor,
	                    null as fileName,
	                    null as urlEncodedAclId
				from	""fileManagerItem"" fmi
				join ""fileManagerACL"" fma on fma.""fk_fileManagerItem_ID"" = fmi.""pk_fileManagerItem_ID""
	                and fma.is_deleted = false
				where	fmi.""fk_fileManagerItem_ID"" = $1
				and		fmi.""isDirectory"" = false
				order by fmi.""Name"""
 Application.models.PatientDashboard.getBeamStatus( ) -> statusQuery,"
				select	status, 
						status_text
				from 	beam_statuses
				where 	company_id = $1
				order by created_at desc
				limit 1"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
					and mp.viewable_medside_only = false
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $8 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $9 
					and mtu.fk_message_thread_state in ($10,$11,$12,$13,$14,$15,$16,$17)
						group by mtu.pk_message_thread_users_id"
 Application.models.AppointmentManager.getAppointmentsQuery( ) -> appointmentsQuery,"
				select 	hl7.received_schedule_id, 
						hl7.event_reason, 
						hl7.start_time at time zone c.time_zone_location as start_time, 
						hl7.stop_time at time zone c.time_zone_location as stop_time, 
						hl7.event_reason,
						hl7.created_at,
						u.pk_user_id as user_id,
						u.internalid, 
						u2.pk_user_id as physician_id,
						u2.fname as physician_fname, 
						u2.lname as physician_lname, 
						u2.name_suffix as physician_suffix,
						u3.pk_user_id as physician2_id, 
						u3.fname as physician2_fname, 
						u3.lname as physician2_lname, 
						u3.name_suffix as physician2_suffix,
						c.time_zone_location
				from 	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join settings_apps sa on sa.fk_company_id = c.pk_company_id
						and sa.patient_appointments_show = true
				join hl7_inbound_parsed_siu hl7 on hl7.received_patient_id = u.internalid
					and hl7.company_id = u.fk_company_id
					and hl7.start_time is not null
					and hl7.stop_time is not null
				join users u2 on u2.pk_user_id = u.fk_user_id  
				left outer join users u3 on u3.internalid = hl7.received_physician_id
					and u3.fk_company_id = u.fk_company_id
				where	u.pk_user_id = $1
				order by hl7.received_schedule_id, hl7.created_at desc"
 Application.models.AppointmentManager.getReminders( ) -> remindersQuery,"
				select	ci.pk_calendaritem_id,
						ci.name,
						ci.description,
						ci.datetimeselected,
						ci.appointmentduration
				from 	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join calendaritem ci on ci.fk_user_id = u.pk_user_id
					and ci.fk_calendaritem_id is null
					and ci.active = true
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				where 	u.pk_user_id = $1
				and		cti.send_fasttrack_email <> true
				order by ci.datetimeselected desc"
 Application.lib.FileUtil.getMediaSet( ) -> eduFilesQuery,"
	            select	file_ext,
						file_name,
						is_dir,
						file_info,
						file_size,
						link_text,
						link_url,
						name,
						display_position,
						assigned_by_fk_user_id,
						modified_by_fk_user_id,
						assigned_date,
						active,
						active_start_date,
						active_end_date,
						file_manager_acl_id,
						file_manager_item_id,
						fk_patient_portal_template_id,
						fk_user_id,
						type_label,
						content_type,
						media_type_id,
						file_manager_item_id as ""fk_fileManagerItem_ID"",
						file_manager_acl_id as ""fk_fileManagerACL_ID"",
						user_edu_file_id,
						(
							(uef.active_end_date is null) or
							(now() < uef.active_end_date)
						) as currently_featured
	            from    user_edu_files_detail as uef
	            where   uef.""fk_user_id"" = $1 
					and uef.active = true
	                and uef.active_start_date::date < now()
	                order by lower(name)"
 Application.models.ContentManager.getDefaultContentCompany( ) -> companyQuery,"
				select	pk_company_id
				from	companies
				where	pk_company_id = $1"
 Application.models.ContentManager.getCategoryQuery( ) -> categoryQuery,"
				select	pk_content_category_id,
						fk_context_id,
						name,
						has_subject,
						show_logo_option,
						show_footer_option,
						use_plain_text,
						preview_height,
						preview_width,
						show_portal_display_option,
						show_opt_out_option,
						show_site_selector,
						show_kiosk_exit_url,
						show_fasttrack_exit_url,
						use_default_content
				from	content_category
					where	pk_content_category_id = $1 
				order by name"
 Application.models.ContentManager.getContentQuery( ) -> contentQuery,"
				select	c.pk_content_id,
						c.fk_company_id,
						c.content,
						c.subject,
						c.kiosk_exit_label,
						c.kiosk_exit_url,
						c.fasttrack_exit_label,
						c.fasttrack_exit_url,
						c.is_active,
						c.include_logo,
						c.include_footer
				from	content c
					left outer join content_opt_out coo on coo.fk_content_id = c.pk_content_id
						and coo.fk_user_id = $1 
				where	c.fk_company_id = $2
				and		c.fk_content_category_id = $3 
					and c.site_fk_user_id = $4 
					and c.is_active = true
					and coo.pk_content_opt_out_id is null"
 Application.models.ContentManager.getContentQuery( ) -> contentQuery,"
					select	c.pk_content_id,
							c.fk_company_id,
							c.content,
							c.subject,
							c.kiosk_exit_label,
							c.kiosk_exit_url,
							c.fasttrack_exit_label,
							c.fasttrack_exit_url,
							c.is_active,
							c.include_logo,
							c.include_footer
					from	content c
						left outer join content_opt_out coo on coo.fk_content_id = c.pk_content_id
							and coo.fk_user_id = $1 
					where	c.fk_company_id = $2
					and		c.fk_content_category_id = $3
					and 	c.site_fk_user_id is null
						and c.is_active = true
						and coo.pk_content_opt_out_id is null"
 Application.models.ContentManager.getOptOutArray( ) -> optOutQuery,"
				select	fk_user_id
				from	content_opt_out
				where	fk_content_id = $1"
 Application.models.ContentManager.getContent( ) -> companyQuery,"
					select	name,
							companyphone
					from	companies
					where	pk_company_id = $1"
 Application.models.ContentManager.getContent( ) -> siteQuery,"
					select	lname
					from	users
					where	is_site_user = true
						and pk_user_id = $1"
 Application.models.ContentManager.getDefaultContentCompany( ) -> companyQuery,"
				select	pk_company_id
				from	companies
				where	pk_company_id = $1"
 Application.models.ContentManager.getCategoryQuery( ) -> categoryQuery,"
				select	pk_content_category_id,
						fk_context_id,
						name,
						has_subject,
						show_logo_option,
						show_footer_option,
						use_plain_text,
						preview_height,
						preview_width,
						show_portal_display_option,
						show_opt_out_option,
						show_site_selector,
						show_kiosk_exit_url,
						show_fasttrack_exit_url,
						use_default_content
				from	content_category
					where	pk_content_category_id = $1 
				order by name"
 Application.models.ContentManager.getContentQuery( ) -> contentQuery,"
				select	c.pk_content_id,
						c.fk_company_id,
						c.content,
						c.subject,
						c.kiosk_exit_label,
						c.kiosk_exit_url,
						c.fasttrack_exit_label,
						c.fasttrack_exit_url,
						c.is_active,
						c.include_logo,
						c.include_footer
				from	content c
					left outer join content_opt_out coo on coo.fk_content_id = c.pk_content_id
						and coo.fk_user_id = $1 
				where	c.fk_company_id = $2
				and		c.fk_content_category_id = $3 
					and c.site_fk_user_id = $4 
					and c.is_active = true
					and coo.pk_content_opt_out_id is null"
 Application.models.ContentManager.getContentQuery( ) -> contentQuery,"
					select	c.pk_content_id,
							c.fk_company_id,
							c.content,
							c.subject,
							c.kiosk_exit_label,
							c.kiosk_exit_url,
							c.fasttrack_exit_label,
							c.fasttrack_exit_url,
							c.is_active,
							c.include_logo,
							c.include_footer
					from	content c
						left outer join content_opt_out coo on coo.fk_content_id = c.pk_content_id
							and coo.fk_user_id = $1 
					where	c.fk_company_id = $2
					and		c.fk_content_category_id = $3
					and 	c.site_fk_user_id is null
						and c.is_active = true
						and coo.pk_content_opt_out_id is null"
 Application.models.ContentManager.getOptOutArray( ) -> optOutQuery,"
				select	fk_user_id
				from	content_opt_out
				where	fk_content_id = $1"
 Application.models.ContentManager.getContent( ) -> companyQuery,"
					select	name,
							companyphone
					from	companies
					where	pk_company_id = $1"
 Application.models.ContentManager.getContent( ) -> siteQuery,"
					select	lname
					from	users
					where	is_site_user = true
						and pk_user_id = $1"
 Application.models.ContentManager.getDefaultContentCompany( ) -> companyQuery,"
				select	pk_company_id
				from	companies
				where	pk_company_id = $1"
 Application.models.ContentManager.getCategoryQuery( ) -> categoryQuery,"
				select	pk_content_category_id,
						fk_context_id,
						name,
						has_subject,
						show_logo_option,
						show_footer_option,
						use_plain_text,
						preview_height,
						preview_width,
						show_portal_display_option,
						show_opt_out_option,
						show_site_selector,
						show_kiosk_exit_url,
						show_fasttrack_exit_url,
						use_default_content
				from	content_category
					where	pk_content_category_id = $1 
				order by name"
 Application.models.ContentManager.getContentQuery( ) -> contentQuery,"
				select	c.pk_content_id,
						c.fk_company_id,
						c.content,
						c.subject,
						c.kiosk_exit_label,
						c.kiosk_exit_url,
						c.fasttrack_exit_label,
						c.fasttrack_exit_url,
						c.is_active,
						c.include_logo,
						c.include_footer
				from	content c
					left outer join content_opt_out coo on coo.fk_content_id = c.pk_content_id
						and coo.fk_user_id = $1 
				where	c.fk_company_id = $2
				and		c.fk_content_category_id = $3 
					and c.site_fk_user_id = $4 
					and c.is_active = true
					and coo.pk_content_opt_out_id is null"
 Application.models.CCDA.getCCDACount( ) -> patientQuery,"
				select	u.pk_user_id,
						u.fname,
						u.lname,
						u.internalid,
						u.fk_company_id,
						u.fk_user_id,
						u2.is_site_user as has_site_user,
						u2.lname as site_name,
						u2.location
				from	users u
				join users u2 on u2.pk_user_id = u.fk_user_id
				where	u.pk_user_id = $1
				and		u.security = 1
				and		u.account_status = 1"
 Application.models.ContentManager.getContentQuery( ) -> contentQuery,"
					select	c.pk_content_id,
							c.fk_company_id,
							c.content,
							c.subject,
							c.kiosk_exit_label,
							c.kiosk_exit_url,
							c.fasttrack_exit_label,
							c.fasttrack_exit_url,
							c.is_active,
							c.include_logo,
							c.include_footer
					from	content c
						left outer join content_opt_out coo on coo.fk_content_id = c.pk_content_id
							and coo.fk_user_id = $1 
					where	c.fk_company_id = $2
					and		c.fk_content_category_id = $3
					and 	c.site_fk_user_id is null
						and c.is_active = true
						and coo.pk_content_opt_out_id is null"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"
				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit 1000"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"
				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit 250"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> lastExportQuery,"
				select	r.pk_rcopia_create_log_id,
						r.date_created
				from	users u
				join rcopia_create_log r on r.fk_user_id = u.pk_user_id
				where	u.fk_company_id = $1
				and		u.security = 1
				order by r.pk_rcopia_create_log_id desc
				limit 1"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> surveyUsersQuery,"
				select	distinct ""fk_User_ID_Self""
				from	""SurveyUser""
				join dblink (
						'hc_dev_dblink_server_connection' :: text, $mjrip$
							select 	pk_user_id
							from	users
							where	account_status = 1
							and		security = 1
							and	fk_company_id = 12 
						$mjrip$ :: text
					) as u (pk_user_id bigint) 
					on u.pk_user_id = ""fk_User_ID_Self""
				where	""fk_Resource_ID"" = 8400
				and		""DateAdded"" > $1"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> patientsQuery,"
				select	u.pk_user_id,
						u.fk_company_id,
						u.internalid,
						u.fname,
						u.mname,
						u.lname,
						u.dob,
						u.gender,
						u.phone
				from	users u
				where	u.fk_company_id = $1
				and		u.security = 1
				and		u.account_status = 1
				and		(u.datecreated > $2
						or u.dateupdated > $3 )"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.models.PatientPortalTemplate.getDefaultTemplateByCompanyId( ) -> templateQuery,"
				select	pk_patient_portal_template_id,
						fk_company_id,
						fk_user_id,
						name,
						default_template
				from	patient_portal_templates
				where	fk_company_id = $1 
				and 	default_template = true"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.models.ExternalPatient.getLastImportedHUPTIPatient( ) -> patientsQuery,"
				select	max(max_pat_id1) as Pat_ID1
				from	mosaiq_import_logs
				WHERE 	company_id = 96"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	pk_rave_export_log_id,
						fk_user_id,
						fk_surveyuser_id,
						fk_resource_id,
						submitter_fk_user_id,
						fk_user_todo_id
				from	rave_export_log
				where	fk_company_id = $1
				and		is_processed = false
				and		survey_outdated = false
				order by pk_rave_export_log_id
				limit 50"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	u.fname,
						u.lname,
						u.case_no,
						t.name,
						l.pk_rave_export_log_id,
						l.error_message
				from	rave_export_log l
				join users u on u.pk_user_id = l.fk_user_id
				left outer join user_todos ut on ut.pk_user_todo_id = l.fk_user_todo_id
				left outer join todos t on t.pk_todo_id = ut.fk_todo_id
				where	l.fk_company_id = $1
				and		l.is_processed = false
				and		l.survey_outdated = false
				order by u.lname,
						u.fname,
						t.name"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"
				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit 250"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"
				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit 1000"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.TaskUFPTIMosaiqUpdates.run( ) -> lastProcessTimeQuery,"
				select	process_time
				from 	process_times
				where 	process_id = 2
				and		process_time is not null
				and 	process_name = 'TaskUFPTIMosaiqUpdates.cfc'
				order by process_time desc
				limit 1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"
				select	survey_indexing_run_id, 
						start_time, 
						end_time, 
						surveys_indexed, 
						is_last_run, 
						surveys_start_at, 
						surveys_end_at
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"
					select	survey_indexing_run_id, 
							start_time, 
							end_time, 
							surveys_indexed, 
							is_last_run, 
							surveys_start_at, 
							surveys_end_at
					from	survey_indexing_runs
					where	survey_indexing_run_id > 0
					order by survey_indexing_run_id desc
					limit 1"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.didPrevScriptFinish( ) -> surveyIndexQuery,"	
				select	survey_indexing_run_id
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Login.getMedTeamQuery( ) -> medTeamQuery,"
				select	u.login, 
						u.password, 
						u.fname, 
						u.lname, 
						u.internalid,
						u.pk_user_id, 
						u.fk_company_id,
						u.security, 
						u.sudo_as_fk_user_id, 
						u.has_changed_password,
						u.password_valid_until, 
						u.sudo_retain_user_security,
						u.active,
						u.is_test_user,
						sudouser.is_site_user as sudo_is_site_user,
						sudouser.pk_user_id as sudo_user_id,
						sudouser.internalid as sudo_internalid,
						c.name as company_name,
						c.hroffsetfromservertime,
						c.custom_clinical_forms, 
						c.is_foundation,
						cc.vtoc_login_allow,
						cc.medteam_edit_inactive_forms,
						cc.medteam_edit_archived_forms,
						case  
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (sudouser.user_time_zone_location is not null 
								and sudouser.user_time_zone_location <> '') 
							then sudouser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location 
							else 'America/Los_Angeles'
						end as time_zone_location,
						u.institution_no, 
						u.is_site_user,
						u.user_association_uuid,
						group_concat(mspt.providertype) as roles_list,
						array_accum(mspt.pk_medserviceprovidertype_id) as roleids_list,
						array_accum(mspt.feature_permissions_obj) as feature_permissions_obj_array		
				from 	users as u
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = c.pk_company_id
				left join medserviceprovider as msp on msp.fk_user_id = u.pk_user_id
				left join medserviceprovidertype as mspt on mspt.pk_medserviceprovidertype_id = msp.fk_medserviceprovidertype_id
				left outer join users as sudouser on sudouser.pk_user_id = u.sudo_as_fk_user_id
				where	u.account_status  = 1
				and 	u.security > 1
					and	lower(u.login) = $1 
						and check_password($2, u.password)
				group by 
		 			u.login, 
					u.password, 
					u.fname, 
					u.lname, 
					u.internalid,
					u.pk_user_id, 
					u.fk_company_id,
		            u.security, 
					u.sudo_as_fk_User_ID, 
					u.has_changed_password,
					u.password_valid_until, 
					u.sudo_retain_user_security,
					u.active,
					u.is_test_user,
					sudouser.is_site_user,
					sudouser.pk_user_id,
					sudouser.internalid,
					c.name,
		            c.hroffsetfromservertime, 
		            c.custom_clinical_forms,
					c.is_foundation,
					cc.vtoc_login_allow,
					cc.medteam_edit_inactive_forms,
					cc.medteam_edit_archived_forms,
					u.institution_no,
					u.user_association_uuid,
					u.user_time_zone_location,
					sudouser.user_time_zone_location,
				    time_zone_location"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	pk_rave_export_log_id,
						fk_user_id,
						fk_surveyuser_id,
						fk_resource_id,
						submitter_fk_user_id,
						fk_user_todo_id
				from	rave_export_log
				where	fk_company_id = $1
				and		is_processed = false
				and		survey_outdated = false
				order by pk_rave_export_log_id
				limit 50"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	u.fname,
						u.lname,
						u.case_no,
						t.name,
						l.pk_rave_export_log_id,
						l.error_message
				from	rave_export_log l
				join users u on u.pk_user_id = l.fk_user_id
				left outer join user_todos ut on ut.pk_user_todo_id = l.fk_user_todo_id
				left outer join todos t on t.pk_todo_id = ut.fk_todo_id
				where	l.fk_company_id = $1
				and		l.is_processed = false
				and		l.survey_outdated = false
				order by u.lname,
						u.fname,
						t.name"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"
				select	survey_indexing_run_id, 
						start_time, 
						end_time, 
						surveys_indexed, 
						is_last_run, 
						surveys_start_at, 
						surveys_end_at
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.didPrevScriptFinish( ) -> surveyIndexQuery,"	
				select	survey_indexing_run_id
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> [update],"
				update	survey_indexing_runs
				set 	is_last_run = false
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> surveyUsersQuery,"
				select	su.""pk_SurveyUser_ID"", 
						su.""DateAdded"", 
						su.""DateCompleted"", 
						su.""fk_Resource_ID"", 
						su.""fk_User_ID_Self"", 
						su.revision_type, 
						su.revision_fk_surveyuser_id, 
						updated_at,
						u.fk_company_id 
				from	""SurveyUser"" su
				join dblink(
						$joint$hc_dblink_server_connection$joint$::text, $joint$
							select	pk_user_id,
									fk_company_id
							from	users
							where	account_status = 1
						$joint$::text
					) as u (pk_user_id bigint, fk_company_id bigint) 
					on u.pk_user_id = su.""fk_User_ID_Self""
				where	su.updated_at > $1
				order by su.updated_at
					limit 300"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> [update],"
					update	survey_indexing_runs
					set		is_last_run = true
					where 	survey_indexing_run_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> lastExportQuery,"
				select	r.pk_rcopia_create_log_id,
						r.date_created
				from	users u
				join rcopia_create_log r on r.fk_user_id = u.pk_user_id
				where	u.fk_company_id = $1
				and		u.security = 1
				order by r.pk_rcopia_create_log_id desc
				limit 1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> surveyUsersQuery,"
				select	distinct ""fk_User_ID_Self""
				from	""SurveyUser""
				join dblink (
						'hc_dev_dblink_server_connection' :: text, $mjrip$
							select 	pk_user_id
							from	users
							where	account_status = 1
							and		security = 1
							and	fk_company_id = 12 
						$mjrip$ :: text
					) as u (pk_user_id bigint) 
					on u.pk_user_id = ""fk_User_ID_Self""
				where	""fk_Resource_ID"" = 8400
				and		""DateAdded"" > $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> patientsQuery,"
				select	u.pk_user_id,
						u.fk_company_id,
						u.internalid,
						u.fname,
						u.mname,
						u.lname,
						u.dob,
						u.gender,
						u.phone
				from	users u
				where	u.fk_company_id = $1
				and		u.security = 1
				and		u.account_status = 1
				and		(u.datecreated > $2
						or u.dateupdated > $3 )"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"
				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit 1000"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"
				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit 250"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.models.PatientPortalTemplate.getDefaultTemplateByCompanyId( ) -> templateQuery,"
				select	pk_patient_portal_template_id,
						fk_company_id,
						fk_user_id,
						name,
						default_template
				from	patient_portal_templates
				where	fk_company_id = $1 
				and 	default_template = true"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.models.ExternalPatient.getLastImportedHUPTIPatient( ) -> patientsQuery,"
				select	max(max_pat_id1) as Pat_ID1
				from	mosaiq_import_logs
				WHERE 	company_id = 96"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"
				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit 1000"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"
				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit 250"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.TaskUFPTIMosaiqUpdates.run( ) -> lastProcessTimeQuery,"
				select	process_time
				from 	process_times
				where 	process_id = 2
				and		process_time is not null
				and 	process_name = 'TaskUFPTIMosaiqUpdates.cfc'
				order by process_time desc
				limit 1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	pk_rave_export_log_id,
						fk_user_id,
						fk_surveyuser_id,
						fk_resource_id,
						submitter_fk_user_id,
						fk_user_todo_id
				from	rave_export_log
				where	fk_company_id = $1
				and		is_processed = false
				and		survey_outdated = false
				order by pk_rave_export_log_id
				limit 50"
 Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"
				select	u.fname,
						u.lname,
						u.case_no,
						t.name,
						l.pk_rave_export_log_id,
						l.error_message
				from	rave_export_log l
				join users u on u.pk_user_id = l.fk_user_id
				left outer join user_todos ut on ut.pk_user_todo_id = l.fk_user_todo_id
				left outer join todos t on t.pk_todo_id = ut.fk_todo_id
				where	l.fk_company_id = $1
				and		l.is_processed = false
				and		l.survey_outdated = false
				order by u.lname,
						u.fname,
						t.name"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"
				select	survey_indexing_run_id, 
						start_time, 
						end_time, 
						surveys_indexed, 
						is_last_run, 
						surveys_start_at, 
						surveys_end_at
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"
					select	survey_indexing_run_id, 
							start_time, 
							end_time, 
							surveys_indexed, 
							is_last_run, 
							surveys_start_at, 
							surveys_end_at
					from	survey_indexing_runs
					where	survey_indexing_run_id > 0
					order by survey_indexing_run_id desc
					limit 1"
 Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.didPrevScriptFinish( ) -> surveyIndexQuery,"	
				select	survey_indexing_run_id
				from	survey_indexing_runs
				where	is_last_run = true"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Login.getPatientQuery( ) -> patientQuery,"
				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit 2"
 Application.models.Login.getPatientQuery( ) -> patientQuery,"
				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit 2"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Login.getPatientQuery( ) -> patientQuery,"
				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit 2"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Login.getPatientQuery( ) -> patientQuery,"
				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit 2"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.Toolbelt.getRegionDomainInfo( ) -> getCompanyDomain,"
	                select  local_domain,
							email_from_domain,
							email_from_display
	                from    companies
	                where   pk_company_id = $1"
 Application.helpers.EmailHelper.getPasswordValidInterval( ) -> companyConfigQuery,"
				select	password_expiration_hours
				from	company_config
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.Toolbelt.getRegionDomainInfo( ) -> getCompanyDomain,"
	                select  local_domain,
							email_from_domain,
							email_from_display
	                from    companies
	                where   pk_company_id = $1"
 Application.helpers.EmailHelper.getPasswordValidInterval( ) -> companyConfigQuery,"
				select	password_expiration_hours
				from	company_config
				where	fk_company_id = $1"
 Application.helpers.EmailHelper.logEmail( ) -> [insert],"
				insert into email_log
						(fk_user_id,
						fk_company_id,
						email_to,
						email_from,
							email_body,
							email_type,
						email_subject,
						email_sent,
						email_error)
				values	($1,
						$2,
						$3,
						$4,
						$5,
						$6,
						$7,
						$8,
							null
						)"
 Application.models.Patient.insertLoginCardSent( ) -> [insert],"
				insert into login_card_sent_log
						(fk_user_id,
						actor,
						actor_id,
						create_date)
				values	($1,
						$2,
							null,
							now()
						)"
 Application.helpers.EmailHelper.logEmail( ) -> [insert],"
				insert into email_log
						(fk_user_id,
						fk_company_id,
						email_to,
						email_from,
							email_body,
							email_type,
						email_subject,
						email_sent,
						email_error)
				values	($1,
						$2,
						$3,
						$4,
						$5,
						$6,
						$7,
						$8,
							null
						)"
 Application.models.Patient.insertLoginCardSent( ) -> [insert],"
				insert into login_card_sent_log
						(fk_user_id,
						actor,
						actor_id,
						create_date)
				values	($1,
						$2,
							null,
							now()
						)"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.helpers.SessionHelper.checkSession( ) -> userQuery,"
							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset 0"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"
				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id = $2"
 Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"
				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id = $2"
 Application.models.Messaging.getThreads( ) -> threadsQuery,"
				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by mtu.pk_message_thread_users_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Login.getPatientQuery( ) -> patientQuery,"
				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit 2"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Login.getPatientQuery( ) -> patientQuery,"
				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit 2"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.Login.getPatientQuery( ) -> patientQuery,"
				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit 2"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.models.Login.getPatientQuery( ) -> patientQuery,"
				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit 2"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.Toolbelt.getRegionDomainInfo( ) -> getCompanyDomain,"
	                select  local_domain,
							email_from_domain,
							email_from_display
	                from    companies
	                where   pk_company_id = $1"
 Application.helpers.EmailHelper.getPasswordValidInterval( ) -> companyConfigQuery,"
				select	password_expiration_hours
				from	company_config
				where	fk_company_id = $1"
 Application.helpers.EmailHelper.logEmail( ) -> [insert],"
				insert into email_log
						(fk_user_id,
						fk_company_id,
						email_to,
						email_from,
							email_body,
							email_type,
						email_subject,
						email_sent,
						email_error)
				values	($1,
						$2,
						$3,
						$4,
						$5,
						$6,
						$7,
						$8,
							null
						)"
 Application.models.Patient.insertLoginCardSent( ) -> [insert],"
				insert into login_card_sent_log
						(fk_user_id,
						actor,
						actor_id,
						create_date)
				values	($1,
						$2,
							null,
							now()
						)"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'companies'"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"
					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain = $2"
 Application.models.Company.getCompanyLocale( ) -> localeQuery,"
				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id = $1"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"
				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)"
 Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as connections_array"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> lastExportQuery,"
				select	r.pk_rcopia_create_log_id,
						r.date_created
				from	users u
				join rcopia_create_log r on r.fk_user_id = u.pk_user_id
				where	u.fk_company_id = $1
				and		u.security = 1
				order by r.pk_rcopia_create_log_id desc
				limit 1"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> surveyUsersQuery,"
				select	distinct ""fk_User_ID_Self""
				from	""SurveyUser""
				join dblink (
						'hc_dev_dblink_server_connection' :: text, $mjrip$
							select 	pk_user_id
							from	users
							where	account_status = 1
							and		security = 1
							and	fk_company_id = 12 
						$mjrip$ :: text
					) as u (pk_user_id bigint) 
					on u.pk_user_id = ""fk_User_ID_Self""
				where	""fk_Resource_ID"" = 8400
				and		""DateAdded"" > $1"
 Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> patientsQuery,"
				select	u.pk_user_id,
						u.fk_company_id,
						u.internalid,
						u.fname,
						u.mname,
						u.lname,
						u.dob,
						u.gender,
						u.phone
				from	users u
				where	u.fk_company_id = $1
				and		u.security = 1
				and		u.account_status = 1
				and		(u.datecreated > $2
						or u.dateupdated > $3 )"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"
				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10 minutes'::interval)
				)"
 Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"
				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit 10"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id = $1"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'SurveyUser'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'users'"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"
				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit 1000"
 Application.lib.scheduled_scripts.TaskSmartReminders.run( ) -> companiesQuery,"
				select	fk_company_id
				from	company_config
				where	fast_track_allow_app = true"
 Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME = 'user_todos'"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"
				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning pk_process_time_id"
 Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"
				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by u.pk_user_id"
 Application.lib.scheduled_scripts.TaskSmartReminders.run( ) -> patientsQuery,"
				select	u.fk_company_id,
						u.pk_user_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u.fk_user_id,
						u2.is_site_user,
						sa.sms_allow
				from	users u
				join users u2 on u2.pk_user_id = u.fk_user_id and u2.user_time_zone_location is null
				join companies c on c.pk_company_id = u.fk_company_id 
					and c.is_active = true
					and c.region = 'US'::region
				join settings_apps sa on sa.fk_company_id = u.fk_company_id
					and sa.reminders_send = true
					and (sa.reminders_send_time::time at time zone c.time_zone_location)
						between ((pg_catalog.time(now()) at time zone c.time_zone_location) - interval '5 minutes')
						and ((pg_catalog.time(now()) at time zone c.time_zone_location) + interval '5 minutes')
				join user_todos ut on ut.fk_user_id = u.pk_user_id
					and	ut.active = true
					and (
							date(ut.active_start_date) = (date(now() at time zone c.time_zone_location) + sa.reminders_start_interval)
							or date(ut.active_end_date) = (date(now() at time zone c.time_zone_location) + sa.reminders_end_interval)
							or (
									date(now() at time zone c.time_zone_location) >=
									((select max(utrl.processing_date) 
									from user_todo_reminders_log utrl
									where utrl.fk_user_id = u.pk_user_id) + sa.reminders_inter_interval)
									and date(ut.active_start_date) < date(now() at time zone c.time_zone_location)
									and date(ut.active_end_date) >= date(now() at time zone c.time_zone_location)
								)
							or (
									(date(ut.active_start_date) < date(now() at time zone c.time_zone_location))
									and (date(ut.active_end_date) >= date(now() at time zone c.time_zone_location))
									and 
									(select count(*)
									from user_todo_reminders_log utrl7
									where utrl7.fk_user_id = u.pk_user_id) = 0
								)
						)
					and (
							(select max(utrl2.processing_date) 
							from user_todo_reminders_log utrl2
							where utrl2.fk_user_id = u.pk_user_id) is null
							or
							(select max(utrl3.processing_date) 
							from user_todo_reminders_log utrl3
							where utrl3.fk_user_id = u.pk_user_id) + sa.reminders_min_interval < date(now() at time zone c.time_zone_location)
						)
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
					and uscs.fk_completion_status_id = 1
				left outer join identity_to_account_map itam on itam.fk_user_id = u.pk_user_id
					and itam.fk_company_id in (150)
				where	u.security = 1
				and		u.account_status = 1
				and		u.email is not null
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				and		itam.pk_identity_to_account_map_id is null
				group by u.fk_company_id,
						u.pk_user_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u.fk_user_id,
						u2.is_site_user,
						sa.sms_allow
				union 
				select	u3.fk_company_id,
						u3.pk_user_id,
						u3.email,
						u3.mobile_phone,
						u3.may_receive_sms_notifications,
						u3.fk_user_id,
						u4.is_site_user,
						sa2.sms_allow
				from	users u3
				join users u4 on u4.pk_user_id = u3.fk_user_id and u4.user_time_zone_location is not null
				join companies c2 on c2.pk_company_id = u3.fk_company_id 
					and c2.is_active = true
					and c2.region = 'US'::region
				join settings_apps sa2 on sa2.fk_company_id = u3.fk_company_id
					and sa2.reminders_send = true
					and (sa2.reminders_send_time::time at time zone u4.user_time_zone_location)
						between ((pg_catalog.time(now()) at time zone u4.user_time_zone_location) - interval '5 minutes')
						and ((pg_catalog.time(now()) at time zone u4.user_time_zone_location) + interval '5 minutes')
				join user_todos ut2 on ut2.fk_user_id = u3.pk_user_id
					and	ut2.active = true
					and (
							date(ut2.active_start_date) = (date(now() at time zone u4.user_time_zone_location) + sa2.reminders_start_interval)
							or date(ut2.active_end_date) = (date(now() at time zone u4.user_time_zone_location) + sa2.reminders_end_interval)
							or (
									date(now() at time zone u4.user_time_zone_location) >=
									((select max(utrl4.processing_date) 
									from user_todo_reminders_log utrl4
									where utrl4.fk_user_id = u3.pk_user_id) + sa2.reminders_inter_interval)
									and date(ut2.active_start_date) < date(now() at time zone u4.user_time_zone_location)
									and date(ut2.active_end_date) >= date(now() at time zone u4.user_time_zone_location)
								)
							or (
									(date(ut2.active_start_date) < date(now() at time zone u4.user_time_zone_location))
									and (date(ut2.active_end_date) >= date(now() at time zone u4.user_time_zone_location))
									and 
									(select count(*)
									from user_todo_reminders_log utrl8
									where utrl8.fk_user_id = u3.pk_user_id) = 0
								)
						)
					and (
							(select max(utrl5.processing_date) 
							from user_todo_reminders_log utrl5
							where utrl5.fk_user_id = u3.pk_user_id) is null
							or
							(select max(utrl6.processing_date) 
							from user_todo_reminders_log utrl6
							where utrl6.fk_user_id = u3.pk_user_id) + sa2.reminders_min_interval < date(now() at time zone u4.user_time_zone_location)
						)
				join user_survey_completion_statuses uscs2 on uscs2.fk_user_todo_id = ut2.pk_user_todo_id
					and uscs2.fk_completion_status_id = 1
				left outer join identity_to_account_map itam2 on itam2.fk_user_id = u3.pk_user_id
					and itam2.fk_company_id in (150)
				where	u3.security = 1
				and		u3.account_status = 1
				and		u3.email is not null
				and 	u3.email <> ''
				and 	(u3.mayreceiveemailreminders = true or u3.mayreceiveemailreminders is null)
				and		itam2.pk_identity_to_account_map_id is null
				group by u3.fk_company_id,
						u3.pk_user_id,
						u3.email,
						u3.mobile_phone,
						u3.may_receive_sms_notifications,
						u3.fk_user_id,
						u4.is_site_user,
						sa2.sms_allow"
 Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"
				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit 250"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
 Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"
					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id = $3"
