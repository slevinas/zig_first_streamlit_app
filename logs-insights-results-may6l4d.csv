tag,Query,tot_g_size
Application.models.SurveyUser.create( ) -> [insert],"								select insert_survey_response (
									$1,
									$2,
									$3,
									$4
								) as",223910
Application.models.User.getUserSecurity( ) -> userQuery,"				select	u.security,
						u.sudo_retain_user_security,
						sudo_user.security as sudo_security
				from	users u
				left outer join users as sudo_user on sudo_user.pk_user_id = u.sudo_as_fk_user_id
				where	u.pk_user_id =",122814
Application.App.getEntity( ) -> ent,"
				SELECT COLUMN_NAME as propname
					,CASE
						WHEN IS_NULLABLE = 'YES' AND COLUMN_DEFAULT IS NULL THEN 'true'
						ELSE 'false'
					END AS nullable
					,DATA_TYPE AS datatype
					,CASE
						WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN 0
						ELSE CHARACTER_MAXIMUM_LENGTH
					END as length,
					column_default as columndefault
				FROM information_schema.COLUMNS
				WHERE TABLE_NAME =",97721
Application.models.Company.getCompanyConfig( ) -> companyConfigQuery,"				select	kiosk_mode_allow_app,fast_track_allow_app,video_allow_app 
				from	company_config
				where	fk_company_id =",96610
Application.models.Company.getCompanyLocale( ) -> localeQuery,"				select	supported_locale,
						date_format,
						jscalendar_date_format,
						jscalendar_datetime_format,
						flatpicker_date_format,
						flatpicker_datetime_format,
						todos_template_date_format
				from	company_locale
				where	fk_company_id =",87352
Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
				where 	mptcr.fk_company_id = $1 
					and mptcr.fk_message_post_type_id =",79263
Application.models.User.getUserCompanyId( ) -> userQuery,"				select	fk_company_id
				from	users
				where	pk_user_id =",72127
Application.models.User.getUserTimeZone( ) -> userQuery,"					select	case
								when (u.user_time_zone_location is not null and u.user_time_zone_location <> '') 
								then u.user_time_zone_location
								when (phyuser.is_site_user is true and phyuser.user_time_zone_location is not null and phyuser.user_time_zone_location <> '') 
								then phyuser.user_time_zone_location
								when (sudophyuser.is_site_user is true and sudophyuser.user_time_zone_location is not null and sudophyuser.user_time_zone_location <> '') 
								then sudophyuser.user_time_zone_location
								when (c.time_zone_location is not null and c.time_zone_location <> '') 
								then c.time_zone_location
							else 'America/Los_Angeles'
							end as time_zone_location
					from	users u
					join companies c on u.fk_company_id = c.pk_company_id
					join users as phyuser on phyuser.pk_user_id = u.fk_user_id
					left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
					where 	u.pk_user_id =",65860
Application.App.dblinkConnect( ) -> connectionsQuery,"
					select	dblink_get_connections() as",62400
Application.models.SelfReg.getCompanyIdFromDomain( ) -> companyQuery,"					select	c.pk_company_id
					from 	companies c
					left outer join	hospitals h on h.company_id = c.pk_company_id
					where 	$1 = ANY(h.local_domains)
							or c.local_domain =",58387
Application.models.SurveyUser.getResponseTextByResponseId( ) -> responseQuery,"	  				select	res_value.""Predicate_V1_Value"" as response_value
					from 	""Resource"" as res_value
					join ""Resource"" as object_value_row on res_value.""fk_SurveyUser_ID"" in ($1)
						and res_value.""Subject_fk_Schema_ID"" = 134
						and object_value_row.""fk_SurveyUser_ID"" in ($2)
						and object_value_row.""Subject_fk_Schema_ID"" = 133
						and res_value.""Object_fk_Resource_ID"" = object_value_row.""Object_fk_Resource_ID""
					where 	object_value_row.""Predicate_V1_Value_fk_Resource_ID"" in",55557
Application.helpers.SessionHelper.checkSession( ) -> userQuery,"							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id =",51641
Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '3 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id =",51099
Application.models.SurveyUserSolr.dump( ) -> surveyuserQueryuery,"											select	revision_fk_surveyuser_id
											from	""SurveyUser""
											where	""pk_SurveyUser_ID"" = $1
											and		revision_fk_surveyuser_id is not",48090
Application.models.SurveyUser.getUserInputDataForSUIDs( ) -> answersQuery,"				select	res_value.""Predicate_V1_Value"" as response_value,
						object_value_row.""Predicate_V1_Value_fk_Resource_ID"" as option_id
				from 	""Resource"" as res_value
				join ""Resource"" as object_value_row on res_value.""fk_SurveyUser_ID"" in ($1)
					and res_value.""Subject_fk_Schema_ID"" = 134
					and object_value_row.""fk_SurveyUser_ID"" in ($2)
					and object_value_row.""Subject_fk_Schema_ID"" = 133
					and res_value.""Object_fk_Resource_ID"" =",44697
Application.models.Survey.getTodoName( ) -> surveyNameQuery,"				select	name
				from	todos
					where 	fk_resource_id = $1
					and 	fk_company_id =",34539
Application.models.FormsLibrary.insertOidMapping( ) -> [insert],				insert 	into,32176
Application.models.Patient.getPatients( ) -> unapprovedQuery,"				select  count(*) as totalUnapp
				from    users
				where   fk_company_id = $1
				and		security = 1
				and		fk_selfreg_id is not null
				and 	account_status not in",32024
Application.App.getFormattedPhoneWithDialCode( ) -> patientQuery,"
				select	phone,
						phone_dial_code
				from	users
				where	pk_user_id = $1
				and		fk_company_id = $2
				and		security = 1
				and		account_status =",26605
Application.models.FhirForm.getSurveyAccessQuery( ) -> surveyAccessQuery,"				select	fhir_questionnaire_url,
						public_form_url
				from	survey_access
				where	fk_company_id = $1
				and		fk_resource_id =",24767
Application.models.Survey.getSurveyTagName( ) -> surveyNameQuery,"				select	resource_label
				from	survey_tag_resource
					where 	fk_resource_id = $1
					and 	fk_company_id =",24084
Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '0 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id =",23969
Application.App.findBy_( ) -> instances,"
				select
					survey_schemas.survey_resource_id, json 
				from ""indexing_filters"" 
					left join survey_schemas on (survey_schemas.id = indexing_filters.survey_schema_id) 
				where
							""company_id"" = $1
							and
					1 =",23728
patient.portal.model.rules.RuleDataService.getRulesByCompany( ) -> rulesQuery,"				select	fk_company_id,
						fk_resource_id,
						physician_read,
						physician_edit,
						patient_read,
						patient_edit,
						site_read,
						site_edit
				from	survey_access
				where	fk_company_id =",22269
Application.models.User.getUserTimeZone( ) -> userQuery,"					select case
								when (u.user_time_zone_location is not null and u.user_time_zone_location <> '') 
								then u.user_time_zone_location
								when (sudouser.user_time_zone_location is not null and sudouser.user_time_zone_location <> '') 
								then sudouser.user_time_zone_location
								when (c.time_zone_location is not null and c.time_zone_location <> '') 
								then c.time_zone_location
							else 'America/Los_Angeles'
							end as time_zone_location
					from users u
					join companies as c on u.fk_company_id = c.pk_company_id
					left outer join users as sudouser on sudouser.pk_user_id = u.sudo_as_fk_user_id
					where 	u.pk_user_id =",21509
Application.models.Role.getRolesUserId( ) -> getUser,"				select	sudo_as_fk_user_id,
						sudo_retain_user_security
				from	users
				where	pk_user_id =",20670
Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"				insert into process_times
							(process_id,
							process_name
							)
				values		(2,
							$1 
							)
				returning",18319
Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.insertSurveyLog( ) -> insQry,"
					insert into survey_indexing_log 
							(suid, 
							survey_indexing_run_id, 
							created_at, 
							solr_status_code, 
							solr_status_text)
					values	($1,
							$2,
							now(),
							$3,
							$4)
				returning",17958
Application.models.Survey.getLogicalSurvey( ) -> surveyNameQuery,"				select
					s.id as survey_id,
					s.title as survey_name
				from
					survey_company sc
				join surveys s on s.id = sc.survey_id
				join survey_timepoints stp on stp.survey_id = s.id
				join survey_timepoint_survey_template stst on stst.survey_timepoint_id = stp.id
				join survey_templates_access sta on sta.fk_survey_template_id = stst.survey_template_id
					and sta.fk_company_id = sc.company_id
					and sta.fk_resource_id = $1
				where	sc.company_id = $2
				group",16531
Application.models.Site.getSiteCount( ) -> siteQuery,"				select	count(*) as site_count
				from	users
				where	fk_company_id = $1
				and		is_site_user = true
				and		security > 1
				and		account_status =",16000
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select 	name 
					from	companies 
					where 	pk_company_id =",15201
Application.lib.scheduled_scripts.TaskSurveyDocsAddToQueue.run( ) -> [insert],								insert into tempsurveyfixindex,15070
Application.helpers.SessionHelper.validateActionId( ) -> auditActionQuery,"				select	action,
						fk_audit_type_id
				from	audit_action
				where	pk_audit_action_id =",14650
Application.models.Settings.getMessagingCompanyConfig( ) -> checkCompanyConfig,"				select 	count(*) as thecount
				from 	message_company_config2
				where 	fk_company_id =",13983
Application.models.Survey.editLabelByResourceId( ) -> [update],"				update	""Resource""
				set 	""Predicate_V2_Value"" = $1
				where 	""pk_Resource_ID"" =",13950
Application.models.Survey.editLabelByResourceId( ) -> surveyLabelQuery,"				select	""pk_Resource_ID"",
						""Predicate_V2_Value"" as name
				from 	""Resource_getPropertyRowOfClass""('Label'::text, $1::bigint) as",13950
Application.models.Patient.getPatients( ) -> studyQuery,"					select	pk_study_id
					from	study
					where	fk_company_id = $1
					and		use_in_reports =",13742
Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"					update	process_times
					set		process_time = now(),
							process_completed = true
					where	pk_process_time_id =",13560
Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> [update],"				update	file_download_queue
				set		error_occurred = true,
						error_message = 'Unknown Error',
						file_uuid = null,
						file_name = null,
						date_downloaded = null
				where	pk_file_download_queue_id in (
					select	pk_file_download_queue_id
					from	file_download_queue
					where	date_processing_start is not null
					and		date_processing_end is null
					and		error_occurred = false
					and		date_created < (now() - '1 hour 10",11431
Application.lib.scheduled_scripts.TaskDownloadQueueProcess.run( ) -> queueQuery,"				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						si.session_info_json
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				where	fdq.date_processing_start is null
				and		fdq.error_occurred = false
				order by fdq.priority desc,
						fdq.pk_file_download_queue_id
				limit",11431
Application.models.ContentManager.getDefaultContentCompany( ) -> companyQuery,"				select	pk_company_id
				from	companies
				where	pk_company_id =",10637
Application.models.Role.getRolesQuery( ) -> rolesQuery,"				select	group_concat(mpt.providertype) as roles_list,
						array_accum(mpt.pk_medserviceprovidertype_id) as role_ids_array,
						array_accum(mpt.feature_permissions_obj) as feature_permissions_obj_array
				from  	medserviceprovider mp
				join medserviceprovidertype mpt on mpt.pk_medserviceprovidertype_id = mp.fk_medserviceprovidertype_id
				where	mp.fk_user_id =",10335
Application.models.NewPatient.getAssignRegFormSetting( ) -> roleQuery,"				select	mspt.pk_medserviceprovidertype_id
				from	medserviceprovider msp
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = msp.fk_medserviceprovidertype_id
					and mspt.providertype = 'Do Not Assign Patient Registration Form'
				where	msp.fk_user_id =",10225
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""internalid"" = $1
							and
							""fk_user_id"" = $2
							and
						account_status in (1,3) AND  security = 1
						AND
					1 =",10061
Application.Toolbelt.getRegionDomainInfo( ) -> getCompanyDomain,"	                select  local_domain,
							email_from_domain,
							email_from_display
	                from    companies
	                where   pk_company_id =",9728
Application.models.FormsLibrary.processSurvey( ) -> insertQuestion,"											select	* 
											from",9593
Application.models.Analytics.complianceChart( ) -> reportQuery,"				select 	uscs.fk_completion_status_id,
						ut.pk_user_todo_id,
						cast(ut.active_start_date as date) as active_start_date,
						case
							when ut.active_end_date is null
							then cast(now() as date)
							else cast(ut.active_end_date as date)
						end as active_end_date
				from 	users u
				join user_todos ut on ut.fk_user_id = u.pk_user_id 
					and ut.active_start_date is not null
					and ut.active_end_date is not null
					and ut.active = true
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
				join todos t on t.pk_todo_id = ut.fk_todo_id
				join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
					and sa.patient_edit = true
				join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				where	u.fk_company_id = $3
				and 	u.security = 1
				and		u.account_status = 1
				and 	u.is_test_user = false
					and u.pk_user_id = $4 
				order by",9580
Application.models.SurveyUser.getBaseInstanceIdsBySurveyResourceIds( ) -> surveyUserQuery,"				select	max(""pk_SurveyUser_ID"") as survey_user_id,
						""fk_Resource_ID""
				from	""SurveyUser""
				where	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2)
				and		revision_type = 'new'
				group by",9468
patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"				select	
							uscs.fk_user_id,
							uscs.fk_completion_status_id as status_id,
							uscs.fk_surveyuser_id,
							cs.status,
							ut.name as user_todo_name,
							ut.pk_user_todo_id as user_todo_id,
							to_char(ut.active_start_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_start_date,
							to_char(ut.active_end_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_end_date,
							ut.active_start_date at time zone c.time_zone_location as active_start_date_ts,
							ut.display_position,
							ut.fk_patient_portal_template_id,
							ut.active,
							ppt.name as template_name,
							ppt.share_template,
							t.name as todo_name,
							t.pk_todo_id as todo_id,
							t.fk_company_id as company_id,
							t.fk_resource_id as resource_id,
							ut.assigned_date at time zone c.time_zone_location,
							case
								when uscs.fk_completion_status_id = 3
								then uscs.date_modified
								else NULL
							end as date_completed,
							dense_rank() over (partition by ut.fk_user_id, ut.fk_todo_id
												order by ut.assigned_date, ut.pk_user_todo_id)
								as similar_todo_rank,
							count(*) over (partition by ut.fk_user_id, ut.fk_todo_id)
								as similar_todo_count
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
						and sa.patient_edit = true
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and (ut.active is true or uscs.fk_completion_status_id > 1)
				order by t.name, 
						ut.active",9428
patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"				select	ut.pk_user_todo_id 
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
						and sa.patient_edit = true
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and cast(ut.active_start_date as date) <= $4 
						and (
								cast(ut.active_end_date	as date) + interval '1 day'	> $5 
								or ut.active_end_date is null
							)
						and ut.active = true
				order by t.name, 
						ut.active",9428
Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> [delete],"					delete	from tempsurveyfixindex
					where	pk_tempsurveyfixindex_id =",9384
Application.App.save( ) -> save,"
					UPDATE ""survey_user_drafts""
					SET ""user_id_self"" =
									$1,
									""creator_id"" =
									$2,
									""resource_id"" =
									$3,
									""json_serialized_form"" =
									$4,
									""is_archived"" =
									$5,
									""is_private"" =
									$6,
									""created_at"" =
									$7,
									""updated_at"" =
									$8,
									""location_hash"" =
									$9,
									""history"" =
									$10,
									""fk_user_todo_id"" =
									$11
					WHERE ""id"" =",9380
Application.App.findBy_( ) -> instances,"
				select
					""id"",""user_id_self"",""creator_id"",""resource_id"",""json_serialized_form"",""is_archived"",""is_private"",""creator_notes"",""created_at"",""updated_at"",""location_hash"",""visit"",""history"",""fk_user_todo_id"",""fk_survey_tag_resource_id"" 
				from ""survey_user_drafts"" 
				where
							""id"" = $1
							and
					1 =",9349
Application.models.UserActivityLog.getActivityLog( ) -> userQuery,"				select	u.fname as user_fname,
						u.lname as user_lname,
						u.import,
						u.datecreated,
						u.created_by,
						u2.fname as creator_fname,
						u2.lname as creator_lname
				from	users u
				left outer join users u2 on u2.pk_user_id = u.created_by
				where	u.pk_user_id =",9284
Application.models.UserActivityLog.getActivityLog( ) -> arcQuery,"				select 	u.datecreated,
						u.fname,
						u.lname,
						u.internalid
				from	account_merge_logs aml
				join users u on u.pk_user_id = any (aml.input_user_ids)
				where	aml.output_user_ids =",9284
Application.models.UserActivityLog.getActivityLog( ) -> loginQuery,"				select	ul.ts as datecreated,
						ul.fk_login_mode_id,
						lm.login_mode_name,
						u.lname,
						u.fname
				from	userslog ul
				left outer join users u on u.pk_user_id = ul.kiosk_fk_user_id
				left outer join login_mode lm on lm.pk_login_mode_id = ul.fk_login_mode_id
				where	ul.fk_users_id = $1
				and		ul.action = 1
				order by",9284
Application.models.UserActivityLog.getActivityLog( ) -> loginCardQuery,"				select	create_date as datecreated,
						actor
				from	login_card_sent_log
				where	fk_user_id =",9284
Application.models.UserActivityLog.getActivityLog( ) -> passwordChangeQuery,"				select	pcl.datecreated,
						pcl.fk_actor_user_id,
						pct.change_type_name,
						u.fname,
						u.lname
				from	password_change_log pcl
				join password_change_type pct on pct.pk_password_change_type_id = pcl.fk_password_change_type_id
				left outer join users u on u.pk_user_id = pcl.fk_actor_user_id
				where	pcl.fk_user_id =",9284
Application.models.UserActivityLog.getActivityLog( ) -> auditQuery,"				select	aa.pk_audit_action_id,
						aa.action,
						ap.med_team_fk_user_id,
						ap.datecreated,
						u.fname,
						u.lname,
						u.login
				from	audit_patient ap
				join audit_action aa on aa.pk_audit_action_id = ap.fk_audit_action_id
				left outer join users u on u.pk_user_id = ap.med_team_fk_user_id
				where	ap.fk_user_id = $1
				and		ap.fk_audit_action_id in",9284
patient.portal.model.surveys.SurveyGateway.getTemplateByCompany( ) -> staQuery,"				select	st.pk_survey_template_id,
						sta.pk_survey_template_access_id
				from 	survey_templates_access sta
				join survey_templates st on sta.fk_survey_template_id = st.pk_survey_template_id
					and	st.fk_survey_template_type_id = $1 
				where 	sta.fk_resource_id = $2 
				and		sta.fk_company_id = $3 
				and		sta.fk_user_id is null
				order by sta.pk_survey_template_access_id desc
				limit",9181
patient.portal.model.surveys.SurveyDAO.read( ) -> todosQuery,"				select	*
				from 	todos
				where 	fk_resource_id 	=",9136
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_patient_list
				where	fk_company_id =",9048
Application.models.Kiosk.getExitSettings( ) -> companyKioskQuery,"				select	kiosk_exit_url,
						kiosk_exit_label
				from	content
				where	fk_company_id = $1
				and		site_fk_user_id is null
				and		fk_content_category_id =",8984
Application.models.Kiosk.getKioskSettings( ) -> settingsQuery,"				select	kiosk_mode_allow_app,
						kiosk_mode_allow_forms_cascading,
						kiosk_mode_allow_forms_in_progress,
						fast_track_allow_app,
						fast_track_allow_sms,
						fast_track_allow_forms_cascading,
						fast_track_allow_forms_in_progress,
						fast_track_authentication,
						fast_track_calendar_template_show,
						video_allow_app,
						video_allow_sms
				from	company_config
				where	fk_company_id =",8984
Application.models.Kiosk.getExitSettings( ) -> companyFastTrackQuery,"				select	fasttrack_exit_url,
						fasttrack_exit_label
				from	content
				where	fk_company_id = $1
				and		site_fk_user_id is null
				and		fk_content_category_id =",8984
Application.models.Kiosk.getKioskSettings( ) -> smsQuery,"				select	sms_allow
				from	settings_apps
				where	fk_company_id =",8984
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $1
							and
							""sudo_as_fk_user_id"" = $2
							and
							""internalid"" = $3
							and
					1 =",8747
Application.models.FhirForm.getTemplateContent( ) -> templateQuery,"				select	st.template_inner_html,
						st.header_version
				from	survey_templates_access sta
				join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				where	sta.fk_company_id = $1
				and		sta.fk_resource_id =",8668
patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"				select	
							uscs.fk_user_id,
							uscs.fk_completion_status_id as status_id,
							uscs.fk_surveyuser_id,
							cs.status,
							ut.name as user_todo_name,
							ut.pk_user_todo_id as user_todo_id,
							to_char(ut.active_start_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_start_date,
							to_char(ut.active_end_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_end_date,
							ut.active_start_date at time zone c.time_zone_location as active_start_date_ts,
							ut.display_position,
							ut.fk_patient_portal_template_id,
							ut.active,
							ppt.name as template_name,
							ppt.share_template,
							t.name as todo_name,
							t.pk_todo_id as todo_id,
							t.fk_company_id as company_id,
							t.fk_resource_id as resource_id,
							ut.assigned_date at time zone c.time_zone_location,
							case
								when uscs.fk_completion_status_id = 3
								then uscs.date_modified
								else NULL
							end as date_completed,
							dense_rank() over (partition by ut.fk_user_id, ut.fk_todo_id
												order by ut.assigned_date, ut.pk_user_todo_id)
								as similar_todo_rank,
							count(*) over (partition by ut.fk_user_id, ut.fk_todo_id)
								as similar_todo_count
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
						and sa.patient_edit = true
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and cast(ut.active_start_date as date) <= $4 
						and (
								cast(ut.active_end_date	as date) + interval '1 day'	> $5 
								or ut.active_end_date is null
							)
						and ut.active = true
				order by t.name, 
						ut.active",8635
Application.models.User.getSudoUserId( ) -> userQuery,"					select 	sudo_as_fk_user_id
					from 	users
					where 	pk_user_id =",8584
Application.models.Settings.getMessagingStatus( ) -> checkMessagingRoles,"				select 	count(*) thecount
				from 	medserviceprovider msp
				join message_post_type_company_role mptcr on mptcr.fk_company_id = $1
					and (mptcr.fk_medserviceprovidertype_id = msp.fk_medserviceprovidertype_id or mptcr.medside_recipient_type_id = 2)
				where	msp.fk_user_id =",8584
Application.models.ContentManager.getCategoryQuery( ) -> categoryQuery,"				select	pk_content_category_id,
						fk_context_id,
						name,
						has_subject,
						show_logo_option,
						show_footer_option,
						use_plain_text,
						preview_height,
						preview_width,
						show_portal_display_option,
						show_opt_out_option,
						show_site_selector,
						show_kiosk_exit_url,
						show_fasttrack_exit_url,
						use_default_content
				from	content_category
					where	pk_content_category_id = $1 
				order by",8367
Application.lib.FileUtil.getVtocUserByFmUserId( ) -> userQuery,"				select	u.pk_user_id,
						u.fk_company_id,
						u.fname,
						u.lname,
						u.email,
						u.internalid,
	                    u.security
				from	""fileManagerUser"" fmu
				join users u on u.pk_user_id = fmu.""fk_VT_ID""
				where	fmu.""pk_fileManagerUser_ID"" =",8310
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
							, reminders_send_time::time as reminders_send_time2
				from	settings_apps
				where	fk_company_id =",8229
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_self_reg
				where	fk_company_id =",8198
Application.models.Settings.getDefaultTemplate( ) -> templateQuery,"				select	pk_patient_portal_template_id
				from	patient_portal_templates
				where	fk_company_id = $1
				and		default_template =",8197
Application.models.Role.getCompanyRoleIds( ) -> companyRolesQuery,"				select	ctr.fk_medserviceprovidertype_id
				from	companies_to_roles ctr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = ctr.fk_medserviceprovidertype_id
					and mspt.is_active = true
				where	ctr.fk_company_id =",7797
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_form_header
				where	fk_company_id =",7793
Application.models.User.getIsSiteUser( ) -> userQuery,"				select	u.is_site_user,
						u.sudo_as_fk_user_id,
						u2.is_site_user as sudo_is_site_user
				from	users u
				left outer join users u2 on u2.pk_user_id = u.sudo_as_fk_user_id
				where	u.pk_user_id = $1
				and		u.security >",7793
Application.models.Survey.getUserTodoName( ) -> surveyNameQuery,"				select	name
				from	user_todos
				where	pk_user_todo_id =",7638
Application.App.findBy_( ) -> instances,"
				select
					""id"",""user_id_self"",""creator_id"",""resource_id"",""json_serialized_form"",""is_archived"",""is_private"",""creator_notes"",""created_at"",""updated_at"",""location_hash"",""visit"",""history"",""fk_user_todo_id"",""fk_survey_tag_resource_id"" 
				from ""survey_user_drafts"" 
				where
							""user_id_self"" = $1
							and
							""creator_id"" = $2
							and
							""resource_id"" = $3
							and
							""fk_user_todo_id"" = $4
							and
							""is_archived"" = $5
							and
					1 = 1
					order by updated_at",7582
Application.models.ContentManager.getOptOutArray( ) -> optOutQuery,"				select	fk_user_id
				from	content_opt_out
				where	fk_content_id =",7194
Application.models.ContentManager.getContent( ) -> siteQuery,"					select	lname
					from	users
					where	is_site_user = true
						and pk_user_id =",7146
Application.models.ContentManager.getContent( ) -> companyQuery,"					select	name,
							companyphone
					from	companies
					where	pk_company_id =",7146
Application.models.User.getUser( ) -> userQuery,"				select	fname,lname 
				from	users
				where	pk_user_id =",7118
patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"				select	
							uscs.fk_user_id,
							uscs.fk_completion_status_id as status_id,
							uscs.fk_surveyuser_id,
							cs.status,
							ut.name as user_todo_name,
							ut.pk_user_todo_id as user_todo_id,
							to_char(ut.active_start_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_start_date,
							to_char(ut.active_end_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_end_date,
							ut.active_start_date at time zone c.time_zone_location as active_start_date_ts,
							ut.display_position,
							ut.fk_patient_portal_template_id,
							ut.active,
							ppt.name as template_name,
							ppt.share_template,
							t.name as todo_name,
							t.pk_todo_id as todo_id,
							t.fk_company_id as company_id,
							t.fk_resource_id as resource_id,
							ut.assigned_date at time zone c.time_zone_location,
							case
								when uscs.fk_completion_status_id = 3
								then uscs.date_modified
								else NULL
							end as date_completed,
							dense_rank() over (partition by ut.fk_user_id, ut.fk_todo_id
												order by ut.assigned_date, ut.pk_user_todo_id)
								as similar_todo_rank,
							count(*) over (partition by ut.fk_user_id, ut.fk_todo_id)
								as similar_todo_count
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
						and sa.patient_edit = true
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and cast(ut.active_start_date as date) <= $4 
				order by t.name, 
						ut.active",7020
Application.helpers.SessionHelper.auditMedTeam( ) -> [insert],"				insert into audit_med_team
						(med_team_fk_user_id,
						fk_audit_action_id
							, patient_fk_user_id
							, notes
							, session_id
						)
				values	($1,
						$2 
							, $3 
							, $4 
							, $5",7003
Application.models.Role.getEAuthQuery( ) -> eAuthQuery,"				select
						u.pk_user_id,
						u.fname,
						u.lname,
						u.account_status,
						u.name_suffix,
						u.e_auth,
						u.sudo_as_fk_user_id,
						u.name_suffix,
						msp.fk_medserviceprovidertype_id as role_id,
						institution_no,
						u.login
				from 	users as u
					join medserviceprovider as msp on u.pk_user_id = msp.fk_user_id
						and msp.fk_medserviceprovidertype_id = $1 
				where	u.fk_company_id = $2
				and 	u.security > 1
				order by lower(u.lname)",6871
Application.models.TemplateTranslator.translateDummy( ) -> getSiteUser,"							select	u2.pk_user_id
							from	users u
							join users u2 on u2.pk_user_id = u.fk_user_id and u2.is_site_user
							where	u.pk_user_id =",6871
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_survey_docs
				where	fk_company_id =",6463
patient.portal.model.surveys.TemplateDAO.read( ) -> surveyTemplatesQuery,"				select	pk_survey_template_id,
						fk_survey_template_type_id,
						fk_company_id,
						fk_user_id,
						template_inner_html,
						header_version,
						template_name,
						ts_updated
				from 	survey_templates
				where 	pk_survey_template_id =",6428
Application.models.Kiosk.getExitSettings( ) -> siteUserQuery,"					select	u2.pk_user_id as physician_user_id,
							u2.is_site_user as physician_is_site_user,
							u3.pk_user_id as sudo_user_id,
							u3.is_site_user as sudo_is_site_user
					from	users u
					join users u2 on u2.pk_user_id = u.fk_user_id
					left outer join users u3 on u3.pk_user_id = u2.sudo_as_fk_user_id
					where	u.pk_user_id =",6408
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_new_patient
				where	fk_company_id =",6340
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_patient_download
				where	fk_company_id =",6327
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_patient_info
				where	fk_company_id =",6316
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_perform_actions_tab
				where	fk_company_id =",6316
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_patient_filter
				where	fk_company_id =",6316
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_med_team_homepage
				where	fk_company_id =",6316
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_med_team_navigation
				where	fk_company_id =",6316
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_overview_tab
				where	fk_company_id =",6316
Application.models.Settings.getSettings( ) -> settingsQuery,"				select	*
				from	settings_analytics
				where	fk_company_id =",6316
Application.models.Settings.getPatientFilterEauth( ) -> filterQuery,"				select	fk_resource_id,
						fk_option_id,
						filter_label,
						eauth_type,
						use_user_id
				from	settings_patient_filter_eauth
				where	fk_company_id = $1
				order by",6316
Application.helpers.EmailHelper.logEmail( ) -> [insert],				insert into,6295
Application.lib.scheduled_scripts.Task.endJob( ) -> [update],"					update	process_times
					set		process_time = now(),
							succeeded_count = $1,
							failed_count = $2,
							process_completed = true
					where	pk_process_time_id =",6283
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select 	lname 
					from	users 
					where 	pk_user_id =",6275
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select 	fname 
					from	users 
					where 	pk_user_id =",6275
Application.models.SurveyUser.create( ) -> physicianQuery,"				select	u2.pk_user_id,
						u2.internalid
				from	users u
				join users u2 on u2.pk_user_id = u.fk_user_id
				where 	u.pk_user_id =",6160
Application.models.SurveyUser.create( ) -> originalSurveyUserQuery,"					select 	""pk_SurveyUser_ID"",
							completion_seconds
					from	""SurveyUser""
					where 	""pk_SurveyUser_ID"" =",6160
Application.models.SurveyUser.create( ) -> [insert],						insert into,6159
Application.models.ContentManager.getContentQuery( ) -> contentQuery,"				select	c.pk_content_id,
						c.fk_company_id,
						c.content,
						c.subject,
						c.kiosk_exit_label,
						c.kiosk_exit_url,
						c.fasttrack_exit_label,
						c.fasttrack_exit_url,
						c.is_active,
						c.include_logo,
						c.include_footer
				from	content c
					left outer join content_opt_out coo on coo.fk_content_id = c.pk_content_id
						and coo.fk_user_id = $1 
				where	c.fk_company_id = $2
				and		c.fk_content_category_id = $3 
					and c.site_fk_user_id = $4 
					and c.is_active = true
					and coo.pk_content_opt_out_id is",6042
Application.models.ContentManager.getContentQuery( ) -> contentQuery,"					select	c.pk_content_id,
							c.fk_company_id,
							c.content,
							c.subject,
							c.kiosk_exit_label,
							c.kiosk_exit_url,
							c.fasttrack_exit_label,
							c.fasttrack_exit_url,
							c.is_active,
							c.include_logo,
							c.include_footer
					from	content c
						left outer join content_opt_out coo on coo.fk_content_id = c.pk_content_id
							and coo.fk_user_id = $1 
					where	c.fk_company_id = $2
					and		c.fk_content_category_id = $3
					and 	c.site_fk_user_id is null
						and c.is_active = true
						and coo.pk_content_opt_out_id is",5976
Application.models.PatientPortalTemplate.savePatientForms( ) -> [update],"						update	user_todos
						set		name = $1,
								active_start_date = $2,
								active_end_date = $3,
								display_position = $4,
								modified_by_fk_user_id = $5,
								modified_at = now()
						where	pk_user_todo_id =",5940
Application.App.findBy_( ) -> instances,"
				select
					pk_user_id, fk_user_id, fk_company_id 
				from ""users"" 
				where
							""pk_user_id"" = $1
							and
						 security = 1
						AND
					1 =",5887
Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> [delete],"					delete	from tempsurveyfixindex
					where	pk_tempsurveyfixindex_id =",5686
Application.App.setPrimaryKeyList( ) -> qPrimaryKeys,"
					SELECT	column_name
					FROM 	information_schema.table_constraints a
							,information_schema.key_column_usage b
					WHERE 	a.table_name = b.table_name
					AND 	a.constraint_name = b.constraint_name
					AND 	a.constraint_type = 'PRIMARY KEY'
					AND 	a.table_name =",5683
Application.models.PatientPortalTemplate.savePatientForms( ) -> todoQuery,"						select	fk_resource_id
						from	todos
						where	pk_todo_id =",5595
Application.models.Settings.getMessagingCompanyConfig( ) -> messagingConfigQuery,"				select 	patientside_messaging,
						medside_messaging,
						patientside_compose,
						medside_compose,
						messaging_forwarding,
						is_site_based,
						show_messaging_on_open_medside,
						show_all_post_types,
						include_link_in_email
				from 	message_company_config2
				where 	fk_company_id =",5583
Application.models.Kiosk.getExitSettings( ) -> userQuery,"					select	security,
							is_site_user
					from	users
					where	pk_user_id =",5561
Application.models.PatientPortalTemplate.savePatientForms( ) -> insertUserTodo,"						insert	into user_todos
								(fk_user_id,
								fk_todo_id,
								fk_patient_portal_template_id,
								fk_user_todo_status_id,
								assigned_by_fk_user_id,
								modified_by_fk_user_id,
								active,
								active_start_date,
								active_end_date,
								display_position,
								name)
						values	($1,
								$2,
								$3,
								1,
								$4,
								$5,
								true,
								$6,
								$7,
								$8,
								$9)
						returning",5523
Application.models.SurveyTypes.MosaiqHl7SurveyExport.logMessage( ) -> [insert],					insert into,5427
patient.portal.model.surveys.SurveyGateway.getLastTaken( ) -> surveyUserQuery,"				select	""pk_SurveyUser_ID"", 
						""DateAdded"" as DateCompleted
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1 
				and		""fk_Resource_ID"" = $2
				order by ""DateAdded"" desc
				limit",5290
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""pk_user_id"" = $1
							and
					1 =",5283
Application.models.Patient.getGenderArray( ) -> settingsQuery,"				select	gender_override
				from	settings_new_patient
				where	fk_company_id =",5260
Application.models.User.getSitesQuery( ) -> sitesQuery,"				select	u.pk_user_id,
						u.lname
				from	users u
					join users u2 on u2.fk_user_id = u.pk_user_id
						and u2.account_status = 1
						and u2.security = 1
				where	u.fk_company_id = $1
				and		u.account_status = 1
				and		u.security > 1
				and		u.lname is not null
				and		u.lname <> ''
				and 	u.is_site_user = true
				group by u.pk_user_id,
						u.lname
				order by",5124
Application.models.User.isUserSelfRegEnabled( ) -> userQuery,"				select	allow_self_reg
				from 	users
				where	pk_user_id = $1
				and		security >=",5112
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select 	internalid 
					from	users 
					where 	pk_user_id =",5013
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fname"" =
									$2,
									""lname"" =
									$3,
									""datecreated"" =
									$4,
									""dateupdated"" =
									$5,
									""active"" =
									$6,
									""internalid"" =
									$7,
									""sudo_as_fk_user_id"" =
									$8,
									""agreedtotermsandconditions"" =
									$9,
									""security"" =
									$10,
									""allow_self_reg"" =
									$11,
									""self_reg_capable"" =
									$12,
									""show_all_templates"" =
									$13,
									""account_status"" =
									$14,
									""is_test_user"" =
									$15,
									""identity_validated"" =
									$16,
									""is_site_user"" =
									$17,
									""may_receive_sms_notifications"" =
									$18,
									""is_deceased"" =
									$19,
									""is_default_user"" =
									$20,
									""is_alert_sender"" =
									$21,
									""reg_form_create"" =
									$22
					WHERE ""pk_user_id"" =",4935
Application.models.Survey.reparseSurvey( ) -> [insert],								insert into,4855
Application.models.Messaging.postMessage( ) -> [insert],"							insert 	into message_thread_users
									(fk_message_thread_id,
									fk_message_thread_state,
									fk_user_id)
							values",4853
Application.models.Company.getCompany( ) -> companyQuery,"				select	custom_clinical_forms 
				from	companies
				where	pk_company_id =",4812
Application.models.Survey.getSurveyQuestionsAndOptions( ) -> questionsQuery,"					WITH schema_result as (
						select	survey_id,question_id,question_language,question_label,question_label as label,option_id,option_language,question_tags
						from 	resource_survey_by_survey_id($1::bigint)
					)
	                select	survey_id,question_id,question_language,label,option_id,option_language,question_tags
	                from 	schema_result
						order by option_id",4623
Application.models.Settings.setUseFormCache( ) -> [update],"				update	survey_access
				set		use_cache = $1
				where	fk_company_id = $2
				and		fk_resource_id =",4570
Application.models.PatientPortalTemplate.savePatientForms( ) -> [insert],"						insert	into user_survey_completion_statuses
								(fk_resource_id,
								fk_user_id,
								fk_completion_status_id,
								fk_user_todo_id,
								fk_login_mode_id)
						values	($1,
								$2,
								1,
								$3,
								$4",4553
/physician/patientlookup.cfm -> privacyStatementQuery,"		select	agreedtotermsandconditions
		from	users
		where	pk_user_id = $1
		and		agreedtotermsandconditions =",4503
Application.models.ContentManager.getContentQuery( ) -> contentQuery,"				select	c.pk_content_id,
						c.fk_company_id,
						c.content,
						c.subject,
						c.kiosk_exit_label,
						c.kiosk_exit_url,
						c.fasttrack_exit_label,
						c.fasttrack_exit_url,
						c.is_active,
						c.include_logo,
						c.include_footer
				from	content c
				where	c.fk_company_id = $1
				and		c.fk_content_category_id = $2 
					and c.site_fk_user_id is null
					and c.is_active =",4502
/physician/patientlookup.cfm -> emailQuery,"		select	email
		from	users
		where	pk_user_id =",4470
/include/templates/_surveyRedesigned.cfm -> userTodoQuery,"			select	fk_user_id
			from	user_todos
			where	pk_user_todo_id =",4430
/include/templates/_surveyRedesigned.cfm -> userTodoQuery,"			select	t.fk_resource_id,
					ut.fk_user_id
			from	user_todos ut
			join	todos t on t.pk_todo_id = ut.fk_todo_id
			where	ut.pk_user_todo_id =",4430
Application.models.Kiosk.getExitSettings( ) -> siteFastTrackQuery,"					select	fasttrack_exit_url,
							fasttrack_exit_label
					from	content
					where	fk_company_id = $1
					and		site_fk_user_id = $2
					and		fk_content_category_id =",4427
Application.models.Kiosk.getExitSettings( ) -> siteKioskQuery,"					select	kiosk_exit_url,
							kiosk_exit_label
					from	content
					where	fk_company_id = $1
					and		site_fk_user_id = $2
					and		fk_content_category_id =",4427
/physician/patientlookup.cfm -> photoQuery,"			select	pk_picture_id,
					caption
			from	users_pictures
			where	fk_user_id = $1
			and		active =",4391
/include/templates/_surveyRedesigned.cfm -> originalSurveyUserQuery,"			select fk_surveyuser_id
			from	user_survey_completion_statuses
			where	fk_user_todo_id =",4371
Application.models.FormDataExportSetup.saveQuestions( ) -> [insert],"							insert	into survey_export_parsed_answers
									(fk_company_id,
									fk_resource_id,
									option_id,
									answer_value,
									answer_text,
									custom_value)
							values	($1,
									$2,
									$3,
									$4,
									$5,
									$6",4347
Application.models.Role.getCompanyRoleIds( ) -> messagingRolesQuery,"				select	distinct mptcr.fk_medserviceprovidertype_id
				from	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
					and mspt.is_active = true
				where	mptcr.fk_company_id = $1
				and		mptcr.show_in_compose_actions = true
					and mptcr.fk_medserviceprovidertype_id not in",4307
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fk_user_id"" =
									$2,
									""fname"" =
									$3,
									""lname"" =
									$4,
									""phone"" =
									$5,
									""datecreated"" =
									$6,
									""dateupdated"" =
									$7,
									""active"" =
									$8,
									""password"" =
									$9,
									""dob"" =
									$10,
									""internalid"" =
									$11,
									""reminderemail"" =
									$12,
									""mayreceiveemailreminders"" =
									$13,
									""agreedtotermsandconditions"" =
									$14,
									""security"" =
									$15,
									""allow_self_reg"" =
									$16,
									""self_reg_capable"" =
									$17,
									""show_all_templates"" =
									$18,
									""import"" =
									$19,
									""gender"" =
									$20,
									""account_status"" =
									$21,
									""is_test_user"" =
									$22,
									""identity_validated"" =
									$23,
									""is_site_user"" =
									$24,
									""may_receive_sms_notifications"" =
									$25,
									""is_deceased"" =
									$26,
									""is_default_user"" =
									$27,
									""is_alert_sender"" =
									$28,
									""reg_form_create"" =
									$29
					WHERE ""pk_user_id"" =",4146
Application.models.ClinicalFormsSetup.getInstanceConfigArray( ) -> configQuery,"				select	pk_form_instance_config_id,
						header,
						option_id,
						is_instance_count,
						is_date_created,
						is_date_updated
				from	form_instance_config
				where	fk_company_id = $1
				and		fk_resource_id = $2
				order by",4145
patient.portal.model.rules.RuleDataService.getRuleByCompanyAndSurvey( ) -> ruleQuery,"				select	fk_company_id,
						fk_resource_id,
						physician_read,
						physician_edit,
						patient_read,
						patient_edit,
						site_read,
						site_edit
				from	survey_access
				where	fk_company_id = $1
				AND		fk_resource_id =",4144
Application.models.SurveyUserDraft.getSurveyDraftsByTag( ) -> draftsQuery,"				select	sud.id, 
						u.fname as creator_fname, 
						u.lname as creator_lname,
						sud.created_at,
						sud.updated_at
				from	survey_user_drafts sud
				join users u on u.pk_user_id = sud.creator_id
				where	sud.user_id_self = $1
				and		sud.resource_id = $2
				and 	(sud.fk_survey_tag_resource_id = $3 
							OR sud.fk_survey_tag_resource_id is null OR sud.fk_survey_tag_resource_id = 0
						)
				and		sud.is_archived = false
				order by sud.updated_at",4124
Application.models.Login.getMedTeamQuery( ) -> ipRestrictionsQuery,"					select	pk_company_id
					from	companies c
					where	pk_company_id = $1
					and		((restrict_by_ip 
							and (($2::inet <<= Any (c.ip_address_allow))
								or ($3::inet <<= Any ('{""10.70.0.0/16"", ""209.216.251.98""}'::inet[]))))
							or (not",4122
Application.models.Survey.getSurveyTagName( ) -> surveyNameQuery,"				select	resource_label
				from	survey_tag_resource
					where	pk_survey_tag_resource_id =",4074
Application.models.SurveyUser.getHeaderVersion( ) -> headerVersionQuery,"				select	st.header_version as header_version
				from 	survey_templates_access sta
				join survey_templates st on sta.fk_survey_template_id = st.pk_survey_template_id
					and st.fk_survey_template_type_id = 2
				where 	sta.fk_resource_id = $1
				and 	sta.fk_company_id =",3988
Application.models.SurveyUser.getSurveyTypes( ) -> surveyTypesQuery,"				select	st.pk_survey_type_id,
						st.survey_type_name
				from	survey_types_to_surveys stts
				join	survey_types st on st.pk_survey_type_id = stts.fk_survey_type_id
				where	stts.fk_resource_id = $1
				order by",3858
Application.models.ClinicalForm.getCompleteClinicalSurvey( ) -> visitQuery,"					select	visit
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" =",3747
Application.models.Kiosk.getPatientQuery( ) -> patientQuery,"				select	u.pk_user_id,
						u.email,
						u.mobile_phone,
						u.fk_user_id,
						u.fk_company_id,
						u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
						u2.is_site_user as belongs_to_site
				from	users u
				join users u2 on u2.pk_user_id = u.fk_user_id
				where	u.pk_user_id = $1
				and		u.account_status = 1
				and		u.security =",3678
Application.models.SurveyUser.checkSurveyTypeAccess( ) -> checkRestrictionsQuery,"				select 	count(*) as thecount
				from	survey_type_to_company
				where	fk_survey_type_id =",3540
Application.models.SessionInfo.setSessionInfo( ) -> [insert],				insert	into,3531
Application.models.Role.getCompanyRoleIds( ) -> messagingRolesQuery,"				select	distinct mptcr.fk_medserviceprovidertype_id
				from	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
					and mspt.is_active = true
				where	mptcr.fk_company_id = $1
				and		mptcr.show_in_compose_actions =",3490
Application.models.Settings.getMessagingStatus( ) -> checkForwardingRole,"					select 	count(*) as thecount
					from	medserviceprovider
					where	fk_user_id = $1
					and		fk_medserviceprovidertype_id =",3464
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscMelbourneMain') and fk_company_id = 10
						AND
					1 =",3384
Application.App.findBy_( ) -> instances,"
				select
					id, json_serialized_form, updated_at, location_hash 
				from ""survey_user_drafts"" 
				where
							""user_id_self"" = $1
							and
							""creator_id"" = $2
							and
							""resource_id"" = $3
							and
							""fk_user_todo_id"" = $4
							and
							""is_archived"" = $5
							and
					1 = 1
					order by updated_at",3324
Application.models.Settings.getMessagingStatus( ) -> checkViewAllMessagesRole,"						select	count(*) as thecount
						from	users u
						join medserviceprovider m on (m.fk_user_id = u.pk_user_id OR m.fk_user_id = u.sudo_as_fk_user_id)
							and m.fk_medserviceprovidertype_id = 192
						where	u.pk_user_id =",3317
Application.models.SurveyUser.updateInPlace( ) -> responseQuery,"					select  res_value.""pk_Resource_ID"" as response_id
					from 	""Resource"" as res_value
					join ""Resource"" as object_value_row on res_value.""fk_SurveyUser_ID"" = $1
						and res_value.""Subject_fk_Schema_ID"" = 134
						and object_value_row.""fk_SurveyUser_ID"" = $2
						and object_value_row.""Subject_fk_Schema_ID"" = 133
						and res_value.""Object_fk_Resource_ID"" = object_value_row.""Object_fk_Resource_ID""
					where 	object_value_row.""Predicate_V1_Value_fk_Resource_ID"" = ",3306
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select	st.named_interval
					from 	survey_company sc
					join survey_timepoints st on st.survey_id = sc.survey_id
					join surveys s on s.id = sc.survey_id
					join survey_timepoint_survey_schema stss on stss.survey_timepoint_id = st.id
					join survey_schemas ss on ss.id = stss.survey_schema_id
						and ss.survey_resource_id = $1
					where	sc.company_id =",3291
Application.models.FileManager.getDownloadActivityByUser( ) -> queueQuery,"				select	fdq.pk_file_download_queue_id,
						fdq.fk_app_id,
						fdq.session_token,
						fdq.file_name,
						fdq.file_uuid,
						fdq.date_created,
						fdq.date_processing_end,
						fdq.date_downloaded,
						fdq.error_occurred,
						si.session_info_json,
						u.fk_company_id
				from	file_download_queue fdq
				join session_info si on si.session_token = fdq.session_token
				join users u on u.pk_user_id = fdq.fk_user_id
				where	fdq.fk_user_id = $1
				and		fdq.fk_app_id = $2 
					and	fdq.date_created > date(now() - '2 days'::interval)
				order by fdq.pk_file_download_queue_id",3288
Application.models.SurveyUser.updateInPlace( ) -> [update],"						update	""Resource""
						set 	""Predicate_V1_Value"" = $1
						where 	""pk_Resource_ID"" =",3262
Application.models.Kiosk.getFastTrackLinkExpiration( ) -> companyConfigQuery,"				select	fast_track_expiration_days
				from	company_config
				where	fk_company_id =",3259
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscTucson') and fk_company_id = 10
						AND
					1 =",3192
patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"				select	ut.pk_user_todo_id 
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
					and uscs.fk_completion_status_id <= 2
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
						and sa.patient_edit = true
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and cast(ut.active_start_date as date) <= $4 
						and (
								cast(ut.active_end_date	as date) + interval '1 day'	> $5 
								or ut.active_end_date is null
							)
						and ut.active = true
				order by t.name, 
						ut.active",3182
Application.models.Messaging.getThreadUsersForList( ) -> usersQuery,"				select 	mt.patient_id,
						mt.physician_id,
						mt.from_id,
						mt.to_id,
						mtu.fk_message_thread_state,
						mtu.date_created + interval '2 hours' as date_created,
						u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.internalid,
						u.security
				from 	message_thread2 mt
				join message_thread_users mtu on mtu.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1
				where 	mt.pk_message_thread_id =",3134
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscPhoenix') and fk_company_id = 10
						AND
					1 =",3084
Application.models.SurveyUser.create( ) -> previousSurveyUserQuery,"						select 	""pk_SurveyUser_ID"",
								completion_seconds,
								completion_seconds_total
						from	""SurveyUser""
						where 	revision_fk_surveyuser_id = $1
						order by ""pk_SurveyUser_ID"" desc
						limit",3067
Application.lib.scheduled_scripts.TaskSmartReminders.writeToLog( ) -> [insert],				insert into,2990
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"						select	s.title
						from 	survey_company sc
						join survey_timepoints st on st.survey_id = sc.survey_id
						join surveys s on s.id = sc.survey_id
						join survey_timepoint_survey_schema stss on stss.survey_timepoint_id = st.id
						join survey_schemas ss on ss.id = stss.survey_schema_id
							and ss.survey_resource_id = $1
						where 	sc.company_id =",2823
Application.models.FormDataExportSetup.saveQuestions( ) -> [insert],						insert into,2818
Application.models.FormDataExportSetup.saveQuestions( ) -> [delete],"						delete 	from survey_export_parsed_answers
						where	fk_company_id = $1
						and		fk_resource_id = $2
						and		option_id =",2818
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1)
				or		""pk_SurveyUser_ID"" in ($2)
				order by",2815
Application.lib.FileUtil.getFileManagerUser( ) -> fmUserQuery,"	            select  ""pk_fileManagerUser_ID""
	            from    ""fileManagerUser""
	            where   ""fk_VT_ID"" = $1
				order by",2810
Application.models.Survey.reparseSurvey( ) -> [insert],						insert into,2792
Application.models.ClinicalForm.getClinicalForms( ) -> studyQuery,"					select	study_id
					from	users_studies
					where	user_id =",2763
Application.models.SurveyTag.getTagSites( ) -> sitesQuery,"				select	pk_survey_tag_site_id,
						fk_user_id,
						fk_survey_tag_id
				from	survey_tag_site
				where	fk_company_id =",2750
Application.models.Login.getMedTeamQuery( ) -> medTeamQuery,"				select	u.login, 
						u.password, 
						u.fname, 
						u.lname, 
						u.internalid,
						u.pk_user_id, 
						u.fk_company_id,
						u.security, 
						u.sudo_as_fk_user_id, 
						u.has_changed_password,
						u.password_valid_until, 
						u.sudo_retain_user_security,
						u.active,
						u.is_test_user,
						sudouser.is_site_user as sudo_is_site_user,
						sudouser.pk_user_id as sudo_user_id,
						sudouser.internalid as sudo_internalid,
						c.name as company_name,
						c.hroffsetfromservertime,
						c.custom_clinical_forms, 
						c.is_foundation,
						cc.vtoc_login_allow,
						cc.medteam_edit_inactive_forms,
						cc.medteam_edit_archived_forms,
						case  
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (sudouser.user_time_zone_location is not null 
								and sudouser.user_time_zone_location <> '') 
							then sudouser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location 
							else 'America/Los_Angeles'
						end as time_zone_location,
						u.institution_no, 
						u.is_site_user,
						u.user_association_uuid,
						group_concat(mspt.providertype) as roles_list,
						array_accum(mspt.pk_medserviceprovidertype_id) as roleids_list,
						array_accum(mspt.feature_permissions_obj) as feature_permissions_obj_array		
				from 	users as u
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = c.pk_company_id
				left join medserviceprovider as msp on msp.fk_user_id = u.pk_user_id
				left join medserviceprovidertype as mspt on mspt.pk_medserviceprovidertype_id = msp.fk_medserviceprovidertype_id
				left outer join users as sudouser on sudouser.pk_user_id = u.sudo_as_fk_user_id
				where	u.account_status  = 1
				and 	u.security > 1
					and	lower(u.login) = $1 
						and check_password($2, u.password)
				group by 
		 			u.login, 
					u.password, 
					u.fname, 
					u.lname, 
					u.internalid,
					u.pk_user_id, 
					u.fk_company_id,
		            u.security, 
					u.sudo_as_fk_User_ID, 
					u.has_changed_password,
					u.password_valid_until, 
					u.sudo_retain_user_security,
					u.active,
					u.is_test_user,
					sudouser.is_site_user,
					sudouser.pk_user_id,
					sudouser.internalid,
					c.name,
		            c.hroffsetfromservertime, 
		            c.custom_clinical_forms,
					c.is_foundation,
					cc.vtoc_login_allow,
					cc.medteam_edit_inactive_forms,
					cc.medteam_edit_archived_forms,
					u.institution_no,
					u.user_association_uuid,
					u.user_time_zone_location,
					sudouser.user_time_zone_location,
				   ",2656
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"						select	resource_label
						from	survey_tag_resource
						where	pk_survey_tag_resource_id =",2635
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17)
						group by",2611
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
					and mp.viewable_medside_only = false
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $8 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $9 
					and mtu.fk_message_thread_state in ($10,$11,$12,$13,$14,$15,$16,$17)
						group by",2553
Application.models.SurveyUserSolr.getLogicalSurveysQuery( ) -> logicalSurveysQuery,"				select	s.id as survey_id,
						s.title as survey_name,
						stp.id as timepoint_id,
						stp.named_interval,
						stp.timepoint_interval,
						sta.fk_resource_id,
						sa.physician_edit,
						sa.patient_edit,
						sa.site_edit
				from	survey_company sc
				join surveys s on s.id = sc.survey_id
				join survey_timepoints stp on stp.survey_id = s.id
				join survey_timepoint_survey_template stst on stst.survey_timepoint_id = stp.id
				join survey_templates_access sta on sta.fk_survey_template_id = stst.survey_template_id
					and sta.fk_company_id = sc.company_id
				join survey_access sa on sa.fk_company_id = sc.company_id
					and sa.fk_resource_id = sta.fk_resource_id
						and (sa.physician_edit = true or sa.patient_edit = true or sa.site_edit = true)
				where	sc.company_id = $1
				group by s.id,
						s.title,
						stp.id,
						stp.named_interval,
						stp.timepoint_interval,
						sta.fk_resource_id,
						sa.physician_edit,
						sa.patient_edit,
						sa.site_edit
				order by s.title,",2529
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2)
				or		""pk_SurveyUser_ID"" in ($3,$4)
				order by",2490
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select 	dob 
						, year_of_birth
					from	users 
					where 	pk_user_id =",2474
Application.helpers.SessionHelper.auditMedTeam( ) -> [insert],"				insert into audit_med_team
						(med_team_fk_user_id,
						fk_audit_action_id
							, patient_fk_user_id
							, session_id
						)
				values	($1,
						$2 
							, $3 
							, $4",2420
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fk_user_id"" =
									$2,
									""fname"" =
									$3,
									""lname"" =
									$4,
									""datecreated"" =
									$5,
									""dateupdated"" =
									$6,
									""active"" =
									$7,
									""password"" =
									$8,
									""dob"" =
									$9,
									""internalid"" =
									$10,
									""reminderemail"" =
									$11,
									""mayreceiveemailreminders"" =
									$12,
									""agreedtotermsandconditions"" =
									$13,
									""security"" =
									$14,
									""allow_self_reg"" =
									$15,
									""self_reg_capable"" =
									$16,
									""show_all_templates"" =
									$17,
									""import"" =
									$18,
									""gender"" =
									$19,
									""account_status"" =
									$20,
									""is_test_user"" =
									$21,
									""identity_validated"" =
									$22,
									""is_site_user"" =
									$23,
									""may_receive_sms_notifications"" =
									$24,
									""is_deceased"" =
									$25,
									""is_default_user"" =
									$26,
									""is_alert_sender"" =
									$27,
									""reg_form_create"" =
									$28
					WHERE ""pk_user_id"" =",2415
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17,$18)
						group by",2377
Application.models.Messaging.auditLog( ) -> [insert],				insert 	into,2324
Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> remindersQuery,"				select	cr.pk_communicatedreminder_id,
						cr.fk_calendaritem_id,
						ci.pk_calendaritem_id,
						ci.datetimeselected,
						ci.name,
						ci.description,
						cti.emailtext,
						cti.event,
						cti.send_fasttrack_email,
						u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u2.is_site_user,
						us.study_subject_id,
						urea.email_addresses as other_email_addresses,
						cc.fast_track_allow_app
				from	communicatedreminder as cr
				join calendaritem as ci on ci.pk_calendaritem_id = cr.fk_calendaritem_id and ci.active = true
				join users as u on u.pk_user_id = ci.fk_user_id
				join users u2 on u2.pk_user_id = u.fk_user_id
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = u.fk_company_id
				left outer join user_reminder_email_addresses urea on urea.fk_user_id = u.fk_user_id
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				left outer join users_studies us on us.user_id = u.pk_user_id
					where ((cr.senddatetime at time zone 'UTC') at time zone c.time_zone_location) 
						between (now() at time zone c.time_zone_location) 
						and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval))
				and		cr.sentdatetime is null
				and		u.security = 1
				and 	u.account_status = 1
				and 	u.email != ''
				and 	u.email is not null
	            and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				order by",2287
Application.lib.scheduled_scripts.TaskFormsManagerReminders.run( ) -> remindersQuery,"				select	utr.pk_reminders,
						utr.subject,
						utr.body,
						u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id as site_user_id,
						u.email
				from	user_todos_reminders utr
				join user_todos ut on ut.pk_user_todo_id = utr.fk_user_todo_id and ut.fk_user_todo_status_id < 3
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				where	(utr.email_sent is null or utr.email_sent = false)
				and 	(utr.send_date BETWEEN (now() at time zone c.time_zone_location) 
					and ((now() at time zone c.time_zone_location) + cast('5 minutes' as interval)))
				and		u.account_status = 1
				and		u.security = 1
				and		u.email is not null 
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is",2287
Application.models.Login.logLogin( ) -> [insert],"				insert into userslog 
						(fk_users_id, 
						ipaddy, 
						action,
						fk_login_mode_id)
				values	($1, 
						$2,",2252
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fname"" =
									$2,
									""lname"" =
									$3,
									""datecreated"" =
									$4,
									""dateupdated"" =
									$5,
									""active"" =
									$6,
									""password"" =
									$7,
									""login"" =
									$8,
									""internalid"" =
									$9,
									""datepatientidchanged"" =
									$10,
									""sudo_as_fk_user_id"" =
									$11,
									""agreedtotermsandconditions"" =
									$12,
									""has_changed_password"" =
									$13,
									""security"" =
									$14,
									""allow_self_reg"" =
									$15,
									""self_reg_capable"" =
									$16,
									""show_all_templates"" =
									$17,
									""account_status"" =
									$18,
									""sudo_retain_user_security"" =
									$19,
									""e_auth"" =
									$20,
									""name_suffix"" =
									$21,
									""is_test_user"" =
									$22,
									""identity_validated"" =
									$23,
									""is_site_user"" =
									$24,
									""may_receive_sms_notifications"" =
									$25,
									""is_deceased"" =
									$26,
									""is_default_user"" =
									$27,
									""is_alert_sender"" =
									$28,
									""reg_form_create"" =
									$29
					WHERE ""pk_user_id"" =",2117
/include/templates/_displayCompanyLogo.cfm -> getCompanyLogo,"		select	encode(logo::bytea, 'base64') as logo
		from	company_logo
		where	fk_company_id = $1 
			and fk_site_user_id = $2 
		order by pk_company_logo_id desc
		limit",2082
Application.models.SurveyUser.getUserInputDataForSUIDs( ) -> answersQuery,"				select	res_value.""Predicate_V1_Value"" as response_value,
						object_value_row.""Predicate_V1_Value_fk_Resource_ID"" as option_id
				from 	""Resource"" as res_value
				join ""Resource"" as object_value_row on res_value.""fk_SurveyUser_ID"" in ($1)
					and res_value.""Subject_fk_Schema_ID"" = 134
					and object_value_row.""fk_SurveyUser_ID"" in ($2)
					and object_value_row.""Subject_fk_Schema_ID"" = 133
					and res_value.""Object_fk_Resource_ID"" = object_value_row.""Object_fk_Resource_ID""
					where 	object_value_row.""Predicate_V1_Value_fk_Resource_ID"" in",2078
Application.App.findBy_( ) -> instances,"
				select
					id 
				from ""survey_user_drafts"" 
				where
							""user_id_self"" = $1
							and
							""resource_id"" = $2
							and
							""fk_user_todo_id"" = $3
							and
							""is_archived"" = $4
							and
					1 = 1
					order by updated_at",2066
Application.helpers.SessionHelper.checkSession( ) -> userQuery,"							select	fk_company_id
							from	users
							where 	fk_company_id = $1 
								and pk_user_id = $2 
								and fk_user_id =",2027
Application.models.Survey.getSurveyNameByResourceId( ) -> surveyLabel,"				select	""Predicate_V2_Value"" as label
				from	""Resource""
				where	""Subject_fk_Schema_ID"" = 16
				and 	""Object_fk_Resource_ID"" =",1996
Application.models.Survey.getSurveyQuestionsAndOptions( ) -> questionsQuery,"					WITH schema_result as (
						select	survey_id,question_id,question_language,question_label,question_label as label,option_id,option_language,question_tags
						from 	resource_survey_by_survey_id($1::bigint)
					)
	                select	survey_id,question_id,question_language,label,option_id,option_language,question_tags
	                from 	schema_result
						where  question_tags ~* ',numeric_eauth_transition$' or question_tags ~* '^numeric_eauth_transition,' or question_tags ~* ',numeric_eauth_transition,' or question_tags ~* '^numeric_eauth_transition$' 
						order by option_id",1990
Application.models.FormsLibrary.getOidMap( ) -> oidMapQuery,"				select	pk_survey_oid_map_id,
						option_id,
						option_text
				from	survey_oid_map
				where	fk_resource_id = $1
				order by",1977
Application.lib.FileUtil.getMediaSet( ) -> eduFilesQuery,"	            select	file_ext,
						file_name,
						is_dir,
						file_info,
						file_size,
						link_text,
						link_url,
						name,
						display_position,
						assigned_by_fk_user_id,
						modified_by_fk_user_id,
						assigned_date,
						active,
						active_start_date,
						active_end_date,
						file_manager_acl_id,
						file_manager_item_id,
						fk_patient_portal_template_id,
						fk_user_id,
						type_label,
						content_type,
						media_type_id,
						file_manager_item_id as ""fk_fileManagerItem_ID"",
						file_manager_acl_id as ""fk_fileManagerACL_ID"",
						user_edu_file_id,
						(
							(uef.active_end_date is null) or
							(now() < uef.active_end_date)
						) as currently_featured
	            from    user_edu_files_detail as uef
	            where   uef.""fk_user_id"" = $1 
					and uef.active = true
	                and uef.active_start_date::date < now()
	                order by",1925
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
	                left join users_ufpti uu on uu.fk_user_id = u.pk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike",1905
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        uu.ufpti_no,
	                        uu.shands_no,
	                        u.fname,
	                        u.lname,
	                        u.mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
	                left join users_ufpti uu on uu.fk_user_id = u.pk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        uu.ufpti_no,
	                        uu.shands_no,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",1869
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select	u2.internalid
					from	users u
					join users u2 on u2.pk_user_id = u.fk_user_id and u2.is_site_user = true
					where	u.pk_user_id =",1856
Application.models.FormsLibrary.getTemplateInfo( ) -> templateQuery,"				select	min(st.ts_updated) as last_modified,
						min(st.ts_file_write) as last_file_write
				from 	survey_templates st
				join survey_timepoint_survey_template stst on stst.survey_template_id = st.pk_survey_template_id
				join survey_timepoints stp on stp.id = stst.survey_timepoint_id
				join survey_company sc on sc.survey_id = stp.survey_id
					and sc.company_id = $1
				join survey_timepoint_survey_schema stss on stss.survey_timepoint_id = stp.id
				join survey_schemas ss on ss.id = stss.survey_schema_id
				join survey_access sa on sa.fk_company_id = $2
					and sa.fk_resource_id = ss.survey_resource_id
				where 	st.git_path = $3
				and 	st.fk_survey_template_type_id =",1855
Application.models.FormsLibrary.getTemplateInfo( ) -> timepointsQuery,"				select	st.pk_survey_template_id,
						st.ts_git_import as date_imported,
						st.imported_by_fk_user_id,
						st.header_version,
						u.fname,
						u.lname,
						ss.survey_resource_id,
						sa.patient_edit,
						sa.physician_edit,
						sa.site_edit
				from	survey_templates st
				join survey_timepoint_survey_template stst on stst.survey_template_id = st.pk_survey_template_id
				join survey_timepoints stp on stp.id = stst.survey_timepoint_id
				join survey_company sc on sc.survey_id = stp.survey_id
					and sc.company_id = $1
				join survey_timepoint_survey_schema stss on stss.survey_timepoint_id = stp.id
				join survey_schemas ss on ss.id = stss.survey_schema_id
				join survey_access sa on sa.fk_company_id = sc.company_id
					and sa.fk_resource_id = ss.survey_resource_id
				left outer join users u on u.pk_user_id = st.imported_by_fk_user_id
				where	st.git_path = $2
				and		st.fk_survey_template_type_id = 2
				order by",1855
Application.models.User.getPhysiciansQuery( ) -> physiciansQuery,"				select	u.pk_user_id,
						u.fname,
						u.lname,
						u.internalid
				from	users u
					join medserviceprovider msp on msp.fk_user_id = u.pk_user_id
						and msp.fk_medserviceprovidertype_id = 2
				where	u.fk_company_id = $1 
				and		u.account_status = 1
				and		u.security = 2
				and		u.is_site_user = false
				and		u.lname is not null
				and		u.lname <> ''
				group by u.pk_user_id,
						u.fname,
						u.lname
				order by",1822
Application.lib.scheduled_scripts.Task.startJob( ) -> insertJob,"				insert into process_times
							(process_id,
							process_name
								, fk_company_id
							)
				values		(2,
							$1 
								, $2 
							)
				returning",1807
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> insertCalendarItem,"							insert	into calendaritem
									(fk_user_id,
									fk_calendartemplate_id,
									name,
									description,
									datetimeselected,
									appointmentduration,
									fk_user_calendar_template_id,
									fk_calendartemplateitem_id,
									assigned_by_fk_user_id,
									active)
							values	($1,
									$2,
									$3,
									$4,
									$5,
									'0:0',
									$6,
									$7,
									$8,
									true)
							returning",1806
Application.App.getFormattedPhoneWithDialCode( ) -> patientQuery,"
				select	mobile_phone,
						mobile_phone_dial_code
				from	users
				where	pk_user_id = $1
				and		fk_company_id = $2
				and		security = 1
				and		account_status =",1798
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 93 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",1796
Application.models.Login.getMedTeamQuery( ) -> medTeamQuery,"				select	u.login, 
						u.password, 
						u.fname, 
						u.lname, 
						u.internalid,
						u.pk_user_id, 
						u.fk_company_id,
						u.security, 
						u.sudo_as_fk_user_id, 
						u.has_changed_password,
						u.password_valid_until, 
						u.sudo_retain_user_security,
						u.active,
						u.is_test_user,
						sudouser.is_site_user as sudo_is_site_user,
						sudouser.pk_user_id as sudo_user_id,
						sudouser.internalid as sudo_internalid,
						c.name as company_name,
						c.hroffsetfromservertime,
						c.custom_clinical_forms, 
						c.is_foundation,
						cc.vtoc_login_allow,
						cc.medteam_edit_inactive_forms,
						cc.medteam_edit_archived_forms,
						case  
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (sudouser.user_time_zone_location is not null 
								and sudouser.user_time_zone_location <> '') 
							then sudouser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location 
							else 'America/Los_Angeles'
						end as time_zone_location,
						u.institution_no, 
						u.is_site_user,
						u.user_association_uuid,
						group_concat(mspt.providertype) as roles_list,
						array_accum(mspt.pk_medserviceprovidertype_id) as roleids_list,
						array_accum(mspt.feature_permissions_obj) as feature_permissions_obj_array		
				from 	users as u
				join companies as c on c.pk_company_id = u.fk_company_id
				join company_config as cc on cc.fk_company_id = c.pk_company_id
				left join medserviceprovider as msp on msp.fk_user_id = u.pk_user_id
				left join medserviceprovidertype as mspt on mspt.pk_medserviceprovidertype_id = msp.fk_medserviceprovidertype_id
				left outer join users as sudouser on sudouser.pk_user_id = u.sudo_as_fk_user_id
				where	u.account_status  = 1
				and 	u.security > 1
					and u.pk_user_id = $1 
				group by 
		 			u.login, 
					u.password, 
					u.fname, 
					u.lname, 
					u.internalid,
					u.pk_user_id, 
					u.fk_company_id,
		            u.security, 
					u.sudo_as_fk_User_ID, 
					u.has_changed_password,
					u.password_valid_until, 
					u.sudo_retain_user_security,
					u.active,
					u.is_test_user,
					sudouser.is_site_user,
					sudouser.pk_user_id,
					sudouser.internalid,
					c.name,
		            c.hroffsetfromservertime, 
		            c.custom_clinical_forms,
					c.is_foundation,
					cc.vtoc_login_allow,
					cc.medteam_edit_inactive_forms,
					cc.medteam_edit_archived_forms,
					u.institution_no,
					u.user_association_uuid,
					u.user_time_zone_location,
					sudouser.user_time_zone_location,
				   ",1790
Application.models.SurveyUserSolr.getLogicalSurveysQuery( ) -> logicalSurveysQuery,"				select	s.id as survey_id,
						s.title as survey_name,
						stp.id as timepoint_id,
						stp.named_interval,
						stp.timepoint_interval,
						sta.fk_resource_id,
						sa.physician_edit,
						sa.patient_edit,
						sa.site_edit
				from	survey_company sc
				join surveys s on s.id = sc.survey_id
				join survey_timepoints stp on stp.survey_id = s.id
				join survey_timepoint_survey_template stst on stst.survey_timepoint_id = stp.id
				join survey_templates_access sta on sta.fk_survey_template_id = stst.survey_template_id
					and sta.fk_company_id = sc.company_id
						and sta.fk_resource_id in ($1)
				join survey_access sa on sa.fk_company_id = sc.company_id
					and sa.fk_resource_id = sta.fk_resource_id
						and (sa.physician_edit = true or sa.patient_edit = true or sa.site_edit = true)
				where	sc.company_id = $2
				group by s.id,
						s.title,
						stp.id,
						stp.named_interval,
						stp.timepoint_interval,
						sta.fk_resource_id,
						sa.physician_edit,
						sa.patient_edit,
						sa.site_edit
				order by s.title,",1773
Application.lib.FileUtil.getItemByName( ) -> itemQuery,"				select	fmi.""pk_fileManagerItem_ID""
				from	""fileManagerACL"" fma
				join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
					and	lower(fmi.""Name"") = $1
					and	fmi.""isDirectory"" = $2 
				where	fma.""fk_fileManagerUser_ID"" = $3
	            and     fma.is_deleted =",1772
Application.models.AppointmentManager.getAppointmentsQuery( ) -> appointmentsQuery,"				select 	hl7.received_schedule_id, 
						hl7.event_reason, 
						hl7.start_time at time zone c.time_zone_location as start_time, 
						hl7.stop_time at time zone c.time_zone_location as stop_time, 
						hl7.event_reason,
						hl7.created_at,
						u.pk_user_id as user_id,
						u.internalid, 
						u2.pk_user_id as physician_id,
						u2.fname as physician_fname, 
						u2.lname as physician_lname, 
						u2.name_suffix as physician_suffix,
						u3.pk_user_id as physician2_id, 
						u3.fname as physician2_fname, 
						u3.lname as physician2_lname, 
						u3.name_suffix as physician2_suffix,
						c.time_zone_location
				from 	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join settings_apps sa on sa.fk_company_id = c.pk_company_id
						and sa.patient_appointments_show = true
				join hl7_inbound_parsed_siu hl7 on hl7.received_patient_id = u.internalid
					and hl7.company_id = u.fk_company_id
					and hl7.start_time is not null
					and hl7.stop_time is not null
				join users u2 on u2.pk_user_id = u.fk_user_id  
				left outer join users u3 on u3.internalid = hl7.received_physician_id
					and u3.fk_company_id = u.fk_company_id
				where	u.pk_user_id = $1
				order by hl7.received_schedule_id, hl7.created_at",1771
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4)
				or		""pk_SurveyUser_ID"" in ($5,$6,$7,$8)
				order by",1771
Application.models.SurveyTag.getAllTagResources( ) -> tagResourcesQuery,"				select	st.pk_survey_tag_id as tag_id,
						st.tag_name as tag_name,
						st.tag_label as tag_label,
						st.tag_order as tag_order,
						str.pk_survey_tag_resource_id,
						str.fk_resource_id as fk_resource_id,
						str.resource_order as resource_order,
						str.resource_label as resource_label,
						str.single_instance_only as single_instance_only,
						sa.physician_read,
						sa.physician_edit,
						sa.site_read,
						sa.site_edit,
						t.header_version
				from	survey_tags st
				join survey_tag_resource str on str.fk_survey_tag_id = st.pk_survey_tag_id
				join survey_access sa on sa.fk_company_id = st.fk_company_id
					and sa.fk_resource_id = str.fk_resource_id
						and	(sa.physician_read is true or sa.physician_edit is true)
				join survey_templates_access sta on sta.fk_company_id = st.fk_company_id
					and sta.fk_resource_id = str.fk_resource_id
				join survey_templates t on t.pk_survey_template_id = sta.fk_survey_template_id
					and t.fk_survey_template_type_id = 2
				left outer join treatment_arm ta on ta.pk_treatment_arm_id = str.fk_treatment_arm_id
				where 	st.fk_company_id = $1
				and		((st.fk_study_id is null)
						)
					union
					select	st.pk_survey_tag_id as tag_id,
							st.tag_name as tag_name,
							st.tag_label as tag_label,
							st.tag_order as tag_order,
							str.pk_survey_tag_resource_id,
							str.fk_resource_id as fk_resource_id,
							str.resource_order as resource_order,
							str.resource_label as resource_label,
							str.single_instance_only as single_instance_only,
							true as physician_read,
							true as physician_edit,
							false as site_read,
							false as site_edit,
							t.header_version
					from	survey_tags st
					join survey_tag_resource str on str.fk_survey_tag_id = st.pk_survey_tag_id and str.fk_resource_id = 0
					join survey_templates_access sta on sta.fk_company_id = st.fk_company_id
						and sta.fk_resource_id = str.fk_resource_id
					join survey_templates t on t.pk_survey_template_id = sta.fk_survey_template_id
						and t.fk_survey_template_type_id = 2
					where 	st.fk_company_id = $2
					and		((st.fk_study_id is null)
							)
					union
					select	st2.pk_survey_tag_id as tag_id,
							stu.tag_name as tag_name,
							stu.tag_label as tag_label,
							stu.tag_order as tag_order,
							str2.pk_survey_tag_resource_id,
							str2.fk_resource_id as fk_resource_id,
							str2.resource_order as resource_order,
							str2.resource_label as resource_label,
							str2.single_instance_only as single_instance_only,
							sa.physician_read,
							sa.physician_edit,
							sa.site_read,
							sa.site_edit,
							t.header_version
					from	survey_tag_user stu
					join survey_tags st2 on st2.pk_survey_tag_id = stu.fk_survey_tag_id
						and st2.fk_company_id = $3
					join survey_tag_resource str2 on str2.fk_survey_tag_id = st2.pk_survey_tag_id
					join survey_templates_access sta on sta.fk_company_id = st2.fk_company_id
						and sta.fk_resource_id = str2.fk_resource_id
					join survey_templates t on t.pk_survey_template_id = sta.fk_survey_template_id
						and t.fk_survey_template_type_id = 2
					left outer join treatment_arm ta on ta.pk_treatment_arm_id = str2.fk_treatment_arm_id
					join survey_access sa on sa.fk_company_id = st2.fk_company_id
						and sa.fk_resource_id = str2.fk_resource_id
						and	(sa.physician_read is true or sa.physician_edit is true)
					where	stu.fk_user_id = $4
					union
					select	st2.pk_survey_tag_id as tag_id,
							stu.tag_name as tag_name,
							stu.tag_label as tag_label,
							stu.tag_order as tag_order,
							str2.pk_survey_tag_resource_id,
							str2.fk_resource_id as fk_resource_id,
							str2.resource_order as resource_order,
							str2.resource_label as resource_label,
							str2.single_instance_only as single_instance_only,
							true as physician_read,
							true as physician_edit,
							false as site_read,
							false as site_edit,
							null as header_version
					from	survey_tag_user stu
					join survey_tags st2 on st2.pk_survey_tag_id = stu.fk_survey_tag_id
						and st2.fk_company_id = $5
					join survey_tag_resource str2 on str2.fk_survey_tag_id = st2.pk_survey_tag_id 
						and str2.fk_resource_id = 0
					where	stu.fk_user_id = $6 
				order by",1753
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3)
				or		""pk_SurveyUser_ID"" in ($4,$5,$6)
				order by",1750
Application.models.AppointmentManager.getReminders( ) -> remindersQuery,"				select	ci.pk_calendaritem_id,
						ci.name,
						ci.description,
						ci.datetimeselected,
						ci.appointmentduration
				from 	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join calendaritem ci on ci.fk_user_id = u.pk_user_id
					and ci.fk_calendaritem_id is null
					and ci.active = true
				left outer join calendartemplateitem cti on cti.pk_calendartemplateitem_id = ci.fk_calendartemplateitem_id
				where 	u.pk_user_id = $1
				and		cti.send_fasttrack_email <> true
				order by ci.datetimeselected",1746
Application.lib.FileUtil.getItemIdByAclId( ) -> itemQuery,"				select	""fk_fileManagerItem_ID""
				from 	""fileManagerACL""
				where 	""pk_fileManagerACL_ID"" = $1
				and		is_deleted =",1726
/include/templates/_surveyRedesigned.cfm -> checkPatRegSurveyStatus,"				select 	fk_user_todo_id
				from 	user_survey_completion_statuses
				where	fk_user_todo_id =",1711
/include/templates/_surveyRedesigned.cfm -> [update],"					update	user_survey_completion_statuses
					set		fk_completion_status_id = $1,
							date_modified = $2 
								, fk_surveyuser_id = $3 
								, fk_login_mode_id = $4 
					where	fk_user_todo_id =",1711
Application.App.findBy_( ) -> instances,"
				select
					id, json_serialized_form, updated_at, location_hash 
				from ""survey_user_drafts"" 
				where
							""user_id_self"" = $1
							and
							""resource_id"" = $2
							and
							""visit"" = $3
							and
							""is_archived"" = $4
							and
					1 = 1
					order by updated_at",1694
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
								, ""DateCompleted""
							, submitter_id
								, survey_location_hash
								, fk_login_mode_id
								, completion_seconds
								, completion_seconds_total
							)
					values ( $1,
							$2,
							$3,
							$4 
								, $5 
							, $6 
								, $7 
								, $8 
								, $9 
								, $10 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",1694
Application.models.FileManager.getNodeArray( ) -> nodeQuery,"				select 	fmi.""fk_fileManagerItem_ID"",
						fmi.""Name"",
						fmi.""isDirectory"",
						fmi.""fileExtension"",
						fmi.link_text,
						fmi.link_url,
						fmi.""patientReadOnly"",
						fma.""pk_fileManagerACL_ID"",
						fma.""fk_fileManagerACL_ID"",
						fma.""fk_fileManagerUser_ID"",
						fma.""fk_fileManagerPermissionType_ID"",
						fma.is_deleted
				from	""fileManagerItem"" fmi
				join ""fileManagerACL"" fma on fma.""fk_fileManagerItem_ID"" = fmi.""pk_fileManagerItem_ID""
					and fma.is_deleted = false
				where	fma.""fk_fileManagerUser_ID"" = $1 
					and	fmi.""fk_fileManagerItem_ID"" = $2 
				order by fmi.""isDirectory"" desc,",1693
Application.lib.FileUtil.getItemByParent( ) -> itemsQuery,"				select	fmi.""pk_fileManagerItem_ID"",
						fmi.""fk_fileManagerData_ID"",
						fmi.""Name"",
						fmi.""fileExtension"",
						fmi.""DateAdded"",
						fmi.""DateGenerated"",
						fmi.author,
						fma.""pk_fileManagerACL_ID"",
	                    null as logUserId,
	                    null as docDate,
	                    null as docAuthor,
	                    null as fileName,
	                    null as urlEncodedAclId
				from	""fileManagerItem"" fmi
				join ""fileManagerACL"" fma on fma.""fk_fileManagerItem_ID"" = fmi.""pk_fileManagerItem_ID""
	                and fma.is_deleted = false
				where	fmi.""fk_fileManagerItem_ID"" = $1
				and		fmi.""isDirectory"" = false
				order by",1684
Application.models.User.getSudoUserId( ) -> userQuery,"					select 	fk_user_id
					from 	users
					where 	pk_user_id =",1679
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscSouthSuburban') and fk_company_id = 10
						AND
					1 =",1678
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_user_drafts"" (""user_id_self"",""creator_id"",""resource_id"",""json_serialized_form"",""is_archived"",""is_private"",""creator_notes"",""created_at"",""updated_at"",""location_hash"",""visit"",""history"",""fk_user_todo_id"",""fk_survey_tag_resource_id"")
					VALUES (
						$1 , $2 , $3 , $4 , $5 , $6 , 
								null
							, $7 , $8 , $9 , 
								null
							, $10 , $11 , 
								null
					)
					RETURNING id as",1676
Application.models.LogicalSurvey.SurveyAccess.getSurveyAccess( ) -> accessQuery,"				select	*
				from	survey_access
				where	fk_company_id = $1
				and		fk_resource_id =",1637
Application.models.UserPortalTemplate.getUserPortalTemplate( ) -> userTemplateQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name,
						upt.fk_user_id,
						upt.pk_user_portal_template_id,
						upt.assigned_by_fk_user_id,
						upt.assigned_date,
						upt.active,
						upt.active_start_date,
						upt.modified_by_fk_user_id
				from	user_portal_templates upt
				join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where  	upt.fk_user_id = $1 
				and 	upt.active =",1625
Application.models.PatientDashboard.getBeamStatus( ) -> statusQuery,"				select	status, 
						status_text
				from 	beam_statuses
				where 	company_id = $1
				order by created_at desc
				limit",1617
Application.models.Company.getPatientPortalDisplay( ) -> portalDisplayQuery,"				select	portal_display_forms,
						portal_display_information_center,
						portal_display_contacts,
						portal_display_calendar,
						portal_display_beam_status,
						case 
							when has_portable_health_records = true
							then 'FEATURE_VISIBLE_TILE_VISIBLE'
							else 'FEATURE_HIDDEN_TILE_HIDDEN'
						end as portal_display_visit_summary,
						portal_display_lab_results,
						portal_display_news_feed,
						portal_display_my_files,
						portal_display_patient_education
				from	company_config
				where	fk_company_id =",1615
Application.models.Survey.getWellnessCheckFormInfo( ) -> surveyQuery,"				select	smcs.fk_resource_id,
						t.pk_todo_id
				from	settings_apps sap
				join survey_messaging_company_surveys smcs on smcs.fk_company_id = sap.fk_company_id
				join survey_messaging_labels sml on sml.pk_survey_messaging_label_id = smcs.fk_survey_messaging_label_id
					and sml.label = 'WellnessCheck'
				join todos t on t.fk_resource_id = smcs.fk_resource_id
					and t.fk_company_id = smcs.fk_company_id
				join survey_access sa on sa.fk_company_id = t.fk_company_id
					and sa.fk_resource_id = t.fk_resource_id
					and sa.patient_edit = true
				where	sap.fk_company_id = $1
				and		sap.form_auto_assign =",1615
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscLawrenceville') and fk_company_id = 10
						AND
					1 =",1614
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select 	study_subject_id 
					from	users_studies 
						join study on pk_study_id = study_id and use_in_reports = true
					where 	user_id =",1610
Application.models.PatientPortalTemplate.saveTemplateForms( ) -> [update],"						update	patient_portal_template_todos
						set		modified_by_fk_user_id = $1,
								active_start_interval = $2::interval,
								active_end_interval = $3::interval,
								display_position = $4,
								name = $5
						where	pk_patient_portal_template_todos_id =",1604
Application.helpers.SessionHelper.auditPatient( ) -> [insert],"				insert into audit_patient
						(fk_user_id,
						fk_audit_action_id
							, session_id
						)
				values	($1,
						$2 
							, $3",1575
Application.models.PatientPortalTemplate.getAssociatedUser( ) -> associatedUserQuery,"				select	u.pk_user_id
				from	identity_to_account_map i1
				join identity_to_account_map i2 on i2.identity_id = i1.identity_id and i2.fk_user_id <> i1.fk_user_id
				join users u on u.pk_user_id = i2.fk_user_id
					and u.security = 1
					and u.account_status = 1
					and u.fk_company_id = $1
				where	i1.fk_user_id =",1558
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '3 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date desc, thread_state_order 
						limit 25 
						offset",1514
Application.models.PatientPortalTemplate.getAssociatedTemplatesQuery( ) -> associatedTemplatesQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.fk_company_id
				from	patient_portal_template_association ppta1
				join patient_portal_template_association ppta2 on ppta2.association_uuid = ppta1.association_uuid
					and ppta2.fk_patient_portal_template_id <> ppta1.fk_patient_portal_template_id
				join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = ppta2.fk_patient_portal_template_id
				where	ppta1.fk_patient_portal_template_id =",1501
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
								, revision_type
								, revision_fk_surveyuser_id
							, submitter_id
							)
					values ( $1,
							$2,
							$3,
							$4 
								, 'update'
								, $5 
							, $6 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",1500
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscMerrittIsland') and fk_company_id = 10
						AND
					1 =",1494
Application.models.FileManager.getNodeInfoQuery( ) -> nodeQuery,"				select 	fma.""pk_fileManagerACL_ID"",
						fmi.""pk_fileManagerItem_ID"",
						fmi.""Name"",
						fmi.""Info"",
						fmi.""isDirectory"",
						fmi.""fileExtension"",
						fmi.""DateAdded"",
						fmi.link_text,
						fmi.link_url,
						fmd.""Size""
				from	""fileManagerACL"" fma
				join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
				left outer join ""fileManagerData"" fmd on fmd.""pk_fileManagerData_ID"" = fmi.""fk_fileManagerData_ID""
				where	fma.""fk_fileManagerUser_ID"" = $1
				and		fma.""pk_fileManagerACL_ID"" = $2
				order by fmi.""isDirectory"" desc, fmi.""Name""
				limit",1488
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select 	ufpti_no 
					from	users_ufpti 
					where 	fk_user_id =",1470
Application.models.Login.getPatientQuery( ) -> patientQuery,"				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	lower(u.fname) = $1
					and	lower(u.lname) = $2
					and check_password($3, u.password)
				limit",1464
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> [insert],"								insert	into communicatedreminder
										(fk_calendaritem_id,
										method,
										senddatetime,
										offsettype
											, offsetunit
											, offsetvalue
										)
								values	($1,
										'email',
										$2,
										$3 
											, 'n'
											,",1461
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscKentuckianaRCKI') and fk_company_id = 10
						AND
					1 =",1452
Application.models.Patient.getPatientIdentifier( ) -> patientQuery,"				select	u.fname,
						u.lname,
						u.internalid,
						u.case_no,
						u.fk_company_id,
						u.fk_user_id,
						us.study_subject_id,
						s.use_in_reports
				from	users u
				left outer join users_studies us on us.user_id = u.pk_user_id
				left outer join study s on s.pk_study_id = us.study_id
				where	u.pk_user_id = $1
				and 	u.security =",1450
/include/templates/_displayCompanyLogo.cfm -> getCompanyLogo,"			select	encode(logo::bytea, 'base64') as logo
			from	company_logo
			where	fk_company_id = $1
			and 	fk_site_user_id is null
			order by pk_company_logo_id desc
			limit",1442
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""mname"",""fk_hospital_ids"",""account_status"",""race"",""gender"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""is_intake_user"",""is_site_user"",""identity_validated"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""pk_user_id"" = $1
							and
					1 =",1405
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fk_user_id"" =
									$2,
									""fname"" =
									$3,
									""lname"" =
									$4,
									""email"" =
									$5,
									""phone"" =
									$6,
									""datecreated"" =
									$7,
									""dateupdated"" =
									$8,
									""active"" =
									$9,
									""password"" =
									$10,
									""dob"" =
									$11,
									""internalid"" =
									$12,
									""reminderemail"" =
									$13,
									""mayreceiveemailreminders"" =
									$14,
									""agreedtotermsandconditions"" =
									$15,
									""security"" =
									$16,
									""allow_self_reg"" =
									$17,
									""self_reg_capable"" =
									$18,
									""show_all_templates"" =
									$19,
									""import"" =
									$20,
									""gender"" =
									$21,
									""account_status"" =
									$22,
									""is_test_user"" =
									$23,
									""identity_validated"" =
									$24,
									""is_site_user"" =
									$25,
									""may_receive_sms_notifications"" =
									$26,
									""is_deceased"" =
									$27,
									""is_default_user"" =
									$28,
									""is_alert_sender"" =
									$29,
									""reg_form_create"" =
									$30
					WHERE ""pk_user_id"" =",1387
Application.models.Study.getCompanyStudies( ) -> studiesQuery,"				select	name, 
						pk_study_id
				from	study
				where 	fk_company_id = $1 
				order by",1340
Application.models.Study.getStudies( ) -> studiesQuery,"					select	* 
					from 	study 
					where 	fk_company_id = $1
					order by",1340
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscDecatur') and fk_company_id = 10
						AND
					1 =",1338
Application.models.PatientPortalTemplate.getTemplateName( ) -> templateQuery,"				select	name
				from	patient_portal_templates
				where 	pk_patient_portal_template_id in",1329
Application.App.findBy_( ) -> instances,"
				select
					""pk_userslog_id"",""fk_users_id"",""ts"",""ipaddy"",""action"",""fk_login_mode_id"",""kiosk_fk_user_id"" 
				from ""userslog"" 
				where
							""fk_users_id"" = $1
							and
							""action"" = $2
							and
					1 = 1
					order by ts desc 
					limit",1316
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 89 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",1312
Application.models.LogicalSurvey.SurveyTimepoint.list( ) -> surveyTimepointsQuery,"				select	survey_schemas.survey_resource_id,
				 	 	justify_interval(survey_timepoints.timepoint_interval) as timepoint_interval,
				  		EXTRACT(EPOCH from survey_timepoints.timepoint_interval) as timepoint_interval_from_epoch,
				  		((EXTRACT(years from survey_timepoints.timepoint_interval) * 12) + EXTRACT(months from survey_timepoints.timepoint_interval)) as timepoint_interval_months,
						survey_timepoints.survey_id,
						survey_timepoints.named_interval,
						survey_timepoints.id
				from	survey_timepoint_survey_schema
				join survey_timepoints on (survey_timepoint_survey_schema.survey_timepoint_id = survey_timepoints.id)
				join survey_schemas on (survey_timepoint_survey_schema.survey_schema_id = survey_schemas.id)
				where 
						survey_id = $1 
				order by",1299
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in",1286
Application.models.Messaging.updateMessageThreadUsersState( ) -> patientQuery,"				select	mtu.fk_user_id
				from 	users u
				join message_thread_users mtu on mtu.fk_user_id = u.pk_user_id
					and mtu.fk_message_thread_id = $1
				where	u.fk_company_id = $2
				and 	u.security = 1
				group by",1283
Application.models.Messaging.updateMessageThreadUsersState( ) -> medTeamQuery,"				select 	mtu.fk_user_id
				from 	users u
				join message_thread_users mtu on mtu.fk_user_id = u.pk_user_id
					and mtu.fk_message_thread_id = $1
				where	u.fk_company_id = $2
				and		u.security > 1
				group by",1277
Application.models.SurveyUser.getAssociatedUser( ) -> associatedUserQuery,"				select	u.pk_user_id,
						u.fk_user_id,
						u.fk_company_id
				from	identity_to_account_map i1
				join identity_to_account_map i2 on i2.identity_id = i1.identity_id and i2.fk_user_id <> i1.fk_user_id
				join users u on u.pk_user_id = i2.fk_user_id
					and u.security = 1
					and u.account_status = 1
				where	i1.fk_user_id =",1268
Application.models.PatientPortalTemplate.savePatientEducationalMedia( ) -> [insert],						insert	into,1266
/include/templates/_surveyRedesigned.cfm -> mostRecentSurveyUserQuery,"				select	max(""pk_SurveyUser_ID"") as pk_surveyuser_id
				from	""SurveyUser""
				where	revision_fk_surveyuser_id =",1245
Application.lib.DateLib.getDatabaseTimezone( ) -> getTZ,				select current_setting('TIMEZONE') as,1239
Application.models.Patient.initSession( ) -> [insert],"				insert into userslog 
						(fk_users_id,
						ipaddy,
						action,
						fk_login_mode_id) 
				values",1214
Application.models.Messaging.getMessages( ) -> confirmQuery,"								select 	count(*) as thecount
								from 	message_thread_users
								where 	fk_user_id = $1
								and 	fk_message_thread_id = $2
								and 	fk_message_thread_state =",1200
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike",1186
Application.App.findBy_( ) -> instances,"
				select
					lname, fname, internalid, case_no, pk_user_id, fk_user_id 
				from ""users"" 
				where
							""pk_user_id"" = $1
							and
					1 =",1186
Application.models.SurveyTypes.SurveyMessagingAlert.getSurveyLabel( ) -> surveyLabelQuery,"				select	sml.label
				from	survey_messaging_company_surveys smcs
				join survey_messaging_labels sml on sml.pk_survey_messaging_label_id = smcs.fk_survey_messaging_label_id
				where	smcs.fk_company_id = $1
				and		smcs.fk_resource_id =",1186
Application.models.SurveyTypes.SurveyMessagingAlert.getPreviousSurveyData( ) -> surveyUserQuery,"				select	revision_fk_surveyuser_id
				from	""SurveyUser""
				where	""pk_SurveyUser_ID"" =",1186
Application.models.SurveyTypes.SurveyMessagingAlert.getPostTypeId( ) -> postTypeQuery,"					select	fk_message_post_type_id
					from	survey_messaging_company_surveys
					where	fk_company_id = $1
					and		fk_resource_id = $2
					and		alert_type_id =",1169
Application.controllers.SurveyControllerRemote.checkSurveyAccess( ) -> surveyAccessQuery,"				select	pk_survey_access_id
				from	survey_access
				where	fk_company_id = $1
				and		fk_resource_id =",1169
Application.models.UserTodo.getPatientActiveInactiveArchivedTodos( ) -> patientQuery,"				select	fk_company_id
				from	users
				where	pk_user_id =",1160
patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"				select	
							uscs.fk_user_id,
							uscs.fk_completion_status_id as status_id,
							uscs.fk_surveyuser_id,
							cs.status,
							ut.name as user_todo_name,
							ut.pk_user_todo_id as user_todo_id,
							to_char(ut.active_start_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_start_date,
							to_char(ut.active_end_date at time zone c.time_zone_location, 'mm/dd/yyyy') as active_end_date,
							ut.active_start_date at time zone c.time_zone_location as active_start_date_ts,
							ut.display_position,
							ut.fk_patient_portal_template_id,
							ut.active,
							ppt.name as template_name,
							ppt.share_template,
							t.name as todo_name,
							t.pk_todo_id as todo_id,
							t.fk_company_id as company_id,
							t.fk_resource_id as resource_id,
							ut.assigned_date at time zone c.time_zone_location,
							case
								when uscs.fk_completion_status_id = 3
								then uscs.date_modified
								else NULL
							end as date_completed,
							dense_rank() over (partition by ut.fk_user_id, ut.fk_todo_id
												order by ut.assigned_date, ut.pk_user_todo_id)
								as similar_todo_rank,
							count(*) over (partition by ut.fk_user_id, ut.fk_todo_id)
								as similar_todo_count
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and ut.active is false 
						and uscs.fk_completion_status_id > 1
				order by t.name, 
						ut.active",1160
Application.models.FormDataExportSetup.getSetupQuery( ) -> exportSetupQuery,"				select	pk_survey_export_setup_id,
						include_oid_headers
				from	survey_export_setup
				where	fk_company_id = $1
				and		fk_resource_id =",1154
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 93 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",1120
Application.models.CCDA.getCCDACount( ) -> patientQuery,"				select	u.pk_user_id,
						u.fname,
						u.lname,
						u.internalid,
						u.fk_company_id,
						u.fk_user_id,
						u2.is_site_user as has_site_user,
						u2.lname as site_name,
						u2.location
				from	users u
				join users u2 on u2.pk_user_id = u.fk_user_id
				where	u.pk_user_id = $1
				and		u.security = 1
				and		u.account_status =",1115
Application.models.Patient.getCurrentPrimaryCarePhysician( ) -> medTeamUserQuery,"				select	phyuser.sudo_as_fk_user_id as grandparent_id, 
						phyuser.pk_user_id as id, 
						phyuser.fname, 
						phyuser.lname, 
						phyuser.name_suffix
				from	users u
				join users as phyuser on phyuser.pk_user_id = u.fk_user_id
				where	u.pk_user_id = $1 
					and u.fk_company_id =",1110
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6)
				or		""pk_SurveyUser_ID"" in ($7,$8,$9,$10,$11,$12)
				order by",1108
Application.models.Communication.getCommunicationLogs( ) -> emailLogQuery,"				select	el.pk_email_log_id as id,
						el.email_to,
						el.email_from,
						el.email_subject,
						el.email_sent,
						el.email_error,
						el.datecreated
				from	email_log el
				join users u on u.pk_user_id = el.fk_user_id
					and u.fk_company_id = $1
				where	el.fk_user_id =",1107
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7)
				or		""pk_SurveyUser_ID"" in ($8,$9,$10,$11,$12,$13,$14)
				order by",1102
Application.models.SurveyUserSolr.getPatientQuery( ) -> patientQuery,"				select	u.pk_user_id,
						u.fk_user_id,
						u2.pk_user_id as site_fk_user_id,
						u2.lname as site_name,
							u.fname,
							u.lname
							, u.internalid
				from	users u
				left outer join users u2 on u2.pk_user_id = u.fk_user_id
					and u2.is_site_user = true
				where	u.pk_user_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194,$195,$196,$197,$198,$199,$200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214,$215,$216,$217,$218,$219,$220,$221,$222,$223,$224,$225,$226,$227,$228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241,$242,$243,$244,$245,$246,$247,$248,$249,$250,$251,$252,$253,$254,$255,$256,$257,$258,$259,$260,$261,$262,$263,$264,$265,$266,$267,$268,$269,$270,$271,$272,$273,$274,$275,$276,$277,$278,$279,$280,$281,$282,$283,$284,$285,$286,$287,$288,$289,$290,$291,$292,$293,$294,$295,$296,$297,$298,$299,$300,$301,$302,$303,$304,$305,$306,$307,$308,$309,$310,$311,$312,$313,$314,$315,$316,$317,$318,$319,$320,$321,$322,$323,$324,$325,$326,$327,$328,$329,$330,$331,$332,$333,$334,$335,$336,$337,$338,$339,$340,$341,$342,$343,$344,$345,$346,$347,$348,$349,$350,$351,$352,$353,$354,$355,$356,$357,$358,$359,$360,$361,$362,$363,$364,$365,$366,$367,$368,$369,$370,$371,$372,$373,$374,$375,$376,$377,$378,$379,$380,$381,$382,$383,$384,$385,$386,$387,$388,$389,$390,$391,$392,$393,$394,$395,$396,$397,$398,$399,$400,$401,$402,$403,$404,$405,$406,$407,$408,$409,$410,$411,$412,$413,$414,$415,$416,$417,$418,$419,$420,$421,$422,$423,$424,$425,$426,$427,$428,$429,$430,$431,$432,$433,$434,$435,$436,$437,$438,$439,$440,$441,$442,$443,$444,$445,$446,$447,$448,$449,$450,$451,$452,$453,$454,$455,$456,$457,$458,$459,$460,$461,$462,$463,$464,$465,$466,$467,$468,$469,$470,$471,$472,$473,$474,$475,$476,$477,$478,$479,$480,$481,$482,$483,$484,$485,$486,$487,$488,$489,$490,$491,$492,$493,$494,$495,$496,$497,$498,$499,$500,$501,$502,$503,$504,$505,$506,$507,$508,$509,$510,$511,$512,$513,$514,$515,$516,$517,$518,$519,$520,$521,$522,$523,$524,$525,$526,$527,$528,$529,$530,$531,$532,$533,$534,$535,$536,$537,$538,$539,$540,$541,$542,$543,$544,$545,$546,$547,$548,$549,$550,$551,$552,$553,$554,$555,$556,$557,$558,$559,$560,$561,$562,$563,$564,$565,$566,$567,$568,$569,$570,$571,$572,$573,$574,$575,$576,$577,$578,$579,$580,$581,$582,$583,$584,$585,$586,$587,$588,$589,$590,$591,$592,$593,$594,$595,$596,$597,$598,$599,$600,$601,$602,$603,$604,$605,$606,$607,$608,$609,$610,$611,$612,$613,$614,$615,$616,$617,$618,$619,$620,$621,$622,$623,$624,$625,$626,$627,$628,$629,$630,$631,$632,$633,$634,$635,$636,$637,$638,$639,$640,$641,$642,$643,$644,$645,$646,$647,$648,$649,$650,$651,$652,$653,$654,$655,$656,$657,$658,$659,$660,$661,$662,$663,$664,$665,$666,$667,$668,$669,$670,$671,$672,$673,$674,$675,$676,$677,$678,$679,$680,$681,$682,$683,$684,$685,$686,$687,$688,$689,$690,$691,$692,$693,$694,$695,$696,$697,$698,$699,$700,$701,$702,$703,$704,$705,$706,$707,$708,$709,$710,$711,$712,$713,$714,$715,$716,$717,$718,$719,$720,$721,$722,$723,$724,$725,$726,$727,$728,$729,$730,$731,$732,$733,$734,$735,$736,$737,$738,$739,$740,$741,$742,$743,$744,$745,$746,$747,$748,$749,$750,$751,$752,$753,$754,$755,$756,$757,$758,$759,$760,$761,$762,$763,$764,$765,$766,$767,$768,$769,$770,$771,$772,$773,$774,$775,$776,$777,$778,$779,$780,$781,$782,$783,$784,$785,$786,$787,$788,$789,$790,$791,$792,$793,$794,$795,$796,$797,$798,$799,$800,$801,$802,$803,$804,$805,$806,$807,$808,$809,$810,$811,$812,$813,$814,$815,$816,$817,$818,$819,$820,$821,$822,$823,$824,$825,$826,$827,$828,$829,$830,$831,$832,$833,$834,$835,$836,$837,$838,$839,$840,$841,$842,$843,$844,$845,$846,$847,$848,$849,$850,$851,$852,$853,$854,$855,$856,$857,$858,$859,$860,$861,$862,$863,$864,$865,$866,$867,$868,$869,$870,$871,$872,$873,$874,$875,$876,$877,$878,$879,$880,$881,$882,$883,$884,$885,$886,$887,$888,$889,$890,$891,$892,$893,$894,$895,$896,$897,$898,$899,$900,$901,$902,$903,$904,$905,$906,$907,$908,$909,$910,$911,$912,$913,$914,$915,$916,$917,$918,$919,$920,$921,$922,$923,$924,$925,$926,$927,$928,$929,$930,$931,$932,$933,$934,$935,$936,$937,$938,$939,$940,$941,$942,$943,$944,$945,$946,$947,$948,$949,$950,$951,$952,$953,$954,$955,$956,$957,$958,$959,$960,$961,$962,$963,$964,$965,$966,$967,$968,$969,$970,$971,$972,$973,$974,$975,$976,$977,$978,$979,$980,$981,$982,$983,$984,$985,$986,$987,$988,$989,$990,$991,$992,$993,$994,$995,$996,$997,$998,$999,$1000,$1001,$1002,$1003,$1004,$1005,$1006,$1007,$1008,$1009,$1010,$1011,$1012,$1013,$1014,$1015,$1016,$1017,$1018,$1019,$1020,$1021,$1022,$1023,$1024,$1025,$1026,$1027,$1028,$1029,$1030,$1031,$1032,$1033,$1034,$1035,$1036,$1037,$1038,$1039,$1040,$1041,$1042,$1043,$1044,$1045,$1046,$1047,$1048,$1049,$1050,$1051,$1052,$1053,$1054,$1055,$1056,$1057,$1058,$1059,$1060,$1061,$1062,$1063,$1064,$1065,$1066,$1067,$1068,$1069,$1070,$1071,$1072,$1073,$1074,$1075,$1076,$1077,$1078,$1079,$1080,$1081,$1082,$1083,$1084,$1085,$1086,$1087,$1088,$1089,$1090,$1091,$1092,$1093,$1094,$1095,$1096,$1097,$1098,$1099,$1100,$1101,$1102,$1103,$1104,$1105,$1106,$1107,$1108,$1109,$1110,$1111,$1112,$1113,$1114,$1115,$1116,$1117,$1118,$1119,$1120,$1121,$1122,$1123,$1124,$1125,$1126,$1127,$1128,$1129,$1130,$1131,$1132,$1133,$1134,$1135,$1136,$1137,$1138,$1139,$1140,$1141,$1142,$1143,$1144,$1145,$1146,$1147,$1148,$1149,$1150,$1151,$1152,$1153,$1154,$1155,$1156,$1157,$1158,$1159,$1160,$1161,$1162,$1163,$1164,$1165,$1166,$1167,$1168,$1169,$1170,$1171,$1172,$1173,$1174,$1175,$1176,$1177,$1178,$1179,$1180,$1181,$1182,$1183,$1184,$1185,$1186,$1187,$1188,$1189,$1190,$1191,$1192,$1193,$1194,$1195,$1196,$1197,$1198,$1199,$1200,$1201,$1202,$1203,$1204,$1205,$1206,$1207,$1208,$1209,$1210,$1211,$1212,$1213,$1214,$1215,$1216,$1217,$1218,$1219,$1220,$1221,$1222,$1223,$1224,$1225,$1226,$1227,$1228,$1229,$1230,$1231,$1232,$1233,$1234,$1235,$1236,$1237,$1238,$1239,$1240,$1241,$1242,$1243,$1244,$1245,$1246,$1247,$1248,$1249,$1250,$1251,$1252,$1253,$1254,$1255,$1256,$1257,$1258,$1259,$1260,$1261,$1262,$1263,$1264,$1265,$1266,$1267,$1268,$1269,$1270,$1271,$1272,$1273,$1274,$1275,$1276,$1277,$1278,$1279,$1280,$1281,$1282,$1283,$1284,$1285,$1286,$1287,$1288,$1289,$1290,$1291,$1292,$1293,$1294,$1295,$1296,$1297,$1298,$1299,$1300,$1301,$1302,$1303,$1304,$1305,$1306,$1307,$1308,$1309,$1310,$1311,$1312,$1313,$1314,$1315,$1316,$1317,$1318,$1319,$1320,$1321,$1322,$1323,$1324,$1325,$1326,$1327,$1328,$1329,$1330,$1331,$1332,$1333,$1334,$1335,$1336,$1337,$1338,$1339,$1340,$1341,$1342,$1343,$1344,$1345,$1346,$1347,$1348,$1349,$1350,$1351,$1352,$1353,$1354,$1355,$1356,$1357,$1358,$1359,$1360,$1361,$1362,$1363,$1364,$1365,$1366,$1367,$1368,$1369,$1370,$1371,$1372,$1373,$1374,$1375,$1376,$1377,$1378,$1379,$1380,$1381,$1382,$1383,$1384,$1385,$1386,$1387,$1388,$1389,$1390,$1391,$1392,$1393,$1394,$1395,$1396,$1397,$1398,$1399,$1400,$1401,$1402,$1403,$1404,$1405,$1406,$1407,$1408,$1409,$1410,$1411,$1412,$1413,$1414,$1415,$1416,$1417,$1418,$1419,$1420,$1421,$1422,$1423,$1424,$1425,$1426,$1427,$1428,$1429,$1430,$1431,$1432,$1433,$1434,$1435,$1436,$1437,$1438,$1439,$1440,$1441,$1442,$1443,$1444,$1445,$1446,$1447,$1448,$1449,$1450,$1451,$1452,$1453,$1454,$1455,$1456,$1457,$1458,$1459,$1460,$1461,$1462,$1463,$1464,$1465,$1466,$1467,$1468,$1469,$1470,$1471,$1472,$1473,$1474,$1475,$1476,$1477,$1478,$1479,$1480,$1481,$1482,$1483,$1484,$1485,$1486,$1487,$1488,$1489,$1490,$1491,$1492,$1493,$1494,$1495,$1496,$1497,$1498,$1499,$1500,$1501,$1502,$1503,$1504,$1505,$1506,$1507,$1508,$1509,$1510,$1511,$1512,$1513,$1514,$1515,$1516,$1517,$1518,$1519,$1520,$1521,$1522,$1523,$1524,$1525,$1526,$1527,$1528,$1529,$1530,$1531,$1532,$1533,$1534,$1535,$1536,$1537,$1538,$1539,$1540,$1541,$1542,$1543,$1544,$1545,$1546,$1547,$1548,$1549,$1550,$1551,$1552,$1553,$1554,$1555,$1556,$1557,$1558,$1559,$1560,$1561,$1562,$1563,$1564,$1565,$1566,$1567,$1568,$1569,$1570,$1571,$1572,$1573,$1574,$1575,$1576,$1577,$1578,$1579,$1580,$1581,$1582,$1583,$1584,$1585,$1586,$1587,$1588,$1589,$1590,$1591,$1592,$1593,$1594,$1595,$1596,$1597,$1598,$1599,$1600,$1601,$1602,$1603,$1604,$1605,$1606,$1607,$1608,$1609,$1610,$1611,$1612,$1613,$1614,$1615,$1616,$1617,$1618,$1619,$1620,$1621,$1622,$1623,$1624,$1625,$1626,$1627,$1628,$1629,$1630,$1631,$1632,$1633,$1634,$1635,$1636,$1637,$1638,$1639,$1640,$1641,$1642,$1643,$1644,$1645,$1646,$1647,$1648,$1649,$1650,$1651,$1652,$1653,$1654,$1655,$1656,$1657,$1658,$1659,$1660,$1661,$1662,$1663,$1664,$1665,$1666,$1667,$1668,$1669,$1670,$1671,$1672,$1673,$1674,$1675,$1676,$1677,$1678,$1679,$1680,$1681,$1682,$1683,$1684,$1685,$1686,$1687,$1688,$1689,$1690,$1691,$1692,$1693,$1694,$1695,$1696,$1697,$1698,$1699,$1700,$1701,$1702,$1703,$1704,$1705,$1706,$1707,$1708,$1709,$1710,$1711,$1712,$1713,$1714,$1715,$1716,$1717,$1718,$1719,$1720,$1721,$1722,$1723,$1724,$1725,$1726,$1727,$1728,$1729,$1730,$1731,$1732,$1733,$1734,$1735,$1736,$1737,$1738,$1739,$1740,$1741,$1742,$1743,$1744,$1745,$1746,$1747,$1748,$1749,$1750,$1751,$1752,$1753,$1754,$1755,$1756,$1757,$1758,$1759,$1760,$1761,$1762,$1763,$1764,$1765,$1766,$1767,$1768,$1769,$1770,$1771,$1772,$1773,$1774,$1775,$1776,$1777,$1778,$1779,$1780,$1781,$1782,$1783,$1784,$1785,$1786,$1787,$1788,$1789,$1790,$1791,$1792,$1793,$1794,$1795,$1796,$1797,$1798,$1799,$1800,$1801,$1802,$1803,$1804,$1805,$1806,$1807,$1808,$1809,$1810,$1811,$1812,$1813,$1814,$1815,$1816,$1817,$1818,$1819,$1820,$1821,$1822,$1823,$1824,$1825,$1826,$1827,$1828,$1829,$1830,$1831,$1832,$1833,$1834,$1835,$1836,$1837,$1838,$1839,$1840,$1841,$1842,$1843,$1844,$1845,$1846,$1847,$1848,$1849,$1850,$1851,$1852,$1853,$1854,$1855,$1856,$1857,$1858,$1859,$1860,$1861,$1862,$1863,$1864,$1865,$1866,$1867,$1868,$1869,$1870,$1871,$1872,$1873,$1874,$1875,$1876,$1877,$1878,$1879,$1880,$1881,$1882,$1883,$1884,$1885,$1886,$1887,$1888,$1889,$1890,$1891,$1892,$1893,$1894,$1895,$1896,$1897,$1898,$1899,$1900,$1901,$1902,$1903,$1904,$1905,$1906,$1907,$1908,$1909,$1910,$1911,$1912,$1913,$1914,$1915,$1916,$1917,$1918,$1919,$1920,$1921,$1922,$1923,$1924,$1925,$1926,$1927,$1928,$1929,$1930,$1931,$1932,$1933,$1934,$1935,$1936,$1937,$1938,$1939,$1940,$1941,$1942,$1943,$1944,$1945,$1946,$1947,$1948,$1949,$1950,$1951,$1952,$1953,$1954,$1955,$1956,$1957,$1958,$1959,$1960,$1961,$1962,$1963,$1964,$1965,$1966,$1967,$1968,$1969,$1970,$1971,$1972,$1973,$1974,$1975,$1976,$1977,$1978,$1979,$1980,$1981,$1982,$1983,$1984,$1985,$1986,$1987,$1988,$1989,$1990,$1991,$1992,$1993,$1994,$1995,$1996,$1997,$1998,$1999,$2000,$2001,$2002,$2003,$2004,$2005,$2006,$2007,$2008,$2009,$2010,$2011,$2012,$2013,$2014,$2015,$2016,$2017,$2018,$2019,$2020,$2021,$2022,$2023,$2024,$2025,$2026,$2027,$2028,$2029,$2030,$2031,$2032,$2033,$2034,$2035,$2036,$2037,$2038,$2039,$2040,$2041,$2042,$2043,$2044,$2045,$2046,$2047,$2048,$2049,$2050,$2051,$2052,$2053,$2054,$2055,$2056,$2057,$2058,$2059,$2060,$2061,$2062,$2063,$2064,$2065,$2066,$2067,$2068,$2069,$2070,$2071,$2072,$2073,$2074,$2075,$2076,$2077,$2078,$2079,$2080,$2081,$2082,$2083,$2084,$2085,$2086,$2087,$2088,$2089,$2090,$2091,$2092,$2093,$2094,$2095,$2096,$2097,$2098,$2099,$2100,$2101,$2102,$2103,$2104,$2105,$2106,$2107,$2108,$2109,$2110,$2111,$2112,$2113,$2114,$2115,$2116,$2117,$2118,$2119,$2120,$2121,$2122,$2123,$2124,$2125,$2126,$2127,$2128,$2129,$2130,$2131,$2132,$2133,$2134,$2135,$2136,$2137,$2138,$2139,$2140,$2141,$2142,$2143,$2144,$2145,$2146,$2147,$2148,$2149,$2150,$2151,$2152,$2153,$2154,$2155,$2156,$2157,$2158,$2159,$2160,$2161,$2162,$2163,$2164,$2165,$2166,$2167,$2168,$2169,$2170,$2171,$2172,$2173,$2174,$2175,$2176,$2177,$2178,$2179,$2180,$2181,$2182,$2183,$2184,$2185,$2186,$2187,$2188,$2189,$2190,$2191,$2192,$2193,$2194,$2195,$2196,$2197,$2198,$2199,$2200,$2201,$2202,$2203,$2204,$2205,$2206,$2207,$2208,$2209,$2210,$2211,$2212,$2213,$2214,$2215,$2216,$2217,$2218,$2219,$2220,$2221,$2222,$2223,$2224,$2225,$2226,$2227,$2228,$2229,$2230,$2231,$2232,$2233,$2234,$2235,$2236,$2237,$2238,$2239,$2240,$2241,$2242,$2243,$2244,$2245,$2246,$2247,$2248,$2249,$2250,$2251,$2252,$2253,$2254,$2255,$2256,$2257,$2258,$2259,$2260,$2261,$2262,$2263,$2264,$2265,$2266,$2267,$2268,$2269,$2270,$2271,$2272,$2273,$2274,$2275,$2276,$2277,$2278,$2279,$2280,$2281,$2282,$2283,$2284,$2285,$2286,$2287,$2288,$2289,$2290,$2291,$2292,$2293,$2294,$2295,$2296,$2297,$2298,$2299,$2300,$2301,$2302,$2303,$2304,$2305,$2306,$2307,$2308,$2309,$2310,$2311,$2312,$2313,$2314,$2315,$2316,$2317,$2318,$2319,$2320,$2321,$2322,$2323,$2324,$2325,$2326,$2327,$2328,$2329,$2330,$2331,$2332,$2333,$2334,$2335,$2336,$2337,$2338,$2339,$2340,$2341,$2342,$2343,$2344,$2345,$2346,$2347,$2348,$2349,$2350,$2351,$2352,$2353,$2354,$2355,$2356,$2357,$2358,$2359,$2360,$2361,$2362,$2363,$2364,$2365,$2366,$2367,$2368,$2369,$2370,$2371,$2372,$2373,$2374,$2375,$2376,$2377,$2378,$2379,$2380,$2381,$2382,$2383,$2384,$2385,$2386,$2387,$2388,$2389,$2390,$2391,$2392,$2393,$2394,$2395,$2396,$2397,$2398,$2399,$2400,$2401,$2402,$2403,$2404,$2405,$2406,$2407,$2408,$2409,$2410,$2411,$2412,$2413,$2414,$2415,$2416,$2417,$2418,$2419,$2420,$2421,$2422,$2423,$2424,$2425,$2426,$2427,$2428,$2429,$2430,$2431,$2432,$2433,$2434,$2435,$2436,$2437,$2438,$2439,$2440,$2441,$2442,$2443,$2444,$2445,$2446,$2447,$2448,$2449,$2450,$2451,$2452,$2453,$2454,$2455,$2456,$2457,$2458,$2459,$2460,$2461,$2462,$2463,$2464,$2465,$2466,$2467,$2468,$2469,$2470,$2471,$2472,$2473,$2474,$2475,$2476,$2477,$2478,$2479,$2480,$2481,$2482,$2483,$2484,$2485,$2486,$2487,$2488,$2489,$2490,$2491,$2492,$2493,$2494,$2495,$2496,$2497,$2498,$2499,$2500,$2501,$2502,$2503,$2504,$2505,$2506,$2507,$2508,$2509,$2510,$2511,$2512,$2513,$2514,$2515,$2516,$2517,$2518,$2519,$2520,$2521,$2522,$2523,$2524,$2525,$2526,$2527,$2528,$2529,$2530,$2531,$2532,$2533,$2534,$2535,$2536,$2537,$2538,$2539,$2540,$2541,$2542,$2543,$2544,$2545,$2546,$2547,$2548,$2549,$2550,$2551,$2552,$2553,$2554,$2555,$2556,$2557,$2558,$2559,$2560,$2561,$2562,$2563,$2564,$2565,$2566,$2567,$2568,$2569,$2570,$2571,$2572,$2573,$2574,$2575,$2576,$2577,$2578,$2579,$2580,$2581,$2582,$2583,$2584,$2585,$2586,$2587,$2588,$2589,$2590,$2591,$2592,$2593,$2594,$2595,$2596,$2597,$2598,$2599,$2600,$2601,$2602,$2603,$2604,$2605,$2606,$2607,$2608,$2609,$2610,$2611,$2612,$2613,$2614,$2615,$2616,$2617,$2618,$2619,$2620,$2621,$2622,$2623,$2624,$2625,$2626,$2627,$2628,$2629,$2630,$2631,$2632,$2633,$2634,$2635,$2636,$2637,$2638,$2639,$2640,$2641,$2642,$2643,$2644,$2645,$2646,$2647,$2648,$2649,$2650,$2651,$2652,$2653,$2654,$2655,$2656,$2657,$2658,$2659,$2660,$2661,$2662,$2663,$2664,$2665,$2666,$2667,$2668,$2669,$2670,$2671,$2672,$2673,$2674,$2675,$2676,$2677,$2678,$2679,$2680,$2681,$2682,$2683,$2684,$2685,$2686,$2687,$2688,$2689,$2690,$2691,$2692,$2693,$2694,$2695,$2696,$2697,$2698,$2699,$2700,$2701,$2702,$2703,$2704,$2705,$2706,$2707,$2708,$2709,$2710,$2711,$2712,$2713,$2714,$2715,$2716,$2717,$2718,$2719,$2720,$2721,$2722,$2723,$2724,$2725,$2726,$2727,$2728,$2729,$2730,$2731,$2732,$2733,$2734,$2735,$2736,$2737,$2738,$2739,$2740,$2741,$2742,$2743,$2744,$2745,$2746,$2747,$2748,$2749,$2750,$2751,$2752,$2753,$2754,$2755,$2756,$2757,$2758,$2759,$2760,$2761,$2762,$2763,$2764,$2765,$2766,$2767,$2768,$2769,$2770,$2771,$2772,$2773,$2774,$2775,$2776,$2777,$2778,$2779,$2780,$2781,$2782,$2783,$2784,$2785,$2786,$2787,$2788,$2789,$2790,$2791,$2792,$2793,$2794,$2795,$2796,$2797,$2798,$2799,$2800,$2801,$2802,$2803,$2804,$2805,$2806,$2807,$2808,$2809,$2810,$2811,$2812,$2813,$2814,$2815,$2816,$2817,$2818,$2819,$2820,$2821,$2822,$2823,$2824,$2825,$2826,$2827,$2828,$2829,$2830,$2831,$2832,$2833,$2834,$2835,$2836,$2837,$2838,$2839,$2840,$2841,$2842,$2843,$2844,$2845,$2846,$2847,$2848,$2849,$2850,$2851,$2852,$2853,$2854,$2855,$2856,$2857,$2858,$2859,$2860,$2861,$2862,$2863,$2864,$2865,$2866,$2867,$2868,$2869,$2870,$2871,$2872,$2873,$2874,$2875,$2876,$2877,$2878,$2879,$2880,$2881,$2882,$2883,$2884,$2885,$2886,$2887,$2888,$2889,$2890,$2891,$2892,$2893,$2894,$2895,$2896,$2897,$2898,$2899,$2900,$2901,$2902,$2903,$2904,$2905,$2906,$2907,$2908,$2909,$2910,$2911,$2912,$2913,$2914,$2915,$2916,$2917,$2918,$2919,$2920,$2921,$2922,$2923,$2924,$2925,$2926,$2927,$2928,$2929,$2930,$2931,$2932,$2933,$2934,$2935,$2936,$2937,$2938,$2939,$2940,$2941,$2942,$2943,$2944,$2945,$2946,$2947,$2948,$2949,$2950,$2951,$2952,$2953,$2954,$2955,$2956,$2957,$2958,$2959,$2960,$2961,$2962,$2963,$2964,$2965,$2966,$2967,$2968,$2969,$2970,$2971,$2972,$2973,$2974,$2975,$2976,$2977,$2978,$2979,$2980,$2981,$2982,$2983,$2984,$2985,$2986,$2987,$2988,$2989,$2990,$2991,$2992,$2993,$2994,$2995,$2996,$2997,$2998,$2999,$3000,$3001,$3002,$3003,$3004,$3005,$3006,$3007,$3008,$3009,$3010,$3011,$3012,$3013,$3014,$3015,$3016,$3017,$3018,$3019,$3020,$3021,$3022,$3023,$3024,$3025,$3026,$3027,$3028,$3029,$3030,$3031,$3032,$3033,$3034,$3035,$3036,$3037,$3038,$3039,$3040,$3041,$3042,$3043,$3044,$3045,$3046,$3047,$3048,$3049,$3050,$3051,$3052,$3053,$3054,$3055,$3056,$3057,$3058,$3059,$3060,$3061,$3062,$3063,$3064,$3065,$3066,$3067,$3068,$3069,$3070,$3071,$3072,$3073,$3074,$3075,$3076,$3077,$3078,$3079,$3080,$3081,$3082,$3083,$3084,$3085,$3086,$3087,$3088,$3089,$3090,$3091,$3092,$3093,$3094,$3095,$3096,$3097,$3098,$3099,$3100,$3101,$3102,$3103,$3104,$3105,$3106,$3107,$3108,$3109,$3110,$3111,$3112,$3113,$3114,$3115,$3116,$3117,$3118,$3119,$3120,$3121,$3122,$3123,$3124,$3125,$3126,$3127,$3128,$3129,$3130,$3131,$3132,$3133,$3134,$3135,$3136,$3137,$3138,$3139,$3140,$3141,$3142,$3143,$3144,$3145,$3146,$3147,$3148,$3149,$3150,$3151,$3152,$3153,$3154,$3155,$3156,$3157,$3158,$3159,$3160,$3161,$3162,$3163,$3164,$3165,$3166,$3167,$3168,$3169,$3170,$3171,$3172,$3173,$3174,$3175,$3176,$3177,$3178,$3179,$3180,$3181,$3182,$3183,$3184,$3185,$3186,$3187,$3188,$3189,$3190,$3191,$3192,$3193,$3194,$3195,$3196,$3197,$3198,$3199,$3200,$3201,$3202,$3203,$3204,$3205,$3206,$3207,$3208,$3209,$3210,$3211,$3212,$3213,$3214,$3215,$3216,$3217,$3218,$3219,$3220,$3221,$3222,$3223,$3224,$3225,$3226,$3227,$3228,$3229,$3230,$3231,$3232,$3233,$3234,$3235,$3236,$3237,$3238,$3239,$3240,$3241,$3242,$3243,$3244,$3245,$3246,$3247,$3248,$3249,$3250,$3251,$3252,$3253,$3254,$3255,$3256,$3257,$3258,$3259,$3260,$3261,$3262,$3263,$3264,$3265,$3266,$3267,$3268,$3269,$3270,$3271,$3272,$3273,$3274,$3275,$3276,$3277,$3278,$3279,$3280,$3281,$3282,$3283,$3284,$3285,$3286,$3287,$3288,$3289,$3290,$3291,$3292,$3293,$3294,$3295,$3296,$3297,$3298,$3299,$3300,$3301,$3302,$3303,$3304,$3305,$3306,$3307,$3308,$3309,$3310,$3311,$3312,$3313,$3314,$3315,$3316,$3317,$3318,$3319,$3320,$3321,$3322,$3323,$3324,$3325,$3326,$3327,$3328,$3329,$3330,$3331,$3332,$3333,$3334,$3335,$3336,$3337,$3338,$3339,$3340,$3341,$3342,$3343,$3344,$3345,$3346,$3347,$3348,$3349,$3350,$3351,$3352,$3353,$3354,$3355,$3356,$3357,$3358,$3359,$3360,$3361,$3362,$3363,$3364,$3365,$3366,$3367,$3368,$3369,$3370,$3371,$3372,$3373,$3374,$3375,$3376,$3377,$3378,$3379,$3380,$3381,$3382,$3383,$3384,$3385,$3386,$3387,$3388,$3389,$3390,$3391,$3392,$3393,$3394,$3395,$3396,$3397,$3398,$3399,$3400,$3401,$3402,$3403,$3404,$3405,$3406,$3407,$3408,$3409,$3410,$3411,$3412,$3413,$3414,$3415,$3416,$3417,$3418,$3419,$3420,$3421,$3422,$3423,$3424,$3425,$3426,$3427,$3428,$3429,$3430,$3431,$3432,$3433,$3434,$3435,$3436,$3437,$3438,$3439,$3440,$3441,$3442,$3443,$3444,$3445,$3446,$3447,$3448,$3449,$3450,$3451,$3452,$3453,$3454,$3455,$3456,$3457,$3458,$3459,$3460,$3461,$3462,$3463,$3464,$3465,$3466,$3467,$3468,$3469,$3470,$3471,$3472,$3473,$3474,$3475,$3476,$3477,$3478,$3479,$3480,$3481,$3482,$3483,$3484,$3485,$3486,$3487,$3488,$3489,$3490,$3491,$3492,$3493,$3494,$3495,$3496,$3497,$3498,$3499,$3500,$3501,$3502,$3503,$3504,$3505,$3506,$3507,$3508,$3509,$3510,$3511,$3512,$3513,$3514,$3515,$3516,$3517,$3518,$3519,$3520,$3521,$3522,$3523,$3524,$3525,$3526,$3527,$3528,$3529,$3530,$3531,$3532,$3533,$3534,$3535,$3536,$3537,$3538,$3539,$3540,$3541,$3542,$3543,$3544,$3545,$3546,$3547,$3548,$3549,$3550,$3551,$3552,$3553,$3554,$3555,$3556,$3557,$3558,$3559,$3560,$3561,$3562,$3563,$3564,$3565,$3566,$3567,$3568,$3569,$3570,$3571,$3572,$3573,$3574,$3575,$3576,$3577,$3578,$3579,$3580,$3581,$3582,$3583,$3584,$3585,$3586,$3587,$3588,$3589,$3590,$3591,$3592,$3593,$3594,$3595,$3596,$3597,$3598,$3599,$3600,$3601,$3602,$3603,$3604,$3605,$3606,$3607,$3608,$3609,$3610,$3611,$3612,$3613,$3614,$3615,$3616,$3617,$3618,$3619,$3620,$3621,$3622,$3623,$3624,$3625,$3626,$3627,$3628,$3629,$3630,$3631,$3632,$3633,$3634,$3635,$3636,$3637,$3638,$3639,$3640,$3641,$3642,$3643,$3644,$3645,$3646,$3647,$3648,$3649,$3650,$3651,$3652,$3653,$3654,$3655,$3656,$3657,$3658,$3659,$3660,$3661,$3662,$3663,$3664,$3665,$3666,$3667,$3668,$3669,$3670,$3671,$3672,$3673,$3674,$3675,$3676,$3677,$3678,$3679,$3680,$3681,$3682,$3683,$3684,$3685,$3686,$3687,$3688,$3689,$3690,$3691,$3692,$3693,$3694,$3695,$3696,$3697,$3698,$3699,$3700,$3701,$3702,$3703,$3704,$3705,$3706,$3707,$3708,$3709,$3710,$3711,$3712,$3713,$3714,$3715,$3716,$3717,$3718,$3719,$3720,$3721,$3722,$3723,$3724,$3725,$3726,$3727,$3728,$3729,$3730,$3731,$3732,$3733,$3734,$3735,$3736,$3737,$3738,$3739,$3740,$3741,$3742,$3743,$3744,$3745,$3746,$3747,$3748,$3749,$3750,$3751,$3752,$3753,$3754,$3755,$3756,$3757,$3758,$3759,$3760,$3761,$3762,$3763,$3764,$3765,$3766,$3767,$3768,$3769,$3770,$3771,$3772,$3773,$3774,$3775,$3776,$3777,$3778,$3779,$3780,$3781,$3782,$3783,$3784,$3785,$3786,$3787,$3788,$3789,$3790,$3791,$3792,$3793,$3794,$3795,$3796,$3797,$3798,$3799,$3800,$3801,$3802,$3803,$3804,$3805,$3806,$3807,$3808,$3809,$3810,$3811,$3812,$3813,$3814,$3815,$3816,$3817,$3818,$3819,$3820,$3821,$3822,$3823,$3824,$3825,$3826,$3827,$3828,$3829,$3830,$3831,$3832,$3833,$3834,$3835,$3836,$3837,$3838,$3839,$3840,$3841,$3842,$3843,$3844,$3845,$3846,$3847,$3848,$3849,$3850,$3851,$3852,$3853,$3854,$3855,$3856,$3857,$3858,$3859,$3860,$3861,$3862,$3863,$3864,$3865,$3866,$3867,$3868,$3869,$3870,$3871,$3872,$3873,$3874,$3875,$3876,$3877,$3878,$3879,$3880,$3881,$3882,$3883,$3884,$3885,$3886,$3887,$3888,$3889,$3890,$3891,$3892,$3893,$3894,$3895,$3896,$3897,$3898,$3899,$3900,$3901,$3902,$3903,$3904,$3905,$3906,$3907,$3908,$3909,$3910,$3911,$3912,$3913,$3914,$3915,$3916,$3917,$3918,$3919,$3920,$3921,$3922,$3923,$3924,$3925,$3926,$3927,$3928,$3929,$3930,$3931,$3932,$3933,$3934,$3935,$3936,$3937,$3938,$3939,$3940,$3941,$3942,$3943,$3944,$3945,$3946,$3947,$3948,$3949,$3950,$3951,$3952,$3953,$3954,$3955,$3956,$3957,$3958,$3959,$3960,$3961,$3962,$3963,$3964,$3965,$3966,$3967,$3968,$3969,$3970,$3971,$3972,$3973,$3974,$3975,$3976,$3977,$3978,$3979,$3980,$3981,$3982,$3983,$3984,$3985,$3986,$3987,$3988,$3989,$3990,$3991,$3992,$3993,$3994,$3995,$3996,$3997,$3998,$3999,$4000,$4001,$4002,$4003,$4004,$4005,$4006,$4007,$4008,$4009,$4010,$4011,$4012,$4013,$4014,$4015,$4016,$4017,$4018,$4019,$4020,$4021,$4022,$4023,$4024,$4025,$4026,$4027,$4028,$4029,$4030,$4031,$4032,$4033,$4034,$4035,$4036,$4037,$4038,$4039,$4040,$4041,$4042,$4043,$4044,$4045,$4046,$4047,$4048,$4049,$4050,$4051,$4052,$4053,$4054,$4055,$4056,$4057,$4058,$4059,$4060,$4061,$4062,$4063,$4064,$4065,$4066,$4067,$4068,$4069,$4070,$4071,$4072,$4073,$4074,$4075,$4076,$4077,$4078,$4079,$4080,$4081,$4082,$4083,$4084,$4085,$4086,$4087,$4088,$4089,$4090,$4091,$4092,$4093,$4094,$4095,$4096,$4097,$4098,$4099,$4100,$4101,$4102,$4103,$4104,$4105,$4106,$4107,$4108,$4109,$4110,$4111,$4112,$4113,$4114,$4115,$4116,$4117,$4118,$4119,$4120,$4121,$4122,$4123,$4124,$4125,$4126,$4127,$4128,$4129,$4130,$4131,$4132,$4133,$4134,$4135,$4136,$4137,$4138,$4139,$4140,$4141,$4142,$4143,$4144,$4145,$4146,$4147,$4148,$4149,$4150,$4151,$4152,$4153,$4154,$4155,$4156,$4157,$4158,$4159,$4160,$4161,$4162,$4163,$4164,$4165,$4166,$4167,$4168,$4169,$4170,$4171,$4172,$4173,$4174,$4175,$4176,$4177,$4178,$4179,$4180,$4181,$4182,$4183,$4184,$4185,$4186,$4187,$4188,$4189,$4190,$4191,$4192,$4193,$4194,$4195,$4196,$4197,$4198,$4199,$4200,$4201,$4202,$4203,$4204,$4205,$4206,$4207,$4208,$4209,$4210,$4211,$4212,$4213,$4214,$4215,$4216,$4217,$4218,$4219,$4220,$4221,$4222,$4223,$4224,$4225,$4226,$4227,$4228,$4229,$4230,$4231,$4232,$4233,$4234,$4235,$4236,$4237,$4238,$4239,$4240,$4241,$4242,$4243,$4244,$4245,$4246,$4247,$4248,$4249,$4250,$4251,$4252,$4253,$4254,$4255,$4256,$4257,$4258,$4259,$4260,$4261,$4262,$4263,$4264,$4265,$4266,$4267,$4268,$4269,$4270,$4271,$4272,$4273,$4274,$4275,$4276,$4277,$4278,$4279,$4280,$4281,$4282,$4283,$4284,$4285,$4286,$4287,$4288,$4289,$4290,$4291,$4292,$4293,$4294,$4295,$4296,$4297,$4298,$4299,$4300,$4301,$4302,$4303,$4304,$4305,$4306,$4307,$4308,$4309,$4310,$4311,$4312,$4313,$4314,$4315,$4316,$4317,$4318,$4319,$4320,$4321,$4322,$4323,$4324,$4325,$4326,$4327,$4328,$4329,$4330,$4331,$4332,$4333,$4334,$4335,$4336,$4337,$4338,$4339,$4340,$4341,$4342,$4343,$4344,$4345,$4346,$4347,$4348,$4349,$4350,$4351,$4352,$4353,$4354,$4355,$4356,$4357,$4358,$4359,$4360,$4361,$4362,$4363,$4364,$4365,$4366,$4367,$4368,$4369,$4370,$4371,$4372,$4373,$4374,$4375,$4376,$4377,$4378,$4379,$4380,$4381,$4382,$4383,$4384,$4385,$4386,$4387,$4388,$4389,$4390,$4391,$4392,$4393,$4394,$4395,$4396,$4397,$4398,$4399,$4400,$4401,$4402,$4403,$4404,$4405,$4406,$4407,$4408,$4409,$4410,$4411,$4412,$4413,$4414,$4415,$4416,$4417,$4418,$4419,$4420,$4421,$4422,$4423,$4424,$4425,$4426,$4427,$4428,$4429,$4430,$4431,$4432,$4433,$4434,$4435,$4436,$4437,$4438,$4439,$4440,$4441,$4442,$4443,$4444,$4445,$4446,$4447,$4448,$4449,$4450,$4451,$4452,$4453,$4454,$4455,$4456,$4457,$4458,$4459,$4460,$4461,$4462,$4463,$4464,$4465,$4466,$4467,$4468,$4469,$4470,$4471,$4472,$4473,$4474,$4475,$4476,$4477,$4478,$4479,$4480,$4481,$4482,$4483,$4484,$4485,$4486,$4487,$4488,$4489,$4490,$4491,$4492,$4493,$4494,$4495,$4496,$4497,$4498,$4499,$4500,$4501,$4502,$4503,$4504,$4505,$4506,$4507,$4508,$4509,$4510,$4511,$4512,$4513,$4514,$4515,$4516,$4517,$4518,$4519,$4520,$4521,$4522,$4523,$4524,$4525,$4526,$4527,$4528,$4529,$4530,$4531,$4532,$4533,$4534,$4535,$4536,$4537,$4538,$4539,$4540,$4541,$4542,$4543,$4544,$4545,$4546,$4547,$4548,$4549,$4550,$4551,$4552,$4553,$4554,$4555,$4556,$4557,$4558,$4559,$4560,$4561,$4562,$4563,$4564,$4565,$4566,$4567,$4568,$4569,$4570,$4571,$4572,$4573,$4574,$4575,$4576,$4577,$4578,$4579,$4580,$4581,$4582,$4583,$4584,$4585,$4586,$4587,$4588,$4589,$4590,$4591,$4592,$4593,$4594,$4595,$4596,$4597,$4598,$4599,$4600,$4601,$4602,$4603,$4604,$4605,$4606,$4607,$4608,$4609,$4610,$4611,$4612,$4613,$4614,$4615,$4616,$4617,$4618,$4619,$4620,$4621,$4622,$4623,$4624,$4625,$4626,$4627,$4628,$4629,$4630,$4631,$4632,$4633,$4634,$4635,$4636,$4637,$4638,$4639,$4640,$4641,$4642,$4643,$4644,$4645,$4646,$4647,$4648,$4649,$4650,$4651,$4652,$4653,$4654,$4655,$4656,$4657,$4658,$4659,$4660,$4661,$4662,$4663,$4664,$4665,$4666,$4667,$4668,$4669,$4670,$4671,$4672,$4673,$4674,$4675,$4676,$4677,$4678,$4679,$4680,$4681,$4682,$4683,$4684,$4685,$4686,$4687,$4688,$4689,$4690,$4691,$4692,$4693,$4694,$4695,$4696,$4697,$4698,$4699,$4700,$4701,$4702,$4703,$4704,$4705,$4706,$4707,$4708,$4709,$4710,$4711,$4712,$4713,$4714,$4715,$4716,$4717,$4718,$4719,$4720,$4721,$4722,$4723,$4724,$4725,$4726,$4727,$4728,$4729,$4730,$4731,$4732,$4733,$4734,$4735,$4736,$4737,$4738,$4739,$4740,$4741,$4742,$4743,$4744,$4745,$4746,$4747,$4748,$4749,$4750,$4751,$4752,$4753,$4754,$4755,$4756,$4757,$4758,$4759,$4760,$4761,$4762,$4763,$4764,$4765,$4766,$4767,$4768,$4769,$4770,$4771,$4772,$4773,$4774,$4775,$4776,$4777,$4778,$4779,$4780,$4781,$4782,$4783,$4784,$4785,$4786,$4787,$4788,$4789,$4790,$4791,$4792,$4793,$4794,$4795,$4796,$4797,$4798,$4799,$4800,$4801,$4802,$4803,$4804,$4805,$4806,$4807,$4808,$4809,$4810,$4811,$4812,$4813,$4814,$4815,$4816,$4817,$4818,$4819,$4820,$4821,$4822,$4823,$4824,$4825,$4826,$4827,$4828,$4829,$4830,$4831,$4832,$4833,$4834,$4835,$4836,$4837,$4838,$4839,$4840,$4841,$4842,$4843,$4844,$4845,$4846,$4847,$4848,$4849,$4850,$4851,$4852,$4853,$4854,$4855,$4856,$4857,$4858,$4859,$4860,$4861,$4862,$4863,$4864,$4865,$4866,$4867,$4868,$4869,$4870,$4871,$4872,$4873,$4874,$4875,$4876,$4877,$4878,$4879,$4880,$4881,$4882,$4883,$4884,$4885,$4886,$4887,$4888,$4889,$4890,$4891,$4892,$4893,$4894,$4895,$4896,$4897,$4898,$4899,$4900,$4901,$4902,$4903,$4904,$4905,$4906,$4907,$4908,$4909,$4910,$4911,$4912,$4913,$4914,$4915,$4916,$4917,$4918,$4919,$4920,$4921,$4922,$4923,$4924,$4925,$4926,$4927,$4928,$4929,$4930,$4931,$4932,$4933,$4934,$4935,$4936,$4937,$4938,$4939,$4940,$4941,$4942,$4943,$4944,$4945,$4946,$4947,$4948,$4949,$4950,$4951,$4952,$4953,$4954,$4955,$4956,$4957,$4958,$4959,$4960,$4961,$4962,$4963,$4964,$4965,$4966,$4967,$4968,$4969,$4970,$4971,$4972,$4973,$4974,$4975,$4976,$4977,$4978,$4979,$4980,$4981,$4982,$4983,$4984,$4985,$4986,$4987,$4988,$4989,$4990,$4991,$4992,$4993,$4994,$4995,$4996,$4997,$4998,$4999,$5000)
				and		u.account_status = 1
					and	u.security = 1
				group by 
					u.pk_user_id,
					u.fk_user_id,
					u2.pk_user_id,
					u2.lname,
					u.fname,
					u.lname
						, u.internalid
				order by lower(u.lname),",1091
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id not in ($1)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",1080
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5)
				or		""pk_SurveyUser_ID"" in ($6,$7,$8,$9,$10)
				order by",1068
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 157 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",1068
Application.models.SurveyTypes.MosaiqHl7SurveyExport.afterCreate( ) -> companyConfigQuery,"				select	mirth_url,
						mirth_oru_url,
						mosaiq_export_site_name
				from	company_config
				where	fk_company_id =",1061
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 89 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",1056
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 51 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",1052
Application.models.PatientPortalTemplate.savePatientForms( ) -> [insert],						insert	into,1042
Application.helpers.EmailHelper.getPasswordValidInterval( ) -> companyConfigQuery,"				select	password_expiration_hours
				from	company_config
				where	fk_company_id =",1028
/include/templates/_displayCompanyLogo.cfm -> getCompanyLogo,"		select	encode(logo::bytea, 'base64') as logo
		from	company_logo
		where	fk_company_id = $1 
			and fk_site_user_id is null
		order by pk_company_logo_id desc
		limit",1027
Application.helpers.SessionHelper.auditPatient( ) -> [insert],"				insert into audit_patient
						(fk_user_id,
						fk_audit_action_id
							, notes
							, session_id
						)
				values	($1,
						$2 
							, $3 
							, $4",1024
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 128 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",1024
Application.models.SurveyTag.getAllTagResources( ) -> tagResourcesQuery,"				select	st.pk_survey_tag_id as tag_id,
						st.tag_name as tag_name,
						st.tag_label as tag_label,
						st.tag_order as tag_order,
						str.pk_survey_tag_resource_id,
						str.fk_resource_id as fk_resource_id,
						str.resource_order as resource_order,
						str.resource_label as resource_label,
						str.single_instance_only as single_instance_only,
						sa.physician_read,
						sa.physician_edit,
						sa.site_read,
						sa.site_edit,
						t.header_version
				from	survey_tags st
				join survey_tag_resource str on str.fk_survey_tag_id = st.pk_survey_tag_id
				join survey_access sa on sa.fk_company_id = st.fk_company_id
					and sa.fk_resource_id = str.fk_resource_id
						and	(sa.physician_read is true or sa.physician_edit is true)
				join survey_templates_access sta on sta.fk_company_id = st.fk_company_id
					and sta.fk_resource_id = str.fk_resource_id
				join survey_templates t on t.pk_survey_template_id = sta.fk_survey_template_id
					and t.fk_survey_template_type_id = 2
				left outer join treatment_arm ta on ta.pk_treatment_arm_id = str.fk_treatment_arm_id
				where 	st.fk_company_id = $1
				and		((st.fk_study_id is null)
							or (st.fk_study_id = $2)
						)
					union
					select	st.pk_survey_tag_id as tag_id,
							st.tag_name as tag_name,
							st.tag_label as tag_label,
							st.tag_order as tag_order,
							str.pk_survey_tag_resource_id,
							str.fk_resource_id as fk_resource_id,
							str.resource_order as resource_order,
							str.resource_label as resource_label,
							str.single_instance_only as single_instance_only,
							true as physician_read,
							true as physician_edit,
							false as site_read,
							false as site_edit,
							t.header_version
					from	survey_tags st
					join survey_tag_resource str on str.fk_survey_tag_id = st.pk_survey_tag_id and str.fk_resource_id = 0
					join survey_templates_access sta on sta.fk_company_id = st.fk_company_id
						and sta.fk_resource_id = str.fk_resource_id
					join survey_templates t on t.pk_survey_template_id = sta.fk_survey_template_id
						and t.fk_survey_template_type_id = 2
					where 	st.fk_company_id = $3
					and		((st.fk_study_id is null)
								or (st.fk_study_id = $4)
							)
					union
					select	st2.pk_survey_tag_id as tag_id,
							stu.tag_name as tag_name,
							stu.tag_label as tag_label,
							stu.tag_order as tag_order,
							str2.pk_survey_tag_resource_id,
							str2.fk_resource_id as fk_resource_id,
							str2.resource_order as resource_order,
							str2.resource_label as resource_label,
							str2.single_instance_only as single_instance_only,
							sa.physician_read,
							sa.physician_edit,
							sa.site_read,
							sa.site_edit,
							t.header_version
					from	survey_tag_user stu
					join survey_tags st2 on st2.pk_survey_tag_id = stu.fk_survey_tag_id
						and st2.fk_company_id = $5
					join survey_tag_resource str2 on str2.fk_survey_tag_id = st2.pk_survey_tag_id
					join survey_templates_access sta on sta.fk_company_id = st2.fk_company_id
						and sta.fk_resource_id = str2.fk_resource_id
					join survey_templates t on t.pk_survey_template_id = sta.fk_survey_template_id
						and t.fk_survey_template_type_id = 2
					left outer join treatment_arm ta on ta.pk_treatment_arm_id = str2.fk_treatment_arm_id
					join survey_access sa on sa.fk_company_id = st2.fk_company_id
						and sa.fk_resource_id = str2.fk_resource_id
						and	(sa.physician_read is true or sa.physician_edit is true)
					where	stu.fk_user_id = $6
					union
					select	st2.pk_survey_tag_id as tag_id,
							stu.tag_name as tag_name,
							stu.tag_label as tag_label,
							stu.tag_order as tag_order,
							str2.pk_survey_tag_resource_id,
							str2.fk_resource_id as fk_resource_id,
							str2.resource_order as resource_order,
							str2.resource_label as resource_label,
							str2.single_instance_only as single_instance_only,
							true as physician_read,
							true as physician_edit,
							false as site_read,
							false as site_edit,
							null as header_version
					from	survey_tag_user stu
					join survey_tags st2 on st2.pk_survey_tag_id = stu.fk_survey_tag_id
						and st2.fk_company_id = $7
					join survey_tag_resource str2 on str2.fk_survey_tag_id = st2.pk_survey_tag_id 
						and str2.fk_resource_id = 0
					where	stu.fk_user_id = $8 
				order by",1010
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 148 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",1008
Application.models.SurveyUser.head( ) -> docTypeQuery,"				select 	doc_type
				from	hl7_doc_type
				where	fk_company_id = $1
				and		fk_resource_id =",1007
Application.models.PatientPortalTemplate.syncTemplateStartDates( ) -> getAssociatedUser,"					select	u.pk_user_id
					from	identity_to_account_map i1
					join identity_to_account_map i2 on i2.identity_id = i1.identity_id and i2.fk_user_id <> i1.fk_user_id
					join users u on u.pk_user_id = i2.fk_user_id 
						and u.security = 1 
						and u.account_status = 1
						and u.fk_company_id = $1
					where	i1.fk_user_id =",999
Application.models.PatientPortalTemplate.getTemplate( ) -> templateShareQuery,"				select	fk_user_id
				from	patient_portal_template_share
				where	fk_patient_portal_template_id =",990
Application.models.PatientPortalTemplate.getTemplate( ) -> templateQuery,"				select	default_template,
						assign_on_patient_create,
						share_template
				from	patient_portal_templates
				where 	pk_patient_portal_template_id =",990
Application.models.PatientPortalTemplate.getTemplate( ) -> templateAssignmentQuery,"				select	fk_user_id
				from	patient_portal_template_assignment
				where	fk_patient_portal_template_id =",990
patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"				select	ut.pk_user_todo_id, t.name, ut.display_position 
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
					and uscs.fk_completion_status_id <= 2
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
						and sa.patient_edit = true
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and cast(ut.active_start_date as date) <= $4 
						and (
								cast(ut.active_end_date	as date) + interval '1 day'	> $5 
								or ut.active_end_date is null
							)
						and ut.active = true
				order by t.name, 
						ut.active",970
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4)
							or revision_fk_surveyuser_id in ($5,$6,$7,$8)
					order by",965
Application.models.ClinicalForm.getClinicalFormTagCount( ) -> tagCountQuery,"				select 	count(*) as records,
						fk_survey_tag_resource_id
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9)
				and 	revision_type = 'new'
				and		fk_survey_tag_resource_id is not null
				and		fk_survey_tag_resource_id <> 0
				group by",962
Application.models.ClinicalForm.getClinicalFormRecordCount( ) -> formsCountQuery,"				select	count(*) as records,
						""fk_Resource_ID""
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9)
				and 	""revision_type"" = 'new'
					and	(fk_survey_tag_resource_id is null or fk_survey_tag_resource_id = 0)
				group by",962
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2)
							or revision_fk_surveyuser_id in ($3,$4)
					order by",959
Application.models.ClinicalForm.getClinicalFormRecordCount( ) -> formsCountQuery,"				select	count(*) as records,
						""fk_Resource_ID""
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39)
				and 	""revision_type"" = 'new'
					and	(fk_survey_tag_resource_id is null or fk_survey_tag_resource_id = 0)
				group by",956
Application.models.ClinicalForm.getClinicalFormTagCount( ) -> tagCountQuery,"				select 	count(*) as records,
						fk_survey_tag_resource_id
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39)
				and 	revision_type = 'new'
				and		fk_survey_tag_resource_id is not null
				and		fk_survey_tag_resource_id <> 0
				group by",956
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 157 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",948
Application.lib.FileUtil.logFileAction( ) -> fileActionQuery,"						select	""pk_fileManagerLogAction_ID""
						from	""fileManagerLogAction""
						where	lower(""action"") =",942
Application.lib.FileUtil.logFileAction( ) -> [insert],					insert	into,942
Application.lib.FileUtil.logFileAction( ) -> ownerQuery,"					select	fmu.""fk_VT_ID"",
							fmi.""Name"",
							fmi.""fileExtension"",
							fmi.""isDirectory"",
							u.security
					from	""fileManagerACL"" fma
					join ""fileManagerUser"" fmu on fmu.""pk_fileManagerUser_ID"" = fma.""fk_fileManagerUser_ID""
					join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
					join users u on u.pk_user_id = fmu.""fk_VT_ID""
					where	fma.""pk_fileManagerACL_ID"" =",942
Application.models.SurveyUser.updateInPlace( ) -> [update],"				update ""SurveyUser""
				set		updated_at = now()
				where 	""pk_SurveyUser_ID"" =",935
Application.models.SurveyUser.updateInPlace( ) -> surveyUserQuery,"				select	""fk_User_ID_Self"",
						fk_survey_tag_resource_id
				from	""SurveyUser""
				where	""pk_SurveyUser_ID"" =",935
Application.lib.FileUtil.getFileInfoByAcl( ) -> fileQuery,"	            select	fma.""pk_fileManagerACL_ID"",
						fma.""fk_fileManagerUser_ID"",
						fmi.""pk_fileManagerItem_ID"",
						fmi.""fk_fileManagerItem_ID"",
						fmi.""Name"",
						fmi.""isDirectory"",
						fmi.""fileExtension"",
						fmi.""Info"",
						fmi.event,
						fmi.author,
						fmi.display,
						fmi.""DateAdded"",
						fmi.""DateGenerated"",
						fmi.""DateModified"",
						fmi.""patientReadOnly"",
						fmi.link_text,
						fmi.link_url,
						fmd.""pk_fileManagerData_ID"",
						fmd.""MD5"",
						fmd.""Size"",
						fmd.""Charset"",
						fmd.file_uuid
	            from	""fileManagerACL"" as fma
	            join ""fileManagerItem"" as fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
	            left outer join ""fileManagerData"" fmd on fmd.""pk_fileManagerData_ID"" = fmi.""fk_fileManagerData_ID""
	            where	fma.""pk_fileManagerACL_ID"" = $1
	            and		fma.is_deleted =",934
Application.models.SurveyUser.updateInPlace( ) -> userQuery,"					select	fk_company_id
					from	users
					where	pk_user_id =",933
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '3 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17,$18)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date desc, thread_state_order 
						limit 0 
						offset",917
Application.models.PatientPortalTemplate.getPortalTemplatesByCompany( ) -> portalTemplatesQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.fk_user_id,
						ppt.fk_company_id,
						ppt.modified_by_fk_user_id,
						ppt.name,
						ppt.start_date,
						ppt.end_date,
						ppt.default_template,
						ppt.share_template,
						ppt.hide_template,
						ppt.assign_on_patient_create,
						u.fname,
						u.lname,
						u.login
				from	patient_portal_templates ppt
				join	users u on u.pk_user_id = ppt.fk_user_id
				where	ppt.fk_company_id = $1 
					and	ppt.hide_template = false
				order by name, lname,",900
Application.models.SurveyUser.getPhysicianName( ) -> surveyUserQuery,"				select	max(""pk_SurveyUser_ID"") as ""pk_SurveyUser_ID""
				from	""SurveyUser""
				where	""fk_Resource_ID"" = $1
				and		""fk_User_ID_Self"" =",894
Application.models.SurveyTypes.MosaiqHl7SurveyExport.afterCreate( ) -> docTypeQuery,"				select 	doc_type
				from	hl7_doc_type
				where	fk_company_id = $1
				and		fk_resource_id =",894
Application.models.SurveyTypes.MosaiqHl7SurveyExport.afterCreate( ) -> configQuery,"				select	json_mapping
				from	mosaiq_survey_mapping
				where	fk_company_id = $1
				and		fk_resource_id =",894
Application.models.SurveyTypes.MosaiqHl7SurveyExport.afterCreate( ) -> patientQuery,"				select	u.fname,
						u.lname,
						u.mname,
						u.internalid,
						u.gender,
						u.dob,
						now() as ts,
						case
							when c.time_zone_location is null
							then 'America/Los_Angeles'
							else c.time_zone_location
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				where	u.pk_user_id =",894
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 148 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",892
Application.models.ContentManager.getCompanyName( ) -> nameQuery,"				select	name
				from	companies
				where	pk_company_id =",890
Application.models.SurveyUserSolr.dump( ) -> surveyAccessQuery,"					select	patient_edit,
							site_edit
					from	survey_access
					where	fk_company_id = $1
					and		fk_resource_id =",888
Application.models.SurveyUserSolr.dump( ) -> templatesQuery,"						select 	ppt.name as template_name,
								uscs.fk_user_id,
								uscs.fk_resource_id,
								uscs.fk_surveyuser_id
						from 	todos t
						join user_todos ut on ut.fk_todo_id = t.pk_todo_id
						join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = ut.fk_patient_portal_template_id
						join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
							and uscs.fk_surveyuser_id is not null
						where 	t.fk_company_id = $1
						and 	t.fk_resource_id =",886
Application.models.SurveyUserSolr.dump( ) -> clinicalFormQuery,"					select	patient_edit
					from	survey_access
					where	fk_company_id = $1
					and		fk_resource_id =",886
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
								, ""DateCompleted""
							, submitter_id
								, visit
								, fk_login_mode_id
								, fk_survey_tag_resource_id
								, completion_seconds
								, completion_seconds_total
							)
					values ( $1,
							$2,
							$3,
							$4 
								, $5 
							, $6 
								, $7 
								, $8 
								, $9 
								, $10 
								, $11 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",871
Application.models.SurveyUserSolr.getCustomValues( ) -> answersQuery,"					select	pk_survey_export_parsed_answer_id,
							option_id,
							answer_value,
							custom_value
					from	survey_export_parsed_answers
					where	fk_company_id = $1
					and		fk_resource_id = $2
					and		custom_value is not null
					and		custom_value <> ''
					order by",866
Application.models.SurveyUserSolr.getExpandedCheckboxes( ) -> setupQuery,"					select	seq.pk_survey_export_question_id,
							seq.option_id,
							sepa.pk_survey_export_parsed_answer_id,
							sepa.answer_value,
							sepa.custom_value
					from	survey_export_questions seq
					join survey_export_parsed_answers sepa on sepa.fk_company_id = seq.fk_company_id
						and sepa.fk_resource_id = seq.fk_resource_id
						and sepa.option_id = seq.option_id
					where	seq.fk_company_id = $1
					and		seq.fk_resource_id = $2
					and		seq.expand_checkboxes = true
					order by",866
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_subject_id ilike $1 
						and rs.study_id not in ($2)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $3
					and     u.security = 1
						and u.account_status not in",864
Application.lib.FileUtil.logFileAction( ) -> userQuery,"						select	security
						from	users
						where	pk_user_id =",856
Application.models.PatientPortalTemplate.savePatientEducationalMedia( ) -> currentItemsQuery,"				select	pk_user_edu_file_id
				from	user_edu_files
				where	fk_user_id = $1
				and		active =",854
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> currentItemsQuery,"				select	pk_user_calendar_template_id,
						active_start_date
				from	user_calendar_templates
				where	fk_user_id = $1
				and		active =",854
Application.models.PatientPortalTemplate.savePatientForms( ) -> currentItemsQuery,"				select	pk_user_todo_id,
						fk_patient_portal_template_id
				from	user_todos
				where	fk_user_id = $1
				and		active =",854
Application.models.PatientPortalTemplate.savePatientTemplate( ) -> currentItemsQuery,"				select	pk_user_portal_template_id,
						fk_patient_portal_template_id,
						active_start_date
				from	user_portal_templates
				where	fk_user_id = $1
				and		active =",854
Application.models.SurveyTypes.MosaiqHl7SurveyExport.getInstance( ) -> surveyUserQuery,"				select	""fk_Resource_ID"",
						""fk_User_ID_Self"",
						revision_fk_surveyuser_id
				from	""SurveyUser""
				where	""pk_SurveyUser_ID"" =",852
Application.models.SurveyTypes.MosaiqHl7SurveyExport.getInstance( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID""
				from	""SurveyUser""
				where	""fk_Resource_ID"" = $1
				and		""fk_User_ID_Self"" = $2
				and		revision_type = 'new'
				order by",852
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_subject_id ilike $1 
						and rs.study_id not in ($2)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $3
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",850
Application.models.PatientPortalTemplate.savePatientTemplate( ) -> currentItemsQuery,"					select	pk_user_portal_template_id,
							fk_patient_portal_template_id,
							active_start_date
					from	user_portal_templates
					where	fk_user_id = $1
					and		active =",846
Application.models.SurveyUser.head( ) -> physicianQuery,"					select	internalid,
							fname,
							lname
					from 	users
					where 	pk_user_id =",846
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
								, revision_type
								, revision_fk_surveyuser_id
								, ""DateCompleted""
							, submitter_id
								, visit
								, fk_login_mode_id
								, fk_survey_tag_resource_id
								, completion_seconds
								, completion_seconds_total
							)
					values ( $1,
							$2,
							$3,
							$4 
								, 'update'
								, $5 
								, $6 
							, $7 
								, $8 
								, $9 
								, $10 
								, $11 
								, $12 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",843
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike",824
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8)
				or		""pk_SurveyUser_ID"" in ($9,$10,$11,$12,$13,$14,$15,$16)
				order by",818
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 130 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",812
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        uu.ufpti_no,
	                        uu.shands_no,
	                        u.fname,
	                        u.lname,
	                        u.mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
	                left join users_ufpti uu on uu.fk_user_id = u.pk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        uu.ufpti_no,
	                        uu.shands_no,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",807
patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"				select	ut.pk_user_todo_id 
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
					and uscs.fk_completion_status_id = 1
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
						and sa.patient_edit = true
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and cast(ut.active_start_date as date) <= $4 
						and (
								cast(ut.active_end_date	as date) + interval '1 day'	> $5 
								or ut.active_end_date is null
							)
						and ut.active = true
				order by t.name, 
						ut.active",804
/physician/_reset.cfm -> [insert],"
				insert into userslog 
						(fk_users_id, 
						ts, 
						ipaddy, 
						action)
				values ($1, 
						now(), 
						$2,",793
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",790
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
	                left join users_ufpti uu on uu.fk_user_id = u.pk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in",789
Application.helpers.SessionHelper.auditPatient( ) -> [insert],"				insert into audit_patient
						(fk_user_id,
						fk_audit_action_id
							, fk_app_id
							, session_id
							, link_id
						)
				values	($1,
						$2 
							, $3 
							, $4 
							, $5",787
,,783
Application.models.PatientPortalTemplate.savePatientTemplate( ) -> [insert],						insert	into,766
Application.lib.scheduled_scripts.TaskSurveyDocsDelete.run( ) -> staleQuery,"				select	pk_tempsurveyfixindex_id,
						suid
				from 	tempsurveyfixindex
				where 	storetype = 2
				order by suid
				limit",763
Application.lib.scheduled_scripts.TaskSurveyDocsInsert.run( ) -> missingQuery,"				select	pk_tempsurveyfixindex_id,
						fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				from 	tempsurveyfixindex
				where 	storetype = 1
				order by fk_company_id,
						fk_resource_id,
						fk_user_id, 
						suid
				limit",763
Application.helpers.SessionHelper.auditPatient( ) -> [insert],"				insert into audit_patient
						(fk_user_id,
						fk_audit_action_id
							, notes
							, fk_app_id
							, session_id
						)
				values	($1,
						$2 
							, $3 
							, $4 
							, $5",755
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17,$18)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 0 
						offset",742
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id not in ($1)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id =",735
Application.lib.FileUtil.createPatientFoldersfromArray( ) -> [insert],"					insert	into ""fileManagerACL""
							(""fk_fileManagerUser_ID"",
				    		""fk_fileManagerItem_ID"",
				    		""fk_fileManagerPermissionType_ID"")
					values	($1,
					    	$2,
					   ",735
Application.models.Study.createOrAssignStudy( ) -> studyQuery,"	                select	pk_study_id 
					from 	study 
					where	name = $1 
	                and 	fk_company_id =",730
Application.models.Study.createOrAssignStudy( ) -> userStudyQuery,"	                        select	count(*) as reccount 
							from 	users_studies
							join study on (users_studies.study_id = study.pk_study_id)
	                        where 	study.name = $1
	                        and 	user_id = $2 
	                        and 	study_subject_id =",730
Application.models.Study.createOrAssignStudy( ) -> studyQuery,"	            select	max(0) as pk_study_id 
				where 	0 =",730
Application.lib.scheduled_scripts.TaskUpdateStudyFromMosaiq.run( ) -> patientQuery,"								select	pk_user_id
								from	users
								where	fk_company_id = $1
								and		internalid = $2
								and		security = 1
								and		account_status =",730
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45)
							or revision_fk_surveyuser_id in ($46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90)
					order by",727
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 130 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",708
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fk_user_id"" =
									$2,
									""fname"" =
									$3,
									""lname"" =
									$4,
									""phone"" =
									$5,
									""datecreated"" =
									$6,
									""dateupdated"" =
									$7,
									""active"" =
									$8,
									""password"" =
									$9,
									""dob"" =
									$10,
									""internalid"" =
									$11,
									""reminderemail"" =
									$12,
									""mayreceiveemailreminders"" =
									$13,
									""agreedtotermsandconditions"" =
									$14,
									""has_changed_password"" =
									$15,
									""security"" =
									$16,
									""allow_self_reg"" =
									$17,
									""self_reg_capable"" =
									$18,
									""show_all_templates"" =
									$19,
									""import"" =
									$20,
									""gender"" =
									$21,
									""account_status"" =
									$22,
									""is_test_user"" =
									$23,
									""identity_validated"" =
									$24,
									""is_site_user"" =
									$25,
									""password_valid_until"" =
									$26,
									""may_receive_sms_notifications"" =
									$27,
									""is_deceased"" =
									$28,
									""is_default_user"" =
									$29,
									""is_alert_sender"" =
									$30,
									""reg_form_create"" =
									$31
					WHERE ""pk_user_id"" =",679
Application.models.Messaging.getUsers( ) -> usersQuery,"				select	distinct u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.email,
						u.mayreceiveemailreminders,
						u.security
				from	users u
				where	u.pk_user_id in ($1)
				and 	u.account_status =",675
Application.models.FormsLibrary.updateTemplates( ) -> [update],"							update	survey_templates
							set		template_inner_html = $1,
									ts_file_write = now()
							where	pk_survey_template_id =",672
Application.models.FormsLibrary.updateTimepoints( ) -> timepointQuery,"						select	distinct stst.survey_timepoint_id,
								st.named_interval
						from	survey_templates_access sta
						join survey_timepoint_survey_template stst on stst.survey_template_id = sta.fk_survey_template_id
						join survey_timepoints st on st.id = stst.survey_timepoint_id
						where	sta.fk_company_id = $1
						and		sta.fk_resource_id =",672
Application.models.FormsLibrary.updateTimepoints( ) -> [update],"							update	survey_timepoints
							set		named_interval = $1,
									timepoint_interval = $2::interval
							where	id =",672
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in",669
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 124 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",656
Application.models.PatientPortalTemplate.syncTemplateStartDates( ) -> getAssociatedTemplates,"				select	ppt.pk_patient_portal_template_id,
						ppt.fk_company_id
				from	patient_portal_template_association ppta1
				join patient_portal_template_association ppta2 on ppta2.association_uuid = ppta1.association_uuid
					and ppta2.fk_patient_portal_template_id <> ppta1.fk_patient_portal_template_id
				join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = ppta2.fk_patient_portal_template_id
				where	ppta1.fk_patient_portal_template_id =",653
Application.models.Survey.getSurveyQuestionsAndOptions( ) -> questionsQuery,"					WITH schema_result as (
						select	survey_id,question_id,question_language,question_label,question_label as label,option_id,option_language,question_tags
						from 	resource_survey_by_survey_id($1::bigint)
					)
	                select	survey_id,question_id,question_language,label,option_id,option_language,question_tags
	                from 	schema_result
						order by question_id",649
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset",643
Application.models.UserActivityLog.logPasswordChange( ) -> [insert],				insert into,642
Application.models.FormDataExportSetup.getQuestions( ) -> questionsQuery,"				select	pk_survey_export_question_id,
						option_id,
						option_label,
						expand_checkboxes
				from	survey_export_questions
				where	fk_company_id = $1
				and		fk_resource_id = $2
				order by",639
Application.models.FormDataExportSetup.getQuestions( ) -> elementsQuery,"				select	option_id,
						html_element
				from	survey_export_parsed_questions
				where	fk_company_id = $1
				and		fk_resource_id =",639
Application.models.FormDataExportSetup.getQuestions( ) -> answersQuery,"				select	pk_survey_export_parsed_answer_id,
						option_id,
						answer_value,
						answer_text,
						custom_value
				from	survey_export_parsed_answers
				where	fk_company_id = $1
				and		fk_resource_id = $2
				order by",639
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1)
							or revision_fk_surveyuser_id in ($2)
					order by",634
Application.models.PatientPortalTemplate.getForms( ) -> formsQuery,"				select	t.pk_todo_id,
						t.name,
						t.fk_resource_id
				from 	todos t
				join survey_access sa on sa.fk_resource_id = t.fk_resource_id
				  	AND sa.fk_company_id = t.fk_company_id
					AND sa.patient_read = true
				join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					AND sta.fk_company_id = $1
				join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
				  	AND st.fk_survey_template_type_id = 2
				where	t.fk_company_id = $2
				order by",620
Application.models.PatientPortalTemplate.getEducationalMedia( ) -> eduMediaQuery,"				select	fmi.""pk_fileManagerACL_ID"", 
						fmi.""Name"",
						fmi.""fileExtension"" as file_ext
				from	filemanager_ed_from_hc_user_id($1) as fmi
				where	fmi.""isDirectory"" = false
				order by",620
Application.models.PatientPortalTemplate.getCalendarTemplates( ) -> templatesQuery,"				select	pk_calendartemplate_id,
						name,
						description,
						datecreated,
						datemodified
				from 	calendartemplate
				where 	fk_user_id = $1
				and 	is_calendar_active = true
				order by",620
Application.models.Company.getCompany( ) -> companyQuery,"				select	name 
				from	companies
				where	pk_company_id =",611
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
							or revision_fk_surveyuser_id in ($13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24)
					order by",602
Application.models.PatientPortalTemplate.savePatientEducationalMedia( ) -> [update],"						update	user_edu_files
						set		name = $1,
								active_start_date = $2,
								active_end_date = $3,
								display_position = $4,
								modified_by_fk_user_id = $5,
								modified_at = now()
						where	pk_user_edu_file_id =",597
Application.models.Survey.saveParsedSurvey( ) -> [insert],							insert into,592
Application.models.SessionInfo.getSessionInfo( ) -> sessionInfoQuery,"				select	session_info_json
				from	session_info
				where	session_token =",589
Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"				select	u.fname,
						u.lname,
						u.case_no,
						t.name,
						l.pk_rave_export_log_id,
						l.error_message
				from	rave_export_log l
				join users u on u.pk_user_id = l.fk_user_id
				left outer join user_todos ut on ut.pk_user_todo_id = l.fk_user_todo_id
				left outer join todos t on t.pk_todo_id = ut.fk_todo_id
				where	l.fk_company_id = $1
				and		l.is_processed = false
				and		l.survey_outdated = false
				order by",576
Application.lib.scheduled_scripts.TaskRaveExport.run( ) -> logQuery,"				select	pk_rave_export_log_id,
						fk_user_id,
						fk_surveyuser_id,
						fk_resource_id,
						submitter_fk_user_id,
						fk_user_todo_id
				from	rave_export_log
				where	fk_company_id = $1
				and		is_processed = false
				and		survey_outdated = false
				order by pk_rave_export_log_id
				limit",576
Application.models.Messaging.getPatientSiteUserId( ) -> siteUserQuery,"				select	u.fk_user_id,
						u2.sudo_as_fk_user_id
				from	users u
				left outer join users u2 on u2.pk_user_id = u.fk_user_id
				where	u.pk_user_id = $1
				and		u.account_status = 1 
				and		u.security =",576
Application.models.Survey.getSurveyQuestionsAndOptions( ) -> questionsQuery,"					WITH schema_result as (
						select	survey_id,question_id,question_language,question_label,question_label as label,option_id,option_language,question_tags
						from 	resource_survey_by_survey_id($1::bigint)
					)
	                select	survey_id,question_id,question_language,label,option_id,option_language,question_tags
	                from 	schema_result
						where  question_tags ~* ',encounter_date$' or question_tags ~* '^encounter_date,' or question_tags ~* ',encounter_date,' or question_tags ~* '^encounter_date$' 
						order by option_id",572
Application.models.PatientPortalTemplate.getPatientEducationalMedia( ) -> eduMediaQuery,"				select	uef.pk_user_edu_file_id,
						uef.""fk_fileManagerACL_ID"",
						uef.active_start_date,
						uef.active_end_date,
						uef.name as user_file_name,
						fmi.""Name"" as file_name,
						fmi.""fileExtension"" as file_ext,
						ppt.name as template_name,
						ppt.pk_patient_portal_template_id,
						pptem.active_start_interval,
						pptem.active_end_interval
				from	users u
				join user_edu_files uef on uef.fk_user_id = u.pk_user_id
					and uef.active = true
				join ""fileManagerACL"" fma on fma.""pk_fileManagerACL_ID"" = uef.""fk_fileManagerACL_ID""
				join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = uef.fk_patient_portal_template_id
				left outer join patient_portal_template_education_material pptem on pptem.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptem.""fk_fileManagerACL_ID"" = uef.""fk_fileManagerACL_ID""
				where	u.fk_company_id = $1
				and		u.pk_user_id = $2
				and		u.security = 1
				and		u.account_status = 1
				order by uef.display_position,",571
Application.models.PatientPortalTemplate.getPatientForms( ) -> formsQuery,"				select	ut.pk_user_todo_id,
						ut.name as user_todo_name,
						ut.active_start_date,
						ut.active_end_date,
						ut.display_position,
						t.pk_todo_id,
						t.name as todo_name,
						t.fk_resource_id,
						ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptt.active_start_interval,
						pptt.active_end_interval,
						dense_rank() over (partition by	ut.fk_user_id, 
														ut.fk_todo_id 
											order by 	ut.assigned_date, 
														ut.pk_user_todo_id)
							as rank,
						count(*) over (partition by ut.fk_user_id, 
													ut.fk_todo_id)
							as count
				from	users u
				join user_todos ut on ut.fk_user_id = u.pk_user_id
					and ut.active = true
				join todos t on t.pk_todo_id = ut.fk_todo_id
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = u.pk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				left outer join patient_portal_template_todos pptt on pptt.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptt.fk_todo_id = t.pk_todo_id
				where	u.pk_user_id = $1
				and		u.security = 1
				and		u.account_status = 1
				and		u.fk_company_id = $2
				order by ut.display_position,",571
Application.models.PatientPortalTemplate.getPatientCalendarTemplates( ) -> templatesQuery,"				select	uct.pk_user_calendar_template_id,
						uct.active_start_date,
						uct.name as user_calendar_name,
						ct.pk_calendartemplate_id,
						ct.name as calendar_name,
						ppt.name as template_name,
						ppt.pk_patient_portal_template_id,
						pptc.active_start_interval
				from	users u
				join user_calendar_templates uct on uct.fk_user_id = u.pk_user_id
					and uct.active = true
				join calendartemplate ct on ct.pk_calendartemplate_id = uct.fk_calendar_template_id
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = uct.fk_patient_portal_template_id
				left outer join patient_portal_template_calendars pptc on pptc.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptc.fk_calendar_template_id = ct.pk_calendartemplate_id
				where	u.fk_company_id = $1
				and		u.pk_user_id = $2
				and		u.security = 1
				and		u.account_status = 1
				order by uct.display_position,",571
Application.models.Messaging.postMessage( ) -> [insert],"						insert 	into message_post
								(fk_message_thread_id,
								subject,
								body,
								fk_user_id,
								responder_user_id,
								fk_message_post_type_id,
								created_by,
								viewable_medside_only)
						values 	($1,
								$2,
								$3,
								$4,
								$5",570
Application.App.findBy_( ) -> instances,"
				select
					id, json_serialized_form, updated_at, location_hash 
				from ""survey_user_drafts"" 
				where
							""user_id_self"" = $1
							and
							""resource_id"" = $2
							and
							""fk_user_todo_id"" = $3
							and
							""is_archived"" = $4
							and
						creator_id <> 0
						AND
					1 = 1
					order by updated_at",570
Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"				select	survey_indexing_run_id, 
						start_time, 
						end_time, 
						surveys_indexed, 
						is_last_run, 
						surveys_start_at, 
						surveys_end_at
				from	survey_indexing_runs
				where	is_last_run =",566
Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.didPrevScriptFinish( ) -> surveyIndexQuery,"
				select	survey_indexing_run_id
				from	survey_indexing_runs
				where	is_last_run =",566
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"								update 	message_thread_users
								set 	fk_message_thread_state = 2,
										last_message_thread_state = 2,
										updated_at = now()
								where 	fk_user_id in ($1)
								and 	fk_message_thread_id =",558
Application.models.Messaging.getMessages( ) -> postsQuery,"							select	mp.pk_message_post_id,
									mp.fk_user_id,
									mp.responder_user_id,
									mp.fk_message_post_type_id,
									mp.body,
									mp.subject,
									mp.fk_message_thread_id,
									mp.responder_user_id,
									to_char(mp.date_created + interval '3 hours','FMMonth FMDD, yyyy FMHH:MI AM') as date_created,
									u.pk_user_id,
									u.fname,
									u.lname,
									u.internalid,
									u.case_no,
									u.security
							from 	message_post mp
							join users u on u.pk_user_id = mp.fk_user_id 
								and u.fk_company_id = $1
							where	mp.fk_message_thread_id = $2 
							order by mp.pk_message_post_id",551
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",550
Application.models.SurveyUserSolr.dump( ) -> submittersQuery,"						select	pk_user_id,
									fname,
									lname
						from	users
						where	pk_user_id in",547
Application.models.SurveyTypes.SurveyMessagingAlert.getPreviousSurveyData( ) -> surveyUserQuery,"					select	""pk_SurveyUser_ID""
					from	""SurveyUser""
					where	(""pk_SurveyUser_ID"" = $1
							or	revision_fk_surveyuser_id = $2)
					and		""pk_SurveyUser_ID"" <> $3
					order by ""pk_SurveyUser_ID"" desc
					limit",536
Application.models.PatientPortalTemplate.getPatientTemplates( ) -> templatesQuery,"				select	upt.pk_user_portal_template_id,
						upt.fk_patient_portal_template_id,
						upt.active_start_date,
						ppt.name
				from	users u
				join user_portal_templates upt on upt.fk_user_id = u.pk_user_id
					and upt.active = true
				join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where	u.fk_company_id = $1
				and		u.pk_user_id = $2
				and		u.security = 1
				and		u.account_status = 1
				order by",535
Application.models.SMS.getSmsSettings( ) -> settingsQuery,"				select	u.pk_user_id,
						u.fk_company_id,
						u.security,
						u.mobile_phone,
						u.mobile_phone_dial_code,
						u.may_receive_sms_notifications,
						sa.sms_allow
				from	users u
				join settings_apps sa on sa.fk_company_id = u.fk_company_id
				where	u.pk_user_id in",534
Application.models.SmartClip.parseSmartClip( ) -> responseQuery,"								select	res_value.""Predicate_V1_Value"" as response_value
							from 	""Resource"" as res_value
							join ""Resource"" as object_value_row on res_value.""fk_SurveyUser_ID"" in ($1)
								and res_value.""Subject_fk_Schema_ID"" = 134
								and object_value_row.""fk_SurveyUser_ID"" in ($2)
								and object_value_row.""Subject_fk_Schema_ID"" = 133
								and res_value.""Object_fk_Resource_ID"" = object_value_row.""Object_fk_Resource_ID""
							where 	object_value_row.""Predicate_V1_Value_fk_Resource_ID"" =",533
Application.models.PatientPortalTemplate.getDefaultTemplateByCompanyId( ) -> templateQuery,"				select	pk_patient_portal_template_id,
						fk_company_id,
						fk_user_id,
						name,
						default_template
				from	patient_portal_templates
				where	fk_company_id = $1 
				and 	default_template =",532
Application.controllers.KioskControllerRemote.protect( ) -> patientQuery,"					select	fk_company_id,
							fk_user_id,
							security
					from	users
					where	pk_user_id =",526
Application.models.Company.getCompany( ) -> companyQuery,"				select	time_zone_location 
				from	companies
				where	pk_company_id =",522
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",520
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '3 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17,$18)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 0 
						offset",515
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
				or		""pk_SurveyUser_ID"" in ($11,$12,$13,$14,$15,$16,$17,$18,$19,$20)
				order by",511
Application.models.SurveyUserSolr.getLogicalSurveysQuery( ) -> logicalSurveysQuery,"				select	s.id as survey_id,
						s.title as survey_name,
						stp.id as timepoint_id,
						stp.named_interval,
						stp.timepoint_interval,
						sta.fk_resource_id,
						sa.physician_edit,
						sa.patient_edit,
						sa.site_edit
				from	survey_company sc
				join surveys s on s.id = sc.survey_id
				join survey_timepoints stp on stp.survey_id = s.id
				join survey_timepoint_survey_template stst on stst.survey_timepoint_id = stp.id
				join survey_templates_access sta on sta.fk_survey_template_id = stst.survey_template_id
					and sta.fk_company_id = sc.company_id
						and sta.fk_resource_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169)
				join survey_access sa on sa.fk_company_id = sc.company_id
					and sa.fk_resource_id = sta.fk_resource_id
						and (sa.physician_edit = true or sa.patient_edit = true or sa.site_edit = true)
				where	sc.company_id = $170
				group by s.id,
						s.title,
						stp.id,
						stp.named_interval,
						stp.timepoint_interval,
						sta.fk_resource_id,
						sa.physician_edit,
						sa.patient_edit,
						sa.site_edit
				order by s.title,",510
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 51 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",508
Application.models.ContentManager.getContent( ) -> patientQuery,"						select	fname,
								lname
						from	users
						where	pk_user_id =",506
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_timepoint_survey_template"" (""survey_timepoint_id"",""survey_template_id"")
					VALUES (
						$1 , $2 
					)
					RETURNING id as",506
Application.lib.FileUtil.createFolders( ) -> insertFolder,"	                    insert	into ""fileManagerItem"" 
								(""Name"",
								""isDirectory"",
								display,
								""patientReadOnly"")
	                    values",499
Application.lib.FileUtil.createFolders( ) -> insertACL,"						insert	into ""fileManagerACL""",499
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341538$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1376527531$dontbeevilman$
							AND
					1 =",497
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike",497
Application.models.Messaging.getMedTeamUsers( ) -> usersQuery,"				select 	distinct u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.email,
						u.mayreceiveemailreminders,
						u.security
				from 	users u
				join medserviceprovider msp on msp.fk_user_id = u.pk_user_id
					and msp.fk_medserviceprovidertype_id = $1
				where 	u.fk_company_id = $2
				and 	u.account_status = 1
					-- if site user specified, medteam user must be admin, sudo as site user or is site user
					and (
							u.pk_user_id = $3 
							or u.sudo_as_fk_user_id = $4 
							or u.security = 4
						)
					union
					select 	distinct u3.pk_user_id,
							u3.fname,
							u3.lname,
							u3.name_suffix as title,
							u3.email,
							u3.mayreceiveemailreminders,
							u3.security
					from 	users u2
					join users u3 on u3.sudo_as_fk_user_id = u2.pk_user_id
					join medserviceprovider msp2 on msp2.fk_user_id = u3.pk_user_id
						and msp2.fk_medserviceprovidertype_id = $5
					where 	u2.fk_company_id = $6
					and		u2.security = 4
					and 	u2.account_status =",496
Application.App.findBy_( ) -> instances,"
				select
					""id"",""survey_resource_id"" 
				from ""survey_schemas"" 
				where
							""survey_resource_id"" = $1
							and
					1 =",495
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_timepoint_survey_schema"" (""survey_schema_id"",""survey_timepoint_id"")
					VALUES (
						$1 , $2 
					)
					RETURNING id as",495
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '3 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
					and mt.pk_message_thread_id = $9 
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $10 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $11 
					group",494
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
					and mp.viewable_medside_only = false
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $8 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $9 
					and mtu.fk_message_thread_state in ($10)
						group by",490
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_templates_access"" (""fk_resource_id"",""fk_survey_template_id"",""fk_company_id"",""fk_user_id"")
					VALUES (
						$1 , $2 , $3 , 
								null
					)
					RETURNING pk_survey_template_access_id as",486
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_templates"" (""fk_survey_template_type_id"",""fk_company_id"",""fk_user_id"",""template_inner_html"",""template_name"",""ts_updated"",""timepoint_interval"",""header_version"",""ts_file_write"",""git_path"",""ts_git_import"",""imported_by_fk_user_id"")
					VALUES (
						$1 , $2 , $3 , $4 , $5 , now() , 
								null
							, $6 , $7 , $8 , $9 , $10 
					)
					RETURNING pk_survey_template_id as",486
Application.lib.FileUtil.checkAclAccess( ) -> actorQuery,"				select	pk_user_id,
						fk_company_id,
						fk_user_id,
						sudo_as_fk_user_id,
						security
				from	users
				where	pk_user_id =",485
Application.lib.FileUtil.checkAclAccess( ) -> ownerQuery,"				select	u.pk_user_id,
						u.fk_company_id,
						u.fk_user_id
				from	""fileManagerACL"" fma
				join ""fileManagerUser"" fmu on fmu.""pk_fileManagerUser_ID"" = fma.""fk_fileManagerUser_ID""
				join users u on u.pk_user_id = fmu.""fk_VT_ID""
				where	fma.""pk_fileManagerACL_ID"" =",485
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_access"" (""fk_company_id"",""fk_resource_id"",""physician_read"",""physician_edit"",""patient_read"",""patient_edit"",""fk_user_id"",""use_cache"",""site_read"",""site_edit"",""cache_file_uuid"",""fhir_questionnaire_url"",""public_form_url"")
					VALUES (
						$1 , $2 , $3 , $4 , $5 , $6 , 0 , true , $7 , $8 , 
								null
							, 
								null
							, 
								null
					)
					RETURNING pk_survey_access_id as",485
Application.models.FormsLibrary.createTemplate( ) -> surveyAccessQuery,"					select	pk_survey_access_id
					from	survey_access
					where	fk_company_id = $1
					and		fk_resource_id =",485
Application.models.FormsLibrary.createTemplate( ) -> todoQuery,"				select	pk_todo_id
				from	todos
				where	fk_company_id = $1
				and		fk_resource_id =",485
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_schemas"" (""survey_resource_id"")
					VALUES (
						$1 
					)
					RETURNING id as",485
Application.models.FormsLibrary.createTemplate( ) -> timestampQuery,				select	now() as,485
Application.models.FormsLibrary.createLogicalSurvey( ) -> logicalSurveyQuery,"					select	distinct stp.survey_id
					from 	survey_templates st
					join survey_timepoint_survey_template stst on stst.survey_template_id = st.pk_survey_template_id
					join survey_timepoints stp on stp.id = stst.survey_timepoint_id
					join survey_company sc on sc.survey_id = stp.survey_id
						and sc.company_id = $1
					where 	st.git_path =",485
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_templates_access"" (""fk_resource_id"",""fk_survey_template_id"",""fk_company_id"",""fk_user_id"",""active"")
					VALUES (
						$1 , $2 , $3 , 
								null
							, true 
					)
					RETURNING pk_survey_template_access_id as",484
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_templates"" (""fk_survey_template_type_id"",""fk_company_id"",""fk_user_id"",""template_inner_html"",""template_name"",""ts_updated"",""timepoint_interval"",""fk_survey_id"",""header_version"",""ts_file_write"",""git_path"",""ts_git_import"",""imported_by_fk_user_id"")
					VALUES (
						$1 , $2 , $3 , $4 , $5 , now() , 
								null
							, 
								null
							, $6 , $7 , $8 , $9 , $10 
					)
					RETURNING pk_survey_template_id as",484
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_timepoint_survey_template"" (""survey_timepoint_id"",""survey_template_id"",""template_type_id"")
					VALUES (
						$1 , $2 , $3 
					)
					RETURNING id as",484
Application.App.save( ) -> save,"
					INSERT INTO  ""todos"" (""fk_todo_type_id"",""fk_resource_id"",""parent_fk_todo_id"",""fk_company_id"",""modified_by_fk_user_id"",""name"",""start_date"",""end_date"",""active"",""survey_timepoint_id"",""auto_apply_on_patient_create"")
					VALUES (
						$1 , $2 , 
								null
							, $3 , $4 , $5 , now() , 
								null
							, true , 
								null
							, 
								null
					)
					RETURNING pk_todo_id as",483
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscWickhamRoad') and fk_company_id = 10
						AND
					1 =",482
Application.models.Login.getPatientQuery( ) -> patientQuery,"				select	u.fname,
						u.lname,
						u.pk_user_id,
						u.security,
						u.fk_company_id,
						u.fk_user_id,
						u.sudo_as_fk_user_id,
						u.datepatientidchanged,
						u.agreedtotermsandconditions,
						u.identity_validated,
						u.datecreated,
						u.active,
						u.dob,
						u.has_changed_password,
						u.password_valid_until,
						phyuser.sudo_as_fk_user_id as grandparent_id,
						phyuser.is_site_user as physician_is_site_user,
						phyuser.lname as physician_lname,
						sudophyuser.pk_user_id as sudo_physician_user_id,
						sudophyuser.is_site_user as sudo_physician_is_site_user,
						c.hroffsetfromservertime,
						c.is_foundation,
						cc.portal_display_mobile_phone,
						case
							when (u.user_time_zone_location is not null 
								and u.user_time_zone_location <> '') 
							then u.user_time_zone_location
							when (phyuser.is_site_user is true 
								and phyuser.user_time_zone_location is not null 
								and phyuser.user_time_zone_location <> '') 
							then phyuser.user_time_zone_location
							when (sudophyuser.is_site_user is true 
								and sudophyuser.user_time_zone_location is not null 
								and sudophyuser.user_time_zone_location <> '') 
							then sudophyuser.user_time_zone_location
							when (c.time_zone_location is not null 
								and c.time_zone_location <> '') 
							then c.time_zone_location
							else 'America/Los_Angeles'
						end as time_zone_location
				from	users u
				join companies c on c.pk_company_id = u.fk_company_id
				join company_config cc on cc.fk_company_id = c.pk_company_id
				join users as  phyuser on phyuser.pk_user_id = u.fk_user_id
				left outer join users as sudophyuser on sudophyuser.pk_user_id = phyuser.sudo_as_fk_user_id
				where	u.account_status = 1
				and		u.security = 1
					and	u.pk_user_id = $1 
				limit",481
Application.models.Survey.getSurveyQuestionsAndAnswers( ) -> elementsQuery,"				select	option_id,
						html_element
				from	survey_export_parsed_questions
				where	fk_company_id = $1
				and		fk_resource_id =",476
Application.models.Survey.getSurveyQuestionsAndAnswers( ) -> questionsQuery,"				select	pk_survey_export_question_id,
						option_id,
						option_label,
						expand_checkboxes
				from	survey_export_questions
				where	fk_company_id = $1
				and		fk_resource_id = $2
				order by",476
Application.models.Survey.getSurveyQuestionsAndAnswers( ) -> parsedStatusQuery,"				select	pk_survey_export_parsed_survey_id
				from	survey_export_parsed_surveys
				where	fk_company_id = $1
				and		fk_resource_id =",476
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fname"" =
									$2,
									""lname"" =
									$3,
									""email"" =
									$4,
									""datecreated"" =
									$5,
									""dateupdated"" =
									$6,
									""active"" =
									$7,
									""password"" =
									$8,
									""login"" =
									$9,
									""internalid"" =
									$10,
									""datepatientidchanged"" =
									$11,
									""sudo_as_fk_user_id"" =
									$12,
									""agreedtotermsandconditions"" =
									$13,
									""has_changed_password"" =
									$14,
									""security"" =
									$15,
									""allow_self_reg"" =
									$16,
									""self_reg_capable"" =
									$17,
									""show_all_templates"" =
									$18,
									""account_status"" =
									$19,
									""sudo_retain_user_security"" =
									$20,
									""e_auth"" =
									$21,
									""is_test_user"" =
									$22,
									""identity_validated"" =
									$23,
									""is_site_user"" =
									$24,
									""may_receive_sms_notifications"" =
									$25,
									""is_deceased"" =
									$26,
									""is_default_user"" =
									$27,
									""is_alert_sender"" =
									$28,
									""reg_form_create"" =
									$29
					WHERE ""pk_user_id"" =",472
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 112 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",468
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike lower($2)
							and lower(u.lname) ilike",464
Application.models.PatientPortalTemplate.applyPortalTemplate( ) -> userTodosQuery,"				select	max(display_position) as max_position
				from	user_todos
				where	fk_user_id = $1
				and		active =",464
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike",454
Application.models.SurveyUserSolr.getPatientQuery( ) -> patientQuery,"				select	u.pk_user_id,
						u.fk_user_id,
						u2.pk_user_id as site_fk_user_id,
						u2.lname as site_name,
							u.fname,
							u.lname
							, u.internalid
							, string_agg(s.name, ',') as study_name
							, s.use_in_reports
				from	users u
				left outer join users u2 on u2.pk_user_id = u.fk_user_id
					and u2.is_site_user = true
					left outer join users_studies us on us.user_id = u.pk_user_id
					left outer join study s on s.pk_study_id = us.study_id
				where	u.pk_user_id in ($1)
				and		u.account_status = 1
					and	u.security = 1
					and (s.use_in_reports = true or s.use_in_reports is null)
				group by 
					u.pk_user_id,
					u.fk_user_id,
					u2.pk_user_id,
					u2.lname,
					u.fname,
					u.lname
						, u.internalid
						, s.use_in_reports
				order by lower(u.lname),",454
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> [update],"									update	calendaritem
									set		datetimeselected = $1,
											modified_by_fk_user_id = $2,
											datemodified = now()
									where	pk_calendaritem_id =",449
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> patientCalendarRemindersQuery,"								select	pk_communicatedreminder_id,
										senddatetime
								from	communicatedreminder
								where	fk_calendaritem_id = $1
								and		sentdatetime is",449
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        uu.ufpti_no,
	                        uu.shands_no,
	                        u.fname,
	                        u.lname,
	                        u.mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
	                left join users_ufpti uu on uu.fk_user_id = u.pk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        uu.ufpti_no,
	                        uu.shands_no,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",448
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
	                left join users_ufpti uu on uu.fk_user_id = u.pk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike",445
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> [update],"									update	communicatedreminder
									set		senddatetime = $1
									where	pk_communicatedreminder_id =",439
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
	                left join users_ufpti uu on uu.fk_user_id = u.pk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike lower($2)
							and lower(u.lname) ilike",437
Application.helpers.EmailHelper.emailPatientLoginCard( ) -> patientQuery,"	            select  u.pk_user_id,
						u.fk_user_id,
	                    u.fk_company_id,
						u.lname,
						u.fname,
						u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
						u2.lname as site_name
	            from    users u
				left outer join users u2 on u2.pk_user_id = u.fk_user_id
					and u2.is_site_user = true
	            where 	u.security = 1
	            and 	u.fk_company_id = $1
				and		u.account_status = 1
					and u.pk_user_id =",436
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        uu.ufpti_no,
	                        uu.shands_no,
	                        u.fname,
	                        u.lname,
	                        u.mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
	                left join users_ufpti uu on uu.fk_user_id = u.pk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike lower($2)
							and lower(u.lname) ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        uu.ufpti_no,
	                        uu.shands_no,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",436
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike lower($2)
							and lower(u.lname) ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",428
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fk_user_id"" =
									$2,
									""fname"" =
									$3,
									""lname"" =
									$4,
									""email"" =
									$5,
									""datecreated"" =
									$6,
									""dateupdated"" =
									$7,
									""active"" =
									$8,
									""password"" =
									$9,
									""dob"" =
									$10,
									""internalid"" =
									$11,
									""reminderemail"" =
									$12,
									""mayreceiveemailreminders"" =
									$13,
									""agreedtotermsandconditions"" =
									$14,
									""security"" =
									$15,
									""allow_self_reg"" =
									$16,
									""self_reg_capable"" =
									$17,
									""show_all_templates"" =
									$18,
									""import"" =
									$19,
									""gender"" =
									$20,
									""account_status"" =
									$21,
									""is_test_user"" =
									$22,
									""identity_validated"" =
									$23,
									""is_site_user"" =
									$24,
									""may_receive_sms_notifications"" =
									$25,
									""is_deceased"" =
									$26,
									""is_default_user"" =
									$27,
									""is_alert_sender"" =
									$28,
									""reg_form_create"" =
									$29
					WHERE ""pk_user_id"" =",428
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '3 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7)
						)
					and mt.pk_message_thread_id = $8 
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
					and mp.viewable_medside_only = false
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					group",425
Application.models.Messaging.getMessages( ) -> postsQuery,"							select	mp.pk_message_post_id,
									mp.fk_user_id,
									mp.responder_user_id,
									mp.fk_message_post_type_id,
									mp.body,
									mp.subject,
									mp.fk_message_thread_id,
									mp.responder_user_id,
									to_char(mp.date_created + interval '3 hours','FMMonth FMDD, yyyy FMHH:MI AM') as date_created,
									u.pk_user_id,
									u.fname,
									u.lname,
									u.internalid,
									u.case_no,
									u.security
							from 	message_post mp
							join users u on u.pk_user_id = mp.fk_user_id 
								and u.fk_company_id = $1
							where	mp.fk_message_thread_id = $2 
								and mp.viewable_medside_only = false
							order by mp.pk_message_post_id",425
Application.models.SurveyUser.getTodosBySurveyUser( ) -> todosQuery,"				select 	uscs.fk_surveyuser_id,
						ppt.name as patient_portal_template_name
				from 	user_survey_completion_statuses uscs
				join user_todos ut on ut.pk_user_todo_id = uscs.fk_user_todo_id
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = ut.fk_patient_portal_template_id
				where 	uscs.fk_surveyuser_id in",420
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3)
							or revision_fk_surveyuser_id in ($4,$5,$6)
					order by",420
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
								mtu.pk_message_thread_users_id,
								case
									when max(mtu.fk_message_thread_state) = 1 then 'Unread'
									when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
									when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
									when max(mtu.fk_message_thread_state) = 4 then 'Read'
									when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
									when max(mtu.fk_message_thread_state) = 6 then 'Closed'
									when max(mtu.fk_message_thread_state) = 7 then 'Archived'
									when max(mtu.fk_message_thread_state) = 9 then 'Completed'
									when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
									when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
								end as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
						group by",418
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",414
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset",414
Application.models.SurveyUser.findMostRecentRevisionSet( ) -> surveyUsersQuery,"				select
							mostrecentrevisionset.revision_fk_surveyuser_id,mostrecentrevisionset.""pk_SurveyUser_ID"",mostrecentrevisionset.""fk_User_ID_Self"" 
				from (
					select
							su1.revision_fk_surveyuser_id,su1.""pk_SurveyUser_ID"",su1.""fk_User_ID_Self"" 
					from	""SurveyUser"" as su1
					where 	su1.revision_type = 'new'
						and su1.""fk_Resource_ID"" in ($1)
						and su1.""fk_User_ID_Self"" in ($2)
					and su1.""pk_SurveyUser_ID"" not in (
						select	su2.revision_fk_surveyuser_id
						from 	""SurveyUser"" as su2
						where 	su2.revision_fk_surveyuser_id is not null
							and su2.""fk_Resource_ID"" in ($3)
							and su2.""fk_User_ID_Self"" in ($4)
					)
					union all
					select
							su3.revision_fk_surveyuser_id,su3.""pk_SurveyUser_ID"",su3.""fk_User_ID_Self"" 
					from	""SurveyUser"" as su3
					where 	su3.""pk_SurveyUser_ID"" in (
						select 	max(su4.""pk_SurveyUser_ID"") as ""pk_SurveyUser_ID""
						from 	""SurveyUser"" as su4
						where 	su4.revision_type = 'update'
							and su4.""fk_Resource_ID"" in ($5)
							and su4.""fk_User_ID_Self"" in ($6)
						group by su4.""fk_User_ID_Self"",
							su4.""fk_Resource_ID"",
							su4.revision_type,
							su4.""revision_fk_surveyuser_id""
					)
				) as mostrecentrevisionset
					-- 3. inner join on users to scope the resultset to active users
					inner join dblink (
						'hc_dblink_server_connection'::text, $mjrip$
						select	u.pk_user_id,
								c.time_zone_location
						from 	users u
						join companies c on c.pk_company_id = u.fk_company_id
						where 1 = 1
							and u.pk_user_id in (0 )
							$mjrip$::text
						) as hc_users(pk_user_id bigint, time_zone_location varchar)
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
					left join ""SurveyUser"" as originalSU on originalSU.""pk_SurveyUser_ID"" = mostrecentrevisionset.revision_fk_surveyuser_id
				where 1 = 1
					order by ""pk_SurveyUser_ID""",413
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id not in ($1)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $3 
							and lower(u.lname) ilike",406
Application.models.User.getPhysiciansQuery( ) -> physiciansQuery,"				select	u.pk_user_id,
						u.fname,
						u.lname,
						u.internalid
				from	users u
					join medserviceprovider msp on msp.fk_user_id = u.pk_user_id
						and msp.fk_medserviceprovidertype_id = 2
				where	u.fk_company_id = $1 
					and internalid is not null
				and		u.account_status = 1
				and		u.security = 2
				and		u.is_site_user = false
				and		u.lname is not null
				and		u.lname <> ''
				group by u.pk_user_id,
						u.fname,
						u.lname
				order by",405
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",404
Application.models.Study.getUserStudies( ) -> userStudiesQuery,"	  
				select	us.user_id,
						s.name,
						us.study_id,
						us.study_subject_id,  
						us.pk_users_studies_id,
						u.internalid,
						us.is_active_in_vtoc,
						us.is_reminders,
						us.is_reporting,
						us.is_active
				from	users u, 
						users_studies us, 
						study s
				where	u.pk_user_id = us.user_id 
				and		us.study_id = s.pk_study_id
					and s.fk_company_id = $1 
					and	us.user_id in ($2)
				order by us.created_at",403
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id not in ($1)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $3 
							and lower(u.lname) ilike $4 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",402
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 172 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",396
Application.models.Patient.validatePatient( ) -> patientQuery,"				select	fk_company_id,
						fname,
						lname,
						dob
				from	users
				where	pk_user_id =",395
Application.models.FileManager.getNodeArray( ) -> nodeQuery,"				select 	fmi.""fk_fileManagerItem_ID"",
						fmi.""Name"",
						fmi.""isDirectory"",
						fmi.""fileExtension"",
						fmi.link_text,
						fmi.link_url,
						fmi.""patientReadOnly"",
						fma.""pk_fileManagerACL_ID"",
						fma.""fk_fileManagerACL_ID"",
						fma.""fk_fileManagerUser_ID"",
						fma.""fk_fileManagerPermissionType_ID"",
						fma.is_deleted
				from	""fileManagerItem"" fmi
				join ""fileManagerACL"" fma on fma.""fk_fileManagerItem_ID"" = fmi.""pk_fileManagerItem_ID""
					and fma.is_deleted = false
				where	fma.""fk_fileManagerUser_ID"" = $1 
					and	fmi.""fk_fileManagerItem_ID"" is null
				order by fmi.""isDirectory"" desc,",395
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscCovington') and fk_company_id = 10
						AND
					1 =",392
Application.lib.FileUtil.insertItem( ) -> itemInsert,"		            insert	into ""fileManagerItem"" 
							(""Name"",
							""isDirectory""
								,""fk_fileManagerData_ID""
								,""fileExtension""
								,""fk_fileManagerItem_ID""
							)
					values ($1,
								false
								,$2 
								,$3 
								,$4",392
Application.lib.FileUtil.insertAcl( ) -> aclInsert,"	         	insert	into ""fileManagerACL"" 
						(""fk_fileManagerUser_ID"",
						""fk_fileManagerItem_ID"",
						""fk_fileManagerPermissionType_ID"")
	           ",392
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '3 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset",390
Application.models.Patient.insertLoginCardSent( ) -> [insert],				insert into,390
Application.models.SurveyUser.findMostRecentRevisionSet( ) -> surveyUsersQuery,"				select
							mostrecentrevisionset.""pk_SurveyUser_ID"",
							mostrecentrevisionset.""fk_User_ID_Origin"",
							mostrecentrevisionset.""DateAdded"",
							mostrecentrevisionset.""DateCompleted"",
							case
								when originalSU.""DateAdded"" is null
								then mostrecentrevisionset.""DateAdded""
								else originalSU.""DateAdded""
							end as original_date_added,
							mostrecentrevisionset.""fk_Resource_ID"",
							mostrecentrevisionset.""fk_User_ID_Self"",
							mostrecentrevisionset.""IP"",
							mostrecentrevisionset.revision_type,
							mostrecentrevisionset.revision_fk_surveyuser_id,
							mostrecentrevisionset.submitter_id,
							mostrecentrevisionset.visit,
							mostrecentrevisionset.fk_survey_tag_resource_id,
							mostrecentrevisionset.surveyuser_association_uuid,
							mostrecentrevisionset.record_id,
							hc_users.time_zone_location
				from (
					select
							su1.""pk_SurveyUser_ID"",
							su1.""fk_User_ID_Origin"",
							su1.""DateAdded"",
							su1.""DateCompleted"",
							su1.""fk_Resource_ID"",
							su1.""fk_User_ID_Self"",
							su1.""IP"",
							su1.revision_type,
							su1.revision_fk_surveyuser_id,
							su1.submitter_id,
							su1.visit,
							su1.fk_survey_tag_resource_id,
							su1.surveyuser_association_uuid,
							su1.record_id
					from	""SurveyUser"" as su1
					where 	su1.revision_type = 'new'
						and su1.""fk_Resource_ID"" in ($1)
					and su1.""pk_SurveyUser_ID"" not in (
						select	su2.revision_fk_surveyuser_id
						from 	""SurveyUser"" as su2
						where 	su2.revision_fk_surveyuser_id is not null
							and su2.""fk_Resource_ID"" in ($2)
					)
					union all
					select
							su3.""pk_SurveyUser_ID"",
							su3.""fk_User_ID_Origin"",
							su3.""DateAdded"",
							su3.""DateCompleted"",
							su3.""fk_Resource_ID"",
							su3.""fk_User_ID_Self"",
							su3.""IP"",
							su3.revision_type,
							su3.revision_fk_surveyuser_id,
							su3.submitter_id,
							su3.visit,
							su3.fk_survey_tag_resource_id,
							su3.surveyuser_association_uuid,
							su3.record_id
					from	""SurveyUser"" as su3
					where 	su3.""pk_SurveyUser_ID"" in (
						select 	max(su4.""pk_SurveyUser_ID"") as ""pk_SurveyUser_ID""
						from 	""SurveyUser"" as su4
						where 	su4.revision_type = 'update'
							and su4.""fk_Resource_ID"" in ($3)
						group by su4.""fk_User_ID_Self"",
							su4.""fk_Resource_ID"",
							su4.revision_type,
							su4.""revision_fk_surveyuser_id""
					)
				) as mostrecentrevisionset
					-- 3. inner join on users to scope the resultset to active users
					inner join dblink (
						'hc_dblink_server_connection'::text, $mjrip$
						select	u.pk_user_id,
								c.time_zone_location
						from 	users u
						join companies c on c.pk_company_id = u.fk_company_id
						where 1 = 1
							and u.account_status not in ( 3,5 ) 
							and u.fk_company_id = 115 
							$mjrip$::text
						) as hc_users(pk_user_id bigint, time_zone_location varchar)
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
					left join ""SurveyUser"" as originalSU on originalSU.""pk_SurveyUser_ID"" = mostrecentrevisionset.revision_fk_surveyuser_id
					join surveyuser_workflow_states sws on sws.surveyuser_id = mostrecentrevisionset.""pk_SurveyUser_ID""
						and sws.workflow_status_id in ($4)
				where 1 = 1
					order by ""pk_SurveyUser_ID""",388
Application.models.PatientPortalTemplate.checkTemplateValid( ) -> todosQuery,"				select	t.pk_todo_id,
						t.fk_resource_id,
						t.name as todo_name,
						ppt.name as template_name,
						sa.pk_survey_access_id,
						sta.pk_survey_template_access_id
				from 	patient_portal_templates ppt
				join patient_portal_template_todos pptt on pptt.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptt.active = true
				join todos t on t.pk_todo_id = pptt.fk_todo_id
				left outer join survey_access sa on sa.fk_resource_id = t.fk_resource_id
					and sa.fk_company_id = $1
				left outer join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				where 	ppt.pk_patient_portal_template_id =",387
Application.models.ExternalPatient.getLastImportedHUPTIPatient( ) -> patientsQuery,"				select	max(max_pat_id1) as Pat_ID1
				from	mosaiq_import_logs
				WHERE 	company_id =",384
Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> lastExportQuery,"				select	r.pk_rcopia_create_log_id,
						r.date_created
				from	users u
				join rcopia_create_log r on r.fk_user_id = u.pk_user_id
				where	u.fk_company_id = $1
				and		u.security = 1
				order by r.pk_rcopia_create_log_id desc
				limit",383
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscSnellville') and fk_company_id = 10
						AND
					1 =",382
Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> surveyUsersQuery,"				select	distinct ""fk_User_ID_Self""
				from	""SurveyUser""
				join dblink (
						'hc_dev_dblink_server_connection' :: text, $mjrip$
							select 	pk_user_id
							from	users
							where	account_status = 1
							and		security = 1
							and	fk_company_id = 12 
						$mjrip$ :: text
					) as u (pk_user_id bigint) 
					on u.pk_user_id = ""fk_User_ID_Self""
				where	""fk_Resource_ID"" = 8400
				and		""DateAdded"" >",379
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 167 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",376
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9)
				or		""pk_SurveyUser_ID"" in ($10,$11,$12,$13,$14,$15,$16,$17,$18)
				order by",375
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
								, revision_type
								, revision_fk_surveyuser_id
								, ""DateCompleted""
							, submitter_id
								, survey_location_hash
								, fk_login_mode_id
								, completion_seconds
								, completion_seconds_total
							)
					values ( $1,
							$2,
							$3,
							$4 
								, 'update'
								, $5 
								, $6 
							, $7 
								, $8 
								, $9 
								, $10 
								, $11 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",373
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 112 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",372
Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> patientsQuery,"				select	u.pk_user_id,
						u.fk_company_id,
						u.internalid,
						u.fname,
						u.mname,
						u.lname,
						u.dob,
						u.gender,
						u.phone
				from	users u
				where	u.fk_company_id = $1
				and		u.security = 1
				and		u.account_status = 1
				and		(u.datecreated > $2
						or u.dateupdated > $3",371
Application.helpers.EmailHelper.logEmail( ) -> [insert],"				insert into email_log
						(fk_user_id,
						fk_company_id,
						email_to,
						email_from,
							email_body,
							email_type,
						email_subject,
						email_sent,
						email_error)
				values	($1,
						$2,
						$3,
						$4,
						$5,
						$6,
						$7,
						$8,
						$9",370
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscConyers') and fk_company_id = 10
						AND
					1 =",368
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8)
							or revision_fk_surveyuser_id in ($9,$10,$11,$12,$13,$14,$15,$16)
					order by",367
Application.models.SurveyTypes.CopyFormToAssociatedUser.afterCreate( ) -> siteQuery,"						select	u2.internalid
						from	users u
						join users u2 on u2.pk_user_id = u.fk_user_id and u2.is_site_user = true
						where	u.pk_user_id =",367
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",367
Application.models.Messaging.sendEmail( ) -> surveyUserQuery,"					select	""fk_User_ID_Self"",
							""fk_Resource_ID""
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" =",365
Application.lib.FileUtil.insertData( ) -> dataInsert,"					insert	into ""fileManagerData"" 
							(""MD5"",
							""Size"",
							file_uuid)
					values",365
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6)
							or revision_fk_surveyuser_id in ($7,$8,$9,$10,$11,$12)
					order by",361
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341531$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1710961750$dontbeevilman$
							AND
					1 =",359
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 94 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",356
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '3 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '3 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
					and mp.viewable_medside_only = false
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $8 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $9 
					and mtu.fk_message_thread_state in ($10,$11,$12,$13,$14,$15,$16,$17)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date desc, thread_state_order 
						limit 500 
						offset",356
Application.models.Survey.getSurveyQuestionsAndOptions( ) -> questionsQuery,"					WITH schema_result as (
						select	survey_id,question_id,question_language,question_label,question_label as label,option_id,option_language,question_tags
						from 	resource_survey_by_survey_id($1::bigint)
					)
	                select	survey_id,question_id,question_language,label,option_id,option_language,question_tags
	                from 	schema_result
						order by label,question_id",353
Application.models.Messaging.sendAlertMessage( ) -> messagingSetupQuery,"				select 	mpt.pk_message_post_type_id
				from	message_post_type_company_role mptcr
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mptcr.fk_message_post_type_id
					and mpt.message_post_type_name = $1
				where	mptcr.fk_company_id = $2
				and		mptcr.show_in_compose_actions =",352
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368567$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1962665877$dontbeevilman$
							AND
					1 =",350
Application.lib.FileUtil.checkAccessToPatient( ) -> userQuery,"				select	pk_user_id,
						security
				from	users
				where	fk_company_id = $1
				and		pk_user_id = $2
				and		security > 1
				and		account_status =",350
Application.lib.FileUtil.checkAccessToPatient( ) -> patientQuery,"				select	fk_user_id
				from	users
				where	fk_company_id = $1
				and		pk_user_id = $2
				and		security = 1
				and		account_status =",350
Application.models.Survey.getSurveyAnswers( ) -> answersQuery,"				select	pk_survey_export_parsed_answer_id,
						option_id,
						answer_value,
						answer_text,
						custom_value
				from	survey_export_parsed_answers
				where	fk_company_id = $1
				and		fk_resource_id = $2
				order by",350
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 140 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",348
Application.models.ContentManager.getPrimaryCarePhysician( ) -> surveyUserQuery,"					select	max(""pk_SurveyUser_ID"") as ""pk_SurveyUser_ID""
					from	""SurveyUser""
					where	""fk_Resource_ID"" = $1
					and		""fk_User_ID_Self"" =",346
Application.helpers.SessionHelper.auditMedTeam( ) -> [insert],"				insert into audit_med_team
						(med_team_fk_user_id,
						fk_audit_action_id
							, patient_fk_user_id
							, fk_app_id
							, session_id
							, link_id
						)
				values	($1,
						$2 
							, $3 
							, $4 
							, $5 
							, $6",345
Application.models.Survey.getQuestionLabelByOptionId( ) -> questionsQuery,"				select	question.""pk_Resource_ID"" as question_id,
						question_label_row.""Predicate_V2_Value"" as question_label
				from 	""Resource"" as option_subclass_row
				join ""Resource"" as question on question.""pk_Resource_ID"" = option_subclass_row.""Predicate_V1_Value_fk_Resource_ID""
					and question.""Subject_fk_Schema_ID"" = 8 -- question schema id
				join ""Resource"" as question_label_row on question_label_row.""Object_fk_Resource_ID"" = question.""pk_Resource_ID""
					and question_label_row.""Subject_fk_Schema_ID"" = 33 -- question label schema id
				where	option_subclass_row.""Object_fk_Resource_ID"" = $1
				limit",341
Application.models.SurveyUserSolr.dump( ) -> submittersQuery,"						select	pk_user_id,
									substring(fname, '^([a-zA-Z])') as fname,
									substring(lname, '^([a-zA-Z])') as lname
						from	users
						where	pk_user_id in",338
Application.models.FormsLibrary.deleteOidMap( ) -> [delete],"				delete from survey_oid_map
				where fk_resource_id =",336
Application.models.PatientPortalTemplate.applyAutomaticPortalTemplate( ) -> patientQuery,"				select	fk_user_id
				from	users
				where	pk_user_id = $1
				and		fk_company_id =",332
Application.models.PatientPortalTemplate.applyAutomaticPortalTemplate( ) -> templatesQuery,"				select	distinct ppt.pk_patient_portal_template_id
				from	patient_portal_templates ppt
				left outer join patient_portal_template_assignment ppta on ppta.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
				where	ppt.fk_company_id = $1
				and		ppt.assign_on_patient_create = true
				and		(ppt.fk_user_id = $2
						or ppta.fk_user_id =",332
Application.models.Messaging.getMedTeam( ) -> medTeamQuery,"				select	distinct u.pk_user_id,
						u.fname,
						u.lname,
						u.email
				from	users u
				join medserviceprovider msp on msp.fk_user_id = u.pk_user_id
				join message_post_type_company_role mptcr on mptcr.fk_medserviceprovidertype_id = msp.fk_medserviceprovidertype_id
				where	u.fk_company_id = $1
				and		u.security > 1
				and		u.account_status = 1
				and		u.pk_user_id <> $2
				order by u.lname,",331
Application.models.Messaging.getForwardUsers( ) -> forwardersQuery,"				select 	u.pk_user_id,
						u.lname,
						u.fname,
						u.email
				from 	users u
				join medserviceprovider msp on msp.fk_user_id = u.pk_user_id
					and msp.fk_medserviceprovidertype_id = 48
				where 	u.fk_company_id = $1
				and 	u.security > 1
				and		u.account_status = 1
				and 	u.pk_user_id <> $2 
				order by u.lname,",331
Application.models.FormsLibrary.updateTimepoints( ) -> [update],"							update	survey_access
							set		
								physician_read = true,
								physician_edit = true,
								patient_read = true,
								patient_edit = true,
								site_read = false,
								site_edit = false
							where	fk_company_id = $1
							and		fk_resource_id =",326
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 90 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",324
Application.models.Patient.validatePatientAccount( ) -> patientQuery,"				select	fk_company_id,
						fname,
						lname,
						dob,
						email,
						mobile_phone,
						active,
						mayreceiveemailreminders,
						may_receive_sms_notifications
				from	users
				where	pk_user_id =",323
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fk_user_id"" =
									$2,
									""fname"" =
									$3,
									""lname"" =
									$4,
									""email"" =
									$5,
									""phone"" =
									$6,
									""datecreated"" =
									$7,
									""dateupdated"" =
									$8,
									""active"" =
									$9,
									""password"" =
									$10,
									""dob"" =
									$11,
									""internalid"" =
									$12,
									""reminderemail"" =
									$13,
									""mayreceiveemailreminders"" =
									$14,
									""agreedtotermsandconditions"" =
									$15,
									""has_changed_password"" =
									$16,
									""security"" =
									$17,
									""allow_self_reg"" =
									$18,
									""self_reg_capable"" =
									$19,
									""show_all_templates"" =
									$20,
									""import"" =
									$21,
									""gender"" =
									$22,
									""account_status"" =
									$23,
									""is_test_user"" =
									$24,
									""identity_validated"" =
									$25,
									""is_site_user"" =
									$26,
									""password_valid_until"" =
									$27,
									""may_receive_sms_notifications"" =
									$28,
									""is_deceased"" =
									$29,
									""is_default_user"" =
									$30,
									""is_alert_sender"" =
									$31,
									""reg_form_create"" =
									$32
					WHERE ""pk_user_id"" =",321
Application.lib.scheduled_scripts.TaskUFPTIMosaiqUpdates.run( ) -> lastProcessTimeQuery,"				select	process_time
				from 	process_times
				where 	process_id = 2
				and		process_time is not null
				and 	process_name = 'TaskUFPTIMosaiqUpdates.cfc'
				order by process_time desc
				limit",320
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 81 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",320
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 94 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",320
Application.models.User.getPhysiciansQuery( ) -> physiciansQuery,"				select	u.pk_user_id,
						u.fname,
						u.lname,
						u.internalid
				from	users u
				where	u.fk_company_id = $1 
				and		u.account_status = 1
				and		u.security = 2
				and		u.is_site_user = false
				and		u.lname is not null
				and		u.lname <> ''
				group by u.pk_user_id,
						u.fname,
						u.lname
				order by",319
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id =",317
Application.models.MDACCReminders.insertReminder( ) -> [insert],"				insert into user_todo_reminders_sent 
						(fk_user_todo_id,
						email_sent,
						reason,
						created_at,
						error_messages)
			",315
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"								update 	message_thread_users
								set 	fk_message_thread_state = 3,
										last_message_thread_state = 3,
										updated_at = now()
								where 	fk_user_id in ($1)
								and 	fk_message_thread_id = $2
								and 	fk_message_thread_state in",314
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"								update 	message_thread_users
								set 	fk_message_thread_state = 4,
										last_message_thread_state = 4,
										updated_at = now()
								where 	fk_user_id = $1
								and 	fk_message_thread_id = $2
								and 	fk_message_thread_state in",314
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
				or		""pk_SurveyUser_ID"" in ($13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24)
				order by",312
Application.models.Settings.validateUserId( ) -> userQuery,"				select	pk_user_id
				from	users
				where	pk_user_id =",311
Application.models.Settings.getRcopiaUsername( ) -> rcopiaUsernameQuery,"				select	rcopia_username
				from 	rcopia_credentials
				where 	fk_user_id =",311
Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> [update],"					update	communicatedreminder
					set		sentfasttrack = $1,
								sentdatetime = now(),
								errormessage = null
					where	pk_communicatedreminder_id =",309
Application.lib.FileUtil.getAcl( ) -> aclQuery,"	            select  ""pk_fileManagerACL_ID"", 
						""fk_fileManagerItem_ID"",
	                    ""fk_fileManagerUser_ID"", 
						""fk_fileManagerACL_ID"", 
						""fk_fileManagerPermissionType_ID""
	            from    ""fileManagerACL""
	            where   ""pk_fileManagerACL_ID"" = $1
	            and     is_deleted =",306
Application.lib.FileUtil.checkMD5HashInDatabase( ) -> dataQuery,"				select  ""pk_fileManagerData_ID""
				from    ""fileManagerData""
				where   ""MD5"" =",306
patient.portal.model.todos.ToDoGateway.getToDosByUser( ) -> todosQuery,"				select	ut.pk_user_todo_id, t.name, ut.display_position 
				from	user_todos ut
				join users u on u.pk_user_id = ut.fk_user_id
				join companies c on c.pk_company_id = u.fk_company_id
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
					and uscs.fk_completion_status_id = 1
				 join completion_statuses cs on cs.pk_completion_status_id = uscs.fk_completion_status_id
				 join todos t on t.pk_todo_id = ut.fk_todo_id
				 join survey_access sa on sa.fk_company_id = $1
					and sa.fk_resource_id = t.fk_resource_id
						and sa.patient_edit = true
				 join survey_templates_access sta on sta.fk_resource_id = t.fk_resource_id
					and sta.fk_company_id = $2
				 join survey_templates st on st.pk_survey_template_id = sta.fk_survey_template_id
					and st.fk_survey_template_type_id = 2
				left outer join user_portal_templates upt on upt.fk_patient_portal_template_id = ut.fk_patient_portal_template_id
					and upt.fk_user_id = ut.fk_user_id
					and upt.active = true
				left outer join patient_portal_templates ppt on ppt.pk_patient_portal_template_id = upt.fk_patient_portal_template_id
				where 	ut.fk_user_id = $3 
						and cast(ut.active_start_date as date) <= $4 
						and (
								cast(ut.active_end_date	as date) + interval '1 day'	> $5 
								or ut.active_end_date is null
							)
						and ut.active = true
				order by t.name, 
						ut.active",301
Application.models.Patient.getPatient( ) -> patientQuery,"				select	u.pk_user_id,
						u.fname,
						u.lname,
						u.dob,
						u.email,
						u.case_no,
						u.internalid,
						u.fk_user_id,
						u.fk_company_id
				from	users u
				where   u.fk_company_id = $1 
					and u.pk_user_id = $2 
				and		u.security = 1
				and		u.account_status =",300
Application.models.Messaging.sendEmail( ) -> doNotEmailQuery,"					select 	fk_user_id
					from 	medserviceprovider
					where 	fk_user_id in ($1)
					and 	fk_medserviceprovidertype_id =",297
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
				or		""pk_SurveyUser_ID"" in ($14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26)
				order by",297
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.case_no ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",295
Application.CFLangExtendLite.getCompanyIdFromBasicAuth( ) -> companyQuery,"						select	fk_company_id
						from	users
						where	login = $1
						and		check_password($2,",293
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368567$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1205091758$dontbeevilman$
							AND
					1 =",292
Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> surveyUsersQuery,"				select	su.""pk_SurveyUser_ID"", 
						su.""DateAdded"", 
						su.""DateCompleted"", 
						su.""fk_Resource_ID"", 
						su.""fk_User_ID_Self"", 
						su.revision_type, 
						su.revision_fk_surveyuser_id, 
						updated_at,
						u.fk_company_id 
				from	""SurveyUser"" su
				join dblink(
						$joint$hc_dblink_server_connection$joint$::text, $joint$
							select	pk_user_id,
									fk_company_id
							from	users
							where	account_status = 1
						$joint$::text
					) as u (pk_user_id bigint, fk_company_id bigint) 
					on u.pk_user_id = su.""fk_User_ID_Self""
				where	su.updated_at > $1
				order by su.updated_at
					limit",288
Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> [update],"				update	survey_indexing_runs
				set 	is_last_run = false
				where	is_last_run =",288
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 115 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",288
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 96 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",288
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 144 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",288
Application.models.Messaging.postMessage( ) -> createMessageThread,"						insert 	into message_thread2
								(thread_name,
								patient_id,
									physician_id,
								from_id,
								to_id,
								medside_recipient_type_id,
								fk_message_post_type_company_role_id,
								roles_based_mailbox_name,
								fk_medserviceprovidertype_id,
								fk_message_post_type_id,
								created_by)
						values 	($1,
								$2,
								$3,
								$4,
								$5,
								$6,
								$7,
								$8,
								$9,
								$10,
								$11)
						returning pk_message_thread_id as",287
Application.models.FormsLibrary.getImportedTemplates( ) -> templatesQuery,"				select	distinct st.git_path
				from	survey_templates st
				join survey_timepoint_survey_template stst on stst.survey_template_id = st.pk_survey_template_id
				join survey_timepoints stp on stp.id = stst.survey_timepoint_id
				join survey_company sc on sc.survey_id = stp.survey_id
					and sc.company_id = $1
				join survey_timepoint_survey_schema stss on stss.survey_timepoint_id = stp.id
				join survey_schemas ss on ss.id = stss.survey_schema_id
				join survey_access sa on sa.fk_company_id = sc.company_id
					and sa.fk_resource_id = ss.survey_resource_id
				where	st.git_path is not null
				and		st.ts_git_import is not null
				and		st.fk_survey_template_type_id = 2
				order by",287
Application.App.getEmailRecipientsByRole( ) -> recipientsQuery,"
				select	distinct u.email
				from	medserviceprovidertype mspt
				join medserviceprovider msp on msp.fk_medserviceprovidertype_id = mspt.pk_medserviceprovidertype_id
				join users u on u.pk_user_id = msp.fk_user_id
					and u.email is not null
					and u.email <> ''
					and u.fk_company_id = $1
					and u.account_status = 1
				where	lower(mspt.providertype) =",287
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341538$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1427032663$dontbeevilman$
							AND
					1 =",285
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368568$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1427125053$dontbeevilman$
							AND
					1 =",284
Application.models.Messaging.postMessage( ) -> createMessageThread,"						insert 	into message_thread2
								(thread_name,
								patient_id,
								from_id,
								to_id,
								medside_recipient_type_id,
								fk_message_post_type_company_role_id,
								roles_based_mailbox_name,
								fk_medserviceprovidertype_id,
								fk_message_post_type_id,
								created_by)
						values 	($1,
								$2,
								$3,
								$4,
								$5,
								$6,
								$7,
								$8,
								$9,
								$10)
						returning pk_message_thread_id as",283
Application.models.Patient.updatePatientRegistration( ) -> surveyStatusQuery,"						select 	fk_surveyuser_id
						from	user_survey_completion_statuses
						where 	fk_surveyuser_id =",281
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 132 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",280
Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> lastRunQuery,"					select	survey_indexing_run_id, 
							start_time, 
							end_time, 
							surveys_indexed, 
							is_last_run, 
							surveys_start_at, 
							surveys_end_at
					from	survey_indexing_runs
					where	survey_indexing_run_id > 0
					order by survey_indexing_run_id desc
					limit",278
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368567$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1861407421$dontbeevilman$
							AND
					1 =",278
Application.models.PatientPortalTemplate.getTemplate( ) -> formsQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptt.pk_patient_portal_template_todos_id,
						pptt.active_start_interval,
						pptt.active_end_interval,
						date('05/04/2022') as start_date,
						date('05/04/2022') + pptt.active_start_interval as active_start_date,
						date('05/04/2022') + pptt.active_start_interval + pptt.active_end_interval as active_end_date,
						t.pk_todo_id,
						t.name as todo_name,
						t.fk_resource_id
				from 	patient_portal_templates ppt 
				join patient_portal_template_todos pptt on pptt.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
				join todos t on t.pk_todo_id = pptt.fk_todo_id
				where	ppt.pk_patient_portal_template_id = $1
				and		pptt.active = true
				order by pptt.display_position,",278
Application.models.PatientPortalTemplate.getTemplate( ) -> calendarTemplatesQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptc.pk_patient_portal_template_calendar_id,
						pptc.active_start_interval,
						date('05/04/2022') + pptc.active_start_interval as active_start_date,
						ct.pk_calendartemplate_id,
						ct.name as calendar_name
				from 	patient_portal_templates ppt 
				join patient_portal_template_calendars pptc on pptc.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptc.active = true
				join calendartemplate ct on ct.pk_calendartemplate_id = pptc.fk_calendar_template_id
				where	ppt.pk_patient_portal_template_id = $1
				order by",278
Application.models.PatientPortalTemplate.getTemplate( ) -> eduMediaQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptem.pk_patient_portal_template_education_material_id,
						pptem.active_start_interval,
						pptem.active_end_interval,
						date('05/04/2022') + pptem.active_start_interval as active_start_date,
						date('05/04/2022') + pptem.active_start_interval + pptem.active_end_interval as active_end_date,
						fma.""pk_fileManagerACL_ID"",
						fmi.""Name"",
						fmi.""fileExtension"" as file_ext
				from 	patient_portal_templates ppt 
				join patient_portal_template_education_material pptem on pptem.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptem.active = true
				join ""fileManagerACL"" fma on fma.""pk_fileManagerACL_ID"" = pptem.""fk_fileManagerACL_ID""
				join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
				where	ppt.pk_patient_portal_template_id = $1
				order by pptem.display_position,",278
Application.models.PatientPortalTemplate.saveTemplateForms( ) -> [insert],						insert	into,278
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",276
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739078$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$48822$dontbeevilman$
							AND
					1 =",273
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
				or		""pk_SurveyUser_ID"" in ($12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22)
				order by",271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [delete],"				delete	from ufpti_users_mirror 
				where 	trim(ida) =",271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [update],"				update 	ufpti_users_mirror
				set		MAIDEN_NAME = $1,
						MAIL_PREF = $2,
						MARITAL = $3,
						MED_STS = $4,
						MIDDLE_NAME = $5,
						MIDDLE_NAME_SECONDARY = $6,
						MIDDLE_NAME_SINGLEBYTE = $7,
						MONTHLY_PAY = $8,
						NEXT_STMT_MSG = $9,
						NOTE_ID = $10,
						NOWRK_END_DTTM = $11,
						NOWRK_START_DTTM = $12,
						NUM_CHILDREN = $13,
						NURSE_UNIT = $14,
						OCCUPATIONAL_STATUS = $15,
						OTH_STAFF_ID = $16,
						OUT_FAC_ID = $17,
						PAT_ADR1 = $18,
						PAT_ADR2 = $19,
						PAT_ALT_ADR1 = $20,
						PAT_ALT_ADR2 = $21,
						PAT_ALT_CELLPHONE = $22,
						PAT_ALT_CITY = $23,
						PAT_ALT_COUNTRY = $24,
						PAT_ALT_COUNTY = $25,
						PAT_ALT_EMAIL = $26,
						PAT_ALT_FAX = $27,
						PAT_ALT_HOME_PHONE = $28,
						PAT_ALT_HOME_PHONE_EXT = $29,
						PAT_ALT_PAGER = $30,
						PAT_ALT_POSTAL = $31,
						PAT_ALT_STATE = $32,
						PAT_ALT_WORK_PHONE = $33,
						PAT_ALT_WORK_PHONE_EXT = $34,
						PAT_CELLPHONE = $35,
						PAT_CENS_ID = $36,
						PAT_CENS_TRC = $37,
						PAT_CITY = $38,
						PAT_COUNTRY = $39,
						PAT_COUNTY = $40,
						PAT_EMAIL = $41,
						PAT_EMPLOYER = $42,
						PAT_EMP_STAT = $43,
						PAT_FAX = $44,
						PAT_HOME_PHONE = $45,
						PAT_HOME_PHONE_EX = $46,
						PAT_ID1 = $47,
						PAT_OCCUPAT = $48,
						PAT_PAGER = $49,
						PAT_POSTAL = $50,
						PAT_STATE = $51,
						PAT_WORK_PHONE = $52,
						PAT_WORK_PHONE_EX = $53,
						PHARMACIST_ID = $54,
						PHARMACY_FAC_ID = $55,
						PHARMACY_NOTE_ID = $56,
						POS12ADDRESS = $57,
						PREVIOUS_RT_DTTM = $58,
						PRI_MD_ID = $59,
						PSDA_INFO_DTTM = $60,
						PSDA_INFO_NOTE_ID = $61,
						PSDA_INFO_STAFF_ID = $62
				where	IDA =",271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [update],"				update 	ufpti_users_mirror
				set		EARLY_ILL_DTTM = $1,
						EDIT_DTTM = $2,
						EDIT_ID = $3,
						ELIGIBILITYCHECKED_DTTM = $4,
						EMERG = $5,
						EMG_ADR1 = $6,
						EMG_ADR2 = $7,
						EMG_CELLPHONE = $8,
						EMG_CITY = $9,
						EMG_COUNTRY = $10,
						EMG_COUNTY = $11,
						EMG_EMAIL = $12,
						EMG_FAX = $13,
						EMG_FNAME = $14,
						EMG_HOME_PHONE = $15,
						EMG_HOME_PHONE_EX = $16,
						EMG_LNAME = $17,
						EMG_PAGER = $18,
						EMG_POSTAL = $19,
						EMG_RELATE = $20,
						EMG_STATE = $21,
						EMG_WORK_PHONE = $22,
						EMG_WORK_PHONE_EX = $23,
						EMPLOYED = $24,
						EMP_ADR1 = $25,
						EMP_ADR2 = $26,
						EMP_CELLPHONE = $27,
						EMP_CITY = $28,
						EMP_COUNTRY = $29,
						EMP_COUNTY = $30,
						EMP_EMAIL = $31,
						EMP_FAX = $32,
						EMP_PAGER = $33,
						EMP_PHONE = $34,
						EMP_PHONE_EX = $35,
						EMP_POSTAL = $36,
						EMP_STATE = $37,
						END_DTTM = $38,
						EPSDT = $39,
						ETHNICITY_PRO_ID = $40,
						EXPIRED_DTTM = $41,
						FAM_PL = $42,
						FCL_ID = $43,
						FIRST_NAME = $44,
						FIRST_NAME_SECONDARY = $45,
						FIRST_NAME_SINGLEBYTE = $46,
						GENDER = $47,
						HMCR_AGENCY = $48,
						HMCR_MED_DIRECTOR = $49,
						HMCR_NURSE = $50,
						HMCR_SOCIAL_WORKER = $51,
						HMCR_STATUS = $52,
						HOSPICEAGENCY = $53,
						HOSPICEMEDDIRECTOR = $54,
						HOSPICENURSE = $55,
						HOSPICESOCIALWORKER = $56,
						HOSPICESTATUS = $57
				where	IDA =",271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> patientQuery,"				select	pk_user_id 
				from 	users 
				where 	internalid = $1 
				and 	fk_company_id = $2
				and 	account_status = 1
				and 	security = 1
				and 	is_test_user <>",271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [update],"				update 	ufpti_users_mirror
				set		IDB = $1,
						IDB_INST_ID = $2,
						IDC = $3,
						IDC_INST_ID = $4,
						IDD = $5,
						IDD_INST_ID = $6,
						IDE = $7,
						IDENT_ID = $8,
						IDENT_SET_ID = $9,
						IDE_INST_ID = $10,
						IDF = $11,
						IDF_INST_ID = $12,
						ILL_DTTM = $13,
						INACTIVE = $14,
						IN_FAC_ID = $15,
						ISGLOBAL = $16,
						ISINPATIENT = $17,
						KIN_ADR1 = $18,
						KIN_ADR2 = $19,
						KIN_CELLPHONE = $20,
						KIN_CITY = $21,
						KIN_COUNTRY = $22,
						KIN_COUNTY = $23,
						KIN_EMAIL = $24,
						KIN_EMPLOYER = $25,
						KIN_EMP_ADR1 = $26,
						KIN_EMP_ADR2 = $27,
						KIN_EMP_CELLPHONE = $28,
						KIN_EMP_CITY = $29,
						KIN_EMP_COUNTRY = $30,
						KIN_EMP_COUNTY = $31,
						KIN_EMP_EMAIL = $32,
						KIN_EMP_FAX = $33,
						KIN_EMP_PAGER = $34,
						KIN_EMP_PHONE = $35,
						KIN_EMP_PHONE_EX = $36,
						KIN_EMP_POSTAL = $37,
						KIN_EMP_STATE = $38,
						KIN_FAX = $39,
						KIN_FNAME = $40,
						KIN_HOME_PHONE = $41,
						KIN_HOME_PHONE_EX = $42,
						KIN_LNAME = $43,
						KIN_OCCUPAT = $44,
						KIN_PAGER = $45,
						KIN_POSTAL = $46,
						KIN_RELATE = $47,
						KIN_STATE = $48,
						KIN_WORK_PHONE = $49,
						KIN_WORK_PHONE_EX = $50,
						LANGUAGE_SPOKEN_PRO_ID = $51,
						LAST_NAME = $52,
						LAST_NAME_SECONDARY = $53,
						LAST_NAME_SINGLEBYTE = $54
				where	IDA =",271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [update],"				update 	ufpti_users_mirror
				set		TRAN_MODE = $1,
						USER_DEFINED_DTTM_1 = $2,
						USER_DEFINED_DTTM_2 = $3,
						USER_DEFINED_INFO1 = $4,
						USER_DEFINED_INFO2 = $5,
						USER_DEFINED_INFO3 = $6,
						USER_DEFINED_INFO4 = $7,
						USER_DEFINED_PRO_ID_1 = $8,
						USER_DEFINED_PRO_ID_2 = $9,
						USER_DEFINED_PRO_ID_3 = $10,
						USER_DEFINED_PRO_ID_4 = $11,
						USE_ALTERNATE_STMT = $12,
						USUAL_INDUSTRY = $13,
						USUAL_OCCUPAT = $14,
						VERSION = $15,
						VIP = $16,
						WK_RET_DTTM = $17,
						WRITE_OFF_ADJ = $18,
						WRITE_OFF_PERCENT = $19
				where	IDA =",271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [update],"				update 	ufpti_users_mirror
				set		RACE = $1,
						REF_FROM_FAC_ID = $2,
						REF_MD2_ID = $3,
						REF_MD3_ID = $4,
						REF_MD_ID = $5,
						REF_STFEXT_MD1_ID = $6,
						REF_STFEXT_MD2_ID = $7,
						REF_STFEXT_MD3_ID = $8,
						REF_STFEXT_MD4_ID = $9,
						REF_STFEXT_MD5_ID = $10,
						REF_STFEXT_MD6_ID = $11,
						REF_STFEXT_MD7_ID = $12,
						REF_TO_FAC_ID = $13,
						RELIGION = $14,
						REL_ACC = $15,
						REL_EMPL = $16,
						RESTRICTED = $17,
						RES_MD_ID = $18,
						ROOM_NUM = $19,
						SALUTATION = $20,
						SANCT_DTTM = $21,
						SANCT_DTTM2 = $22,
						SANCT_ID = $23,
						SANCT_ID2 = $24,
						SCHOOL = $25,
						SIGNATURE = $26,
						SIGNATURE_DTTM = $27,
						SIGNATURE_SOURCE = $28,
						SS_NUMBER = $29,
						START_DTTM = $30,
						STATUS_INACTIVE = $31,
						STATUS_PRIVATE = $32,
						STF_MD1_INST_ID = $33,
						STF_MD2_ID = $34,
						STF_MD2_INST_ID = $35,
						STF_MD3_ID = $36,
						STF_MD3_INST_ID = $37,
						STF_MD4_ID = $38,
						STF_MD4_INST_ID = $39,
						STF_MD5_ID = $40,
						STF_MD5_INST_ID = $41,
						STF_MD6_ID = $42,
						STF_MD6_INST_ID = $43,
						STF_MD7_ID = $44,
						STF_MD7_INST_ID = $45,
						STMT_CYCLE = $46,
						STMT_MSG = $47,
						STUDENT = $48,
						SUFFIX = $49
				where	IDA =",271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> ufptiMirrorQuery,"				select	first_name,
						last_name,
						middle_name,
						gender,
						birth_dttm,
						alias_name,
						pat_city,
						pat_state,
						pat_postal,
						pat_adr1,
						pat_adr2,
						pat_home_phone,
						pat_cellphone,
						idb
				from 	ufpti_users_mirror 
				where 	trim(IDA) =",271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [insert],				insert into,271
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [update],"				update 	ufpti_users_mirror
				set		ACCID_STATE = $1,
						ACCNT_STS = $2,
						ACC_ASSIGN = $3,
						ADM_DTTM = $4,
						ADM_ID = $5,
						ADM_MD_ID = $6,
						ALIAS_NAME = $7,
						ATTENDING_MD_ID = $8,
						BED_NUM = $9,
						BIRTH_DTTM = $10,
						BIRTH_PLACE = $11,
						CAUSEOFDEATH_PRO_ID = $12,
						CCDWITHHELD = $13,
						CCDWITHHELD_BY = $14,
						CCDWITHHELD_DTTM = $15,
						CHAMP_AVAIL = $16,
						CHAMP_BRANCH = $17,
						CHAMP_GRD = $18,
						CHAMP_PROG = $19,
						CHAMP_STS = $20,
						CHG_INTEREST = $21,
						CLIN_STATUS = $22,
						CONSULT_DATE = $23,
						CONTACTPREFERENCE_PRO_ID = $24,
						CO_PAY_AMNT = $25,
						CO_PAY_PERC = $26,
						DECEASEDWHILEINCARE = $27,
						DEDUCTIBLE = $28,
						DISABLED = $29,
						DISCHARGE_DTTM = $30,
						DIS_P1_DTTM = $31,
						DIS_P2_DTTM = $32,
						DIS_T1_DTTM = $33,
						DIS_T2_DTTM = $34
				where	IDA =",271
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> [insert],"								insert	into communicatedreminder
										(fk_calendaritem_id,
										method,
										senddatetime,
										offsettype
										)
								values	($1,
										'email',
										$2,
										$3",266
Application.helpers.SessionHelper.auditPatient( ) -> [insert],"				insert into audit_patient
						(fk_user_id,
						fk_audit_action_id
							, notes
							, fk_app_id
							, session_id
							, link_id
						)
				values	($1,
						$2 
							, $3 
							, $4 
							, $5 
							, $6",265
Application.helpers.EmailHelper.emailPatientLoginCard( ) -> [update],"	            update	users
	            set 	password = $1,
	                    has_changed_password = false,
	                    password_valid_until = (now() + interval '168 hours')
	            where 	pk_user_id =",264
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> calendarTemplateItemsQuery,"						select	pk_calendartemplateitem_id,
								event,
								description, 
								offsetyears,
								offsetmonths,
								offsetweeks,
								offsetdays,
								emailtext,
								send_fasttrack_email
						from	calendartemplateitem
						where	fk_calendartemplate_id =",264
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> insertPatientCalendarTemplate,"						insert	into user_calendar_templates					
								(fk_user_id,
								fk_calendar_template_id,
								fk_patient_portal_template_id,
								assigned_by_fk_user_id,
								modified_by_fk_user_id,
								active,
								active_start_date,
								display_position,
								name)
						values	($1,
								$2,
								$3,
								$4,
								$5,
								true,
								$6,
								$7,
								$8)
						returning",264
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
							and lower(u.lname) ilike",264
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 29 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",264
Application.models.PatientPortalTemplate.getPortalTemplatesByUser( ) -> portalTemplatesQuery,"				select	ppt.pk_patient_portal_template_id
				from	patient_portal_templates ppt
				join patient_portal_template_share ppts on ppts.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
				where	ppt.fk_company_id = $1
				group by",263
Application.models.Video.getRoomId( ) -> conferenceQuery,"				select	pk_video_conference_id,
						room_id,
						case
							when (datecreated + '480 minutes'::interval) <= now()
							then true
							else false
						end as token_expired
				from	video_conference
				where	fk_company_id = $1
				and		physician_fk_user_id = $2
				and		patient_fk_user_id = $3
				order by pk_video_conference_id desc
				limit",262
Application.models.Patient.setPatientInfo( ) -> patientQuery,"				select	mayreceiveemailreminders,
						may_receive_sms_notifications,
						active
				from	users
				where	pk_user_id =",260
Application.helpers.SessionHelper.auditMedTeam( ) -> [insert],"				insert into audit_med_team
						(med_team_fk_user_id,
						fk_audit_action_id
							, session_id
						)
				values	($1,
						$2 
							, $3",257
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341541$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1093775694$dontbeevilman$
							AND
					1 =",255
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
							, submitter_id
							)
					values ( $1,
							$2,
							$3,
							$4 
							, $5 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",254
Application.models.User.getDefaultUser( ) -> userQuery,"				select	pk_user_id
				from	users
				where	fk_company_id = $1
				and		security > 1
				and		account_status = 1
				and		is_default_user =",254
Application.models.User.getDefaultUser( ) -> userQuery,"				select	pk_user_id,
						security
				from	users
				where	fk_company_id = $1
				and		security > 1
				and		account_status = 1
				and		is_test_user = true
				order by security desc, pk_user_id asc
				limit",254
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739077$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$182387$dontbeevilman$
							AND
					1 =",254
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341531$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1033193800$dontbeevilman$
							AND
					1 =",253
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_timepoints"" (""survey_id"",""named_interval"",""timepoint_interval"")
					VALUES (
						$1 , $2 , $3::interval 
					)
					RETURNING id as",253
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
								, revision_type
								, revision_fk_surveyuser_id
							, submitter_id
								, fk_login_mode_id
							)
					values ( $1,
							$2,
							$3,
							$4 
								, 'update'
								, $5 
							, $6 
								, $7 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",253
Application.CFLangExtendLite.getCompanyIdFromBasicAuth( ) -> patientQuery,"					select	pk_user_id,
							account_status
					from	users
					where	fk_company_id = $1 
						and	pk_user_id = $2 
					and		security =",252
Application.models.PatientPortal.getNode( ) -> nodeItemsQuery,"				select	fmi.""fk_fileManagerItem_ID"",
						fmi.""Name"",
						fmi.""isDirectory"",
						fmi.""fileExtension"",
						fmi.""DateAdded"",
						fmi.""patientReadOnly"",
						fma.""pk_fileManagerACL_ID"",
						fma.""fk_fileManagerACL_ID"",
						fma.""fk_fileManagerUser_ID"",
						fma.""fk_fileManagerPermissionType_ID""
	            from	""fileManagerItem"" fmi
	            join ""fileManagerACL"" fma on fma.""fk_fileManagerItem_ID"" = fmi.""pk_fileManagerItem_ID""
	                and fma.is_deleted = false
	            where	fma.""fk_fileManagerUser_ID"" = $1 
	                and fmi.""fk_fileManagerItem_ID"" is null
				and		fmi.display = true
	            order by	fmi.""isDirectory"" desc,
	                        fmi.""Name""",252
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 161 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",252
Application.models.PatientPortalTemplate.getTemplate( ) -> calendarTemplatesQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptc.pk_patient_portal_template_calendar_id,
						pptc.active_start_interval,
						date('05/05/2022') + pptc.active_start_interval as active_start_date,
						ct.pk_calendartemplate_id,
						ct.name as calendar_name
				from 	patient_portal_templates ppt 
				join patient_portal_template_calendars pptc on pptc.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptc.active = true
				join calendartemplate ct on ct.pk_calendartemplate_id = pptc.fk_calendar_template_id
				where	ppt.pk_patient_portal_template_id = $1
				order by",251
Application.models.PatientPortalTemplate.getTemplate( ) -> formsQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptt.pk_patient_portal_template_todos_id,
						pptt.active_start_interval,
						pptt.active_end_interval,
						date('05/05/2022') as start_date,
						date('05/05/2022') + pptt.active_start_interval as active_start_date,
						date('05/05/2022') + pptt.active_start_interval + pptt.active_end_interval as active_end_date,
						t.pk_todo_id,
						t.name as todo_name,
						t.fk_resource_id
				from 	patient_portal_templates ppt 
				join patient_portal_template_todos pptt on pptt.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
				join todos t on t.pk_todo_id = pptt.fk_todo_id
				where	ppt.pk_patient_portal_template_id = $1
				and		pptt.active = true
				order by pptt.display_position,",251
Application.models.PatientPortalTemplate.getTemplate( ) -> eduMediaQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptem.pk_patient_portal_template_education_material_id,
						pptem.active_start_interval,
						pptem.active_end_interval,
						date('05/05/2022') + pptem.active_start_interval as active_start_date,
						date('05/05/2022') + pptem.active_start_interval + pptem.active_end_interval as active_end_date,
						fma.""pk_fileManagerACL_ID"",
						fmi.""Name"",
						fmi.""fileExtension"" as file_ext
				from 	patient_portal_templates ppt 
				join patient_portal_template_education_material pptem on pptem.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptem.active = true
				join ""fileManagerACL"" fma on fma.""pk_fileManagerACL_ID"" = pptem.""fk_fileManagerACL_ID""
				join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
				where	ppt.pk_patient_portal_template_id = $1
				order by pptem.display_position,",251
Application.models.PatientPortalTemplate.copyPatientPortalTemplates( ) -> [insert],							insert into,248
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.case_no ilike",247
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscFoley') and fk_company_id = 10
						AND
					1 =",246
Application.models.PatientPortal.getNode( ) -> nodeQuery,"	                select	fma.""fk_fileManagerItem_ID""
	                from	""fileManagerACL"" as fma
	                where	fma.""pk_fileManagerACL_ID"" = $1
					and		""fk_fileManagerUser_ID"" =",246
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 156 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",246
Application.models.PatientPortal.getNode( ) -> nodeItemsQuery,"				select	fmi.""fk_fileManagerItem_ID"",
						fmi.""Name"",
						fmi.""isDirectory"",
						fmi.""fileExtension"",
						fmi.""DateAdded"",
						fmi.""patientReadOnly"",
						fma.""pk_fileManagerACL_ID"",
						fma.""fk_fileManagerACL_ID"",
						fma.""fk_fileManagerUser_ID"",
						fma.""fk_fileManagerPermissionType_ID""
	            from	""fileManagerItem"" fmi
	            join ""fileManagerACL"" fma on fma.""fk_fileManagerItem_ID"" = fmi.""pk_fileManagerItem_ID""
	                and fma.is_deleted = false
	            where	fma.""fk_fileManagerUser_ID"" = $1 
	                and fmi.""fk_fileManagerItem_ID"" = $2 
				and		fmi.display = true
	            order by	fmi.""isDirectory"" desc,
	                        fmi.""Name""",246
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368567$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1801853171$dontbeevilman$
							AND
					1 =",245
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",245
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fname"" =
									$2,
									""lname"" =
									$3,
									""email"" =
									$4,
									""datecreated"" =
									$5,
									""dateupdated"" =
									$6,
									""active"" =
									$7,
									""password"" =
									$8,
									""login"" =
									$9,
									""internalid"" =
									$10,
									""sudo_as_fk_user_id"" =
									$11,
									""agreedtotermsandconditions"" =
									$12,
									""has_changed_password"" =
									$13,
									""security"" =
									$14,
									""allow_self_reg"" =
									$15,
									""self_reg_capable"" =
									$16,
									""show_all_templates"" =
									$17,
									""account_status"" =
									$18,
									""sudo_retain_user_security"" =
									$19,
									""e_auth"" =
									$20,
									""name_suffix"" =
									$21,
									""is_test_user"" =
									$22,
									""identity_validated"" =
									$23,
									""is_site_user"" =
									$24,
									""may_receive_sms_notifications"" =
									$25,
									""is_deceased"" =
									$26,
									""is_default_user"" =
									$27,
									""is_alert_sender"" =
									$28,
									""reg_form_create"" =
									$29
					WHERE ""pk_user_id"" =",244
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341541$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1790717676$dontbeevilman$
							AND
					1 =",244
Application.models.Patient.checkPatientIdInUse( ) -> patientQuery,"				select	pk_user_id
				from	users
				where	fk_user_id = $1
				and		pk_user_id <> $2
				and		internalid = $3
				and		account_status = 1
				and		security =",244
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [update],"					update	users_ufpti 
					set 	city = $1,
							state = $2,
							postal = $3,
							address1 = $4,
							address2 = $5,
							homephone = $6,
							cellphone = $7,
							shands_no = $8
					where 	fk_user_id =",243
Application.models.FormsLibrary.processSurvey( ) -> insertSurvey,									select insert_survey($1) as,243
Application.App.save( ) -> save,"
					INSERT INTO  ""survey_timepoints"" (""survey_id"",""named_interval"",""timepoint_interval"",""schemas"")
					VALUES (
						$1 , $2 , $3::interval , 
								null
					)
					RETURNING id as",242
Application.models.MethodBoard.getOptionsArray( ) -> optionsQuery,"						select	pk_company_id as value,
								(name || ' (' || pk_company_id || ')') as text
						from	companies
						where	region = $1::region
						and		is_active = true
						order by",242
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7)
							or revision_fk_surveyuser_id in ($8,$9,$10,$11,$12,$13,$14)
					order by",241
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 150 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",240
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id =",240
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739078$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$91289$dontbeevilman$
							AND
					1 =",234
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
				or		""pk_SurveyUser_ID"" in ($15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28)
				order by",233
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",231
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id not in ($1)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in",230
Application.models.PatientPortalTemplate.getAutomaticTemplates( ) -> templatesQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name
				from	patient_portal_templates ppt
				join	patient_portal_template_assignment ppta on ppta.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and ppta.fk_user_id = $1
				where	ppt.fk_company_id = $2
				and		ppt.assign_on_patient_create =",230
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id not in ($1)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",227
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
							and lower(u.lname) ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",225
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 140 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",224
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 156 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",224
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 70 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",224
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15)
				or		""pk_SurveyUser_ID"" in ($16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30)
				order by",222
Application.models.Survey.getSurveyInfo( ) -> parsedStatusQuery,"				select	pk_survey_export_parsed_survey_id,
						date_created
				from	survey_export_parsed_surveys
				where	fk_company_id = $1
				and		fk_resource_id =",220
Application.models.Survey.getSurveyInfo( ) -> timepointsQuery,"				select	count(stp2.id) as timepoint_count
				from	survey_templates_access sta
				join survey_timepoint_survey_template stst on stst.survey_template_id = sta.fk_survey_template_id
				join survey_timepoints stp on stp.id = stst.survey_timepoint_id
				join survey_timepoints stp2 on stp2.survey_id = stp.survey_id
					and stp2.id <> stp.id
				where	sta.fk_company_id = $1
				and		sta.fk_resource_id =",220
Application.models.Survey.getSurveyInfo( ) -> exportSetupQuery,"				select	count(*) as question_count
				from	survey_export_questions
				where	fk_company_id = $1
				and		fk_resource_id =",220
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341541$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1942664560$dontbeevilman$
							AND
					1 =",217
Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.insertSurveyRun( ) -> insQry,"
				insert into survey_indexing_runs 
						(start_time, 
						end_time, 
						surveys_indexed, 
						surveys_errored,
						is_last_run,
						surveys_remaining,
						surveys_start_at,
						surveys_end_at)
				values	($1,
						$2,
						$3,
						$4,
						$5,
						$6,
						$7,
						$8)
				returning",216
/patient/logout.cfm -> [insert],"			insert	into userslog 
					(fk_users_id, 
					ts, 
					ipaddy, 
					action)
			values ($1,
					now(), 
					$2,",214
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
							and lower(u.lname) ilike",213
Application.models.Messaging.getPostTypeInfo( ) -> postTypeQuery,"				select	mptcr.pk_message_post_type_company_role_id,
						mptcr.fk_message_post_type_id,
						mptcr.fk_medserviceprovidertype_id,
						mptcr.medside_recipient_type_id,
						mptcr.roles_based_mailbox_name,
						mptcr.send_email,
						mptcr.show_in_compose_actions
				from 	message_post_type_company_role mptcr
				join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
					join message_thread2 mt on mt.fk_message_post_type_company_role_id = mptcr.pk_message_post_type_company_role_id
						and mt.pk_message_thread_id = $1 
				where 	mptcr.fk_company_id =",210
Application.models.PatientPortalTemplate.getTemplate( ) -> formsQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptt.pk_patient_portal_template_todos_id,
						pptt.active_start_interval,
						pptt.active_end_interval,
						date('05/03/2022') as start_date,
						date('05/03/2022') + pptt.active_start_interval as active_start_date,
						date('05/03/2022') + pptt.active_start_interval + pptt.active_end_interval as active_end_date,
						t.pk_todo_id,
						t.name as todo_name,
						t.fk_resource_id
				from 	patient_portal_templates ppt 
				join patient_portal_template_todos pptt on pptt.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
				join todos t on t.pk_todo_id = pptt.fk_todo_id
				where	ppt.pk_patient_portal_template_id = $1
				and		pptt.active = true
				order by pptt.display_position,",208
Application.models.PatientPortalTemplate.getTemplate( ) -> eduMediaQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptem.pk_patient_portal_template_education_material_id,
						pptem.active_start_interval,
						pptem.active_end_interval,
						date('05/03/2022') + pptem.active_start_interval as active_start_date,
						date('05/03/2022') + pptem.active_start_interval + pptem.active_end_interval as active_end_date,
						fma.""pk_fileManagerACL_ID"",
						fmi.""Name"",
						fmi.""fileExtension"" as file_ext
				from 	patient_portal_templates ppt 
				join patient_portal_template_education_material pptem on pptem.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptem.active = true
				join ""fileManagerACL"" fma on fma.""pk_fileManagerACL_ID"" = pptem.""fk_fileManagerACL_ID""
				join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
				where	ppt.pk_patient_portal_template_id = $1
				order by pptem.display_position,",208
Application.models.PatientPortalTemplate.getTemplate( ) -> calendarTemplatesQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptc.pk_patient_portal_template_calendar_id,
						pptc.active_start_interval,
						date('05/03/2022') + pptc.active_start_interval as active_start_date,
						ct.pk_calendartemplate_id,
						ct.name as calendar_name
				from 	patient_portal_templates ppt 
				join patient_portal_template_calendars pptc on pptc.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptc.active = true
				join calendartemplate ct on ct.pk_calendartemplate_id = pptc.fk_calendar_template_id
				where	ppt.pk_patient_portal_template_id = $1
				order by",208
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 135 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",208
Application.models.SurveyUser.copyFormToAssociatedUser( ) -> surveyAccessQuery,"						select	physician_edit,
								patient_edit
						from	survey_access
						where	fk_company_id = $1
						and		fk_resource_id =",207
Application.models.SurveyUser.copyFormToAssociatedUser( ) -> sourceSurveyUserQuery,"							select 	revision_fk_surveyuser_id,
									""DateAdded"",
									""DateCompleted""
							from	""SurveyUser""
							where	""pk_SurveyUser_ID"" =",206
Application.models.SurveyUser.copyFormToAssociatedUser( ) -> sourceSurveyUserQuery2,"							select 	surveyuser_association_uuid
							from	""SurveyUser""
							where	""pk_SurveyUser_ID"" =",206
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368567$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1952362816$dontbeevilman$
							AND
					1 =",206
Application.lib.FileUtil.createPatientFoldersfromArray( ) -> insertFolder,"					insert	into ""fileManagerItem""
							(""Name"",
								""fk_fileManagerItem_ID"",
								""display"",
							""isDirectory"")
					values",204
Application.models.Patient.updatePatientRegistration( ) -> physicianQuery,"					select	is_site_user
					from	users
					where	pk_user_id =",204
Application.models.Patient.setPatientInfo( ) -> currentPhysicianQuery,"					select	fk_user_id
					from	users
					where	pk_user_id =",204
Application.models.SurveyUser.getAssociatedSurveyUserId( ) -> surveyUserQuery,"				select 	revision_fk_surveyuser_id
				from	""SurveyUser""
				where	""pk_SurveyUser_ID"" =",201
Application.models.SurveyUser.getAssociatedSurveyUserId( ) -> associatedSurveyUserQuery,"				select 	su2.""pk_SurveyUser_ID"",
						su2.fk_survey_tag_resource_id
				from	""SurveyUser"" su
				join ""SurveyUser"" su2 on su2.surveyuser_association_uuid = su.surveyuser_association_uuid
					and	su2.""pk_SurveyUser_ID"" <> su.""pk_SurveyUser_ID""
				where	su.""pk_SurveyUser_ID"" =",201
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 115 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",200
Application.models.Messaging.sendEmail( ) -> studyQuery,"						select	study_subject_id as case_no,
								name as study_name
						from 	users_studies
						join study on pk_study_id = study_id
						where 	user_id =",200
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> [update],"						update	user_calendar_templates
						set		name = $1,
								active_start_date = $2,
								display_position = $3,
								modified_by_fk_user_id = $4,
								modified_at = now()
						where	pk_user_calendar_template_id =",199
Application.models.FileManager.downloadFile( ) -> medTeamQuery,"						select	pk_user_id
						from	users as u1
						where	u1.pk_user_id = (
							select	sudo_as_fk_user_id
							from	users
							where 	pk_user_id =",198
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",197
Application.models.PatientPortalTemplate.applyAutomaticPortalTemplate( ) -> userTemplateQuery,"					select	pk_user_portal_template_id
					from	user_portal_templates
					where	fk_user_id = $1
					and		fk_patient_portal_template_id = $2
					and		active =",196
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"							update 	message_thread_users
							set 	fk_message_thread_state = 4,
									last_message_thread_state = 4,
									updated_at = now()
							where 	fk_user_id in ($1)
							and 	fk_message_thread_id = $2
							and 	fk_message_thread_state =",195
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '2 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '2 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '2 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17,$18)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 0 
						offset",193
Application.lib.scheduled_scripts.TaskSmartReminders.run( ) -> companiesQuery,"				select	fk_company_id
				from	company_config
				where	fast_track_allow_app =",190
Application.lib.scheduled_scripts.TaskSmartReminders.run( ) -> patientsQuery,"				select	u.fk_company_id,
						u.pk_user_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u.fk_user_id,
						u2.is_site_user,
						sa.sms_allow
				from	users u
				join users u2 on u2.pk_user_id = u.fk_user_id and u2.user_time_zone_location is null
				join companies c on c.pk_company_id = u.fk_company_id 
					and c.is_active = true
					and c.region = 'US'::region
				join settings_apps sa on sa.fk_company_id = u.fk_company_id
					and sa.reminders_send = true
					and (sa.reminders_send_time::time at time zone c.time_zone_location)
						between ((pg_catalog.time(now()) at time zone c.time_zone_location) - interval '5 minutes')
						and ((pg_catalog.time(now()) at time zone c.time_zone_location) + interval '5 minutes')
				join user_todos ut on ut.fk_user_id = u.pk_user_id
					and	ut.active = true
					and (
							date(ut.active_start_date) = (date(now() at time zone c.time_zone_location) + sa.reminders_start_interval)
							or date(ut.active_end_date) = (date(now() at time zone c.time_zone_location) + sa.reminders_end_interval)
							or (
									date(now() at time zone c.time_zone_location) >=
									((select max(utrl.processing_date) 
									from user_todo_reminders_log utrl
									where utrl.fk_user_id = u.pk_user_id) + sa.reminders_inter_interval)
									and date(ut.active_start_date) < date(now() at time zone c.time_zone_location)
									and date(ut.active_end_date) >= date(now() at time zone c.time_zone_location)
								)
							or (
									(date(ut.active_start_date) < date(now() at time zone c.time_zone_location))
									and (date(ut.active_end_date) >= date(now() at time zone c.time_zone_location))
									and 
									(select count(*)
									from user_todo_reminders_log utrl7
									where utrl7.fk_user_id = u.pk_user_id) = 0
								)
						)
					and (
							(select max(utrl2.processing_date) 
							from user_todo_reminders_log utrl2
							where utrl2.fk_user_id = u.pk_user_id) is null
							or
							(select max(utrl3.processing_date) 
							from user_todo_reminders_log utrl3
							where utrl3.fk_user_id = u.pk_user_id) + sa.reminders_min_interval < date(now() at time zone c.time_zone_location)
						)
				join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
					and uscs.fk_completion_status_id = 1
				left outer join identity_to_account_map itam on itam.fk_user_id = u.pk_user_id
					and itam.fk_company_id in (150)
				where	u.security = 1
				and		u.account_status = 1
				and		u.email is not null
				and 	u.email <> ''
				and 	(u.mayreceiveemailreminders = true or u.mayreceiveemailreminders is null)
				and		itam.pk_identity_to_account_map_id is null
				group by u.fk_company_id,
						u.pk_user_id,
						u.email,
						u.mobile_phone,
						u.may_receive_sms_notifications,
						u.fk_user_id,
						u2.is_site_user,
						sa.sms_allow
				union 
				select	u3.fk_company_id,
						u3.pk_user_id,
						u3.email,
						u3.mobile_phone,
						u3.may_receive_sms_notifications,
						u3.fk_user_id,
						u4.is_site_user,
						sa2.sms_allow
				from	users u3
				join users u4 on u4.pk_user_id = u3.fk_user_id and u4.user_time_zone_location is not null
				join companies c2 on c2.pk_company_id = u3.fk_company_id 
					and c2.is_active = true
					and c2.region = 'US'::region
				join settings_apps sa2 on sa2.fk_company_id = u3.fk_company_id
					and sa2.reminders_send = true
					and (sa2.reminders_send_time::time at time zone u4.user_time_zone_location)
						between ((pg_catalog.time(now()) at time zone u4.user_time_zone_location) - interval '5 minutes')
						and ((pg_catalog.time(now()) at time zone u4.user_time_zone_location) + interval '5 minutes')
				join user_todos ut2 on ut2.fk_user_id = u3.pk_user_id
					and	ut2.active = true
					and (
							date(ut2.active_start_date) = (date(now() at time zone u4.user_time_zone_location) + sa2.reminders_start_interval)
							or date(ut2.active_end_date) = (date(now() at time zone u4.user_time_zone_location) + sa2.reminders_end_interval)
							or (
									date(now() at time zone u4.user_time_zone_location) >=
									((select max(utrl4.processing_date) 
									from user_todo_reminders_log utrl4
									where utrl4.fk_user_id = u3.pk_user_id) + sa2.reminders_inter_interval)
									and date(ut2.active_start_date) < date(now() at time zone u4.user_time_zone_location)
									and date(ut2.active_end_date) >= date(now() at time zone u4.user_time_zone_location)
								)
							or (
									(date(ut2.active_start_date) < date(now() at time zone u4.user_time_zone_location))
									and (date(ut2.active_end_date) >= date(now() at time zone u4.user_time_zone_location))
									and 
									(select count(*)
									from user_todo_reminders_log utrl8
									where utrl8.fk_user_id = u3.pk_user_id) = 0
								)
						)
					and (
							(select max(utrl5.processing_date) 
							from user_todo_reminders_log utrl5
							where utrl5.fk_user_id = u3.pk_user_id) is null
							or
							(select max(utrl6.processing_date) 
							from user_todo_reminders_log utrl6
							where utrl6.fk_user_id = u3.pk_user_id) + sa2.reminders_min_interval < date(now() at time zone u4.user_time_zone_location)
						)
				join user_survey_completion_statuses uscs2 on uscs2.fk_user_todo_id = ut2.pk_user_todo_id
					and uscs2.fk_completion_status_id = 1
				left outer join identity_to_account_map itam2 on itam2.fk_user_id = u3.pk_user_id
					and itam2.fk_company_id in (150)
				where	u3.security = 1
				and		u3.account_status = 1
				and		u3.email is not null
				and 	u3.email <> ''
				and 	(u3.mayreceiveemailreminders = true or u3.mayreceiveemailreminders is null)
				and		itam2.pk_identity_to_account_map_id is null
				group by",190
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341548$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1568452621$dontbeevilman$
							AND
					1 =",189
Application.models.Messaging.getActionsQuery( ) -> actionsQuery,"				select	mpt.pk_message_post_type_id,
						mpt.message_post_type_name,
						mpt.fk_message_category_id,
						mptcr.medside_recipient_type_id
				from	message_post_type_company_role mptcr
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mptcr.fk_message_post_type_id
					join medserviceprovider msp on msp.fk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
						and msp.fk_user_id = $1 
				where	mptcr.fk_company_id = $2
				and		mptcr.show_in_compose_actions = true
				order by",188
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscBrockton') and fk_company_id = 10
						AND
					1 =",188
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5)
							or revision_fk_surveyuser_id in ($6,$7,$8,$9,$10)
					order by",188
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341529$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1851375505$dontbeevilman$
							AND
					1 =",187
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select 	case_no 
					from	users 
					where 	pk_user_id =",186
Application.models.SurveyUserSolr.getLogicalSurveysQuery( ) -> logicalSurveysQuery,"				select	s.id as survey_id,
						s.title as survey_name,
						stp.id as timepoint_id,
						stp.named_interval,
						stp.timepoint_interval,
						sta.fk_resource_id,
						sa.physician_edit,
						sa.patient_edit,
						sa.site_edit
				from	survey_company sc
				join surveys s on s.id = sc.survey_id
				join survey_timepoints stp on stp.survey_id = s.id
				join survey_timepoint_survey_template stst on stst.survey_timepoint_id = stp.id
				join survey_templates_access sta on sta.fk_survey_template_id = stst.survey_template_id
					and sta.fk_company_id = sc.company_id
						and sta.fk_resource_id in ($1,$2)
				join survey_access sa on sa.fk_company_id = sc.company_id
					and sa.fk_resource_id = sta.fk_resource_id
						and (sa.physician_edit = true or sa.patient_edit = true or sa.site_edit = true)
				where	sc.company_id = $3
				group by s.id,
						s.title,
						stp.id,
						stp.named_interval,
						stp.timepoint_interval,
						sta.fk_resource_id,
						sa.physician_edit,
						sa.patient_edit,
						sa.site_edit
				order by s.title,",185
Application.lib.QRCodeUtil.getKioskQRCodeExpirationDays( ) -> companyConfigQuery,"				select	kiosk_qr_code_expiration_days
				from	company_config
				where	fk_company_id =",185
Application.CFLangExtendLite.getCompanyByUser( ) -> userQuery,"				select	fk_company_id
				from	users
				where	pk_user_id =",185
Application.lib.PasswordValidator.validatePasswordIsNew( ) -> checkPassword,"				select	pk_user_id, 
						password
				from	users
				where	pk_user_id = $1
				and	check_password($2,",185
Application.models.SmartClip.getPatientExclusionStatus( ) -> patientQuery,"				select	u.pk_user_id
				from	users u
				where	u.pk_user_id = $1 
				group by",185
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 90 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",184
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 153 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",184
Application.models.Messaging.postMessage( ) -> threadQuery,"					select 	thread_name,
							fk_message_post_type_id,
							forwardedfrom_id,
							patient_id,
							physician_id,
							to_id,
							from_id
					from 	message_thread2
					where 	pk_message_thread_id =",182
Application.lib.FileUtil.createPatientFoldersfromArray( ) -> insertFolder,"					insert	into ""fileManagerItem""
							(""Name"",
								""fk_fileManagerItem_ID"",
							""isDirectory"")
					values",182
/kiosk/logout.cfm -> [insert],"			insert	into userslog 
					(fk_users_id, 
					ts, 
					ipaddy, 
					action)
			values ($1,
					now(), 
					$2,",181
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
							or revision_fk_surveyuser_id in ($11,$12,$13,$14,$15,$16,$17,$18,$19,$20)
					order by",181
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id = $1 
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike lower($3)
							and lower(u.lname) ilike",180
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        substring(u.fname, '^([a-zA-Z])') as fname,
	                        substring(u.lname, '^([a-zA-Z])') as lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id = $1 
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike lower($3)
							and lower(u.lname) ilike $4 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",180
Application.helpers.SessionHelper.auditMedTeam( ) -> [insert],"				insert into audit_med_team
						(med_team_fk_user_id,
						fk_audit_action_id
							, notes
							, session_id
						)
				values	($1,
						$2 
							, $3 
							, $4",179
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739078$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$207231$dontbeevilman$
							AND
					1 =",177
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16)
				or		""pk_SurveyUser_ID"" in ($17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32)
				order by",177
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and u.fk_user_id = $2 
						and u.internalId ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",177
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and u.fk_user_id = $2 
						and u.internalId ilike",177
Application.models.Messaging.postMessage( ) -> [insert],"						insert 	into message_post
								(fk_message_thread_id,
								body,
								fk_user_id,
								responder_user_id,
								fk_message_post_type_id,
								viewable_medside_only)	
						values",176
Application.models.ContentManager.getPatientTermsAndConditionsContent( ) -> settingsQuery,"					select	sms_allow
					from	settings_apps
					where	fk_company_id =",174
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46)
							or revision_fk_surveyuser_id in ($47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92)
					order by",173
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select	u2.lname
					from	users u
					join users u2 on u2.pk_user_id = u.fk_user_id and u2.is_site_user = true
					where	u.pk_user_id =",172
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscSebastian') and fk_company_id = 10
						AND
					1 =",170
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"								update 	message_thread_users
								set 	fk_message_thread_state = 1,
										last_message_thread_state = 1,
										updated_at = now()
								where 	fk_user_id in ($1)
								and 	fk_message_thread_id =",168
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",168
Application.lib.FileUtil.createPatientFoldersfromArray( ) -> insertFolder,"					insert	into ""fileManagerItem""
							(""Name"",
								""patientReadOnly"",
							""isDirectory"")
					values",168
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 161 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",168
Application.models.Patient.getPatientInfoForForm( ) -> fieldQuery,"				select	dbf.DBTableName,
						dbf.DBFieldName,
						dbf.HTMLFormName,
						dbf.HTMLFieldName
				from    DBFieldToFormFieldMap as dbf
				where   dbf.HTMLFormName =",168
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 132 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",168
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 20 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",168
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",167
Application.models.Messaging.getMessages( ) -> postsQuery,"							select	mp.pk_message_post_id,
									mp.fk_user_id,
									mp.responder_user_id,
									mp.fk_message_post_type_id,
									mp.body,
									mp.subject,
									mp.fk_message_thread_id,
									mp.responder_user_id,
									to_char(mp.date_created + interval '0 hours','FMMonth FMDD, yyyy FMHH:MI AM') as date_created,
									u.pk_user_id,
									u.fname,
									u.lname,
									u.internalid,
									u.case_no,
									u.security
							from 	message_post mp
							join users u on u.pk_user_id = mp.fk_user_id 
								and u.fk_company_id = $1
							where	mp.fk_message_thread_id = $2 
							order by mp.pk_message_post_id",166
Application.models.SurveyUser.getFormCacheFileUUID( ) -> surveyUserQuery,"					select	cache_file_uuid,
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" =",165
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
					and mt.pk_message_thread_id = $9 
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $10 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $11 
					group",164
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscMokenaRadOnc') and fk_company_id = 10
						AND
					1 =",164
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
						and u.internalId ilike",163
Application.models.SurveyUser.head( ) -> ufptiMirrorQuery,"						select	uum.attending_md_id
						from 	users_ufpti uu
						join 	ufpti_users_mirror uum on uum.ida = uu.ufpti_no
						where 	uu.fk_user_id =",161
patient.portal.model.surveys.SurveyBO.getSurveyResultsByType( ) -> patientQuery,"					select	pk_user_id
					from	users
					where	account_status = 1
					and		security = 1
					order by pk_user_id desc
					limit",161
Application.models.Patient.getPatientInfo( ) -> patientQuery,"	            select	u.pk_user_id,
						u.fk_company_id,
	                        u.fname,
	                        u.lname,
	                        u.email,
						u.phone,
						u.datecreated,
						u.dateupdated,
						u.security,
						u.active,
						u.institution_no,
						u.fk_user_id,
							 to_char(dob, 'MM/DD/YYYY') as dob,
						u.ssn,
	                        u.internalid,
						u.mayreceiveemailreminders,
						u.datepatientidchanged
	            from	users u
	            where	u.pk_user_id = $1 
					and u.fk_company_id =",161
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 171 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",160
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 153 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",160
Application.models.ContentManager.getContactQuery( ) -> contactQuery,"					select	site,
							phone
					from 	""Contact""
					where	""fk_Company_ID"" = $1
					and		""fk_User_ID"" is null
					and		site is not null
					and		site <> ''
					and		phone is not null
					and		phone <>",160
Application.models.ContentManager.getContactQuery( ) -> contactQuery,"					select	site,
							phone
					from 	""Contact""
					where	""fk_User_ID"" = $1
					and		site is not null
					and		site <> ''
					and		phone is not null
					and		phone <>",160
Application.models.SurveyUser.checkSurveyTypeAccess( ) -> checkAccessQuery,"					select 	count(*) as thecount
					from	survey_type_to_company
					where	fk_survey_type_id = $1
					and		fk_company_id =",160
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368568$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1861407421$dontbeevilman$
							AND
					1 =",159
Application.models.Messaging.getThreadUsers( ) -> usersQuery,"				select 	distinct u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.email,
						u.mayreceiveemailreminders,
						u.security
				from 	message_thread_users mtu
				join users u on u.pk_user_id = mtu.fk_user_id 
					and u.fk_company_id = $1 
						and u.security > 1
					and u.account_status = 1
				where 	mtu.fk_message_thread_id =",158
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124)
							or revision_fk_surveyuser_id in ($125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194,$195,$196,$197,$198,$199,$200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214,$215,$216,$217,$218,$219,$220,$221,$222,$223,$224,$225,$226,$227,$228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241,$242,$243,$244,$245,$246,$247,$248)
					order by",158
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '2 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '2 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '2 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date_medical_side desc, thread_state_order 
						limit 25 
						offset",157
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",157
Application.models.SurveyUser.findMostRecentRevisionSet( ) -> surveyUsersQuery,"				select
							mostrecentrevisionset.revision_fk_surveyuser_id,mostrecentrevisionset.""pk_SurveyUser_ID"",mostrecentrevisionset.""fk_User_ID_Self"" 
				from (
					select
							su1.revision_fk_surveyuser_id,su1.""pk_SurveyUser_ID"",su1.""fk_User_ID_Self"" 
					from	""SurveyUser"" as su1
					where 	su1.revision_type = 'new'
						and su1.""fk_Resource_ID"" in ($1)
						and su1.""fk_User_ID_Self"" in ($2)
					and su1.""pk_SurveyUser_ID"" not in (
						select	su2.revision_fk_surveyuser_id
						from 	""SurveyUser"" as su2
						where 	su2.revision_fk_surveyuser_id is not null
							and su2.""fk_Resource_ID"" in ($3)
							and su2.""fk_User_ID_Self"" in ($4)
					)
					union all
					select
							su3.revision_fk_surveyuser_id,su3.""pk_SurveyUser_ID"",su3.""fk_User_ID_Self"" 
					from	""SurveyUser"" as su3
					where 	su3.""pk_SurveyUser_ID"" in (
						select 	max(su4.""pk_SurveyUser_ID"") as ""pk_SurveyUser_ID""
						from 	""SurveyUser"" as su4
						where 	su4.revision_type = 'update'
							and su4.""fk_Resource_ID"" in ($5)
							and su4.""fk_User_ID_Self"" in ($6)
						group by su4.""fk_User_ID_Self"",
							su4.""fk_Resource_ID"",
							su4.revision_type,
							su4.""revision_fk_surveyuser_id""
					)
				) as mostrecentrevisionset
					-- 3. inner join on users to scope the resultset to active users
					inner join dblink (
						'hc_dev_dblink_server_connection'::text, $mjrip$
						select	u.pk_user_id,
								c.time_zone_location
						from 	users u
						join companies c on c.pk_company_id = u.fk_company_id
						where 1 = 1
							and u.pk_user_id in (0 )
							$mjrip$::text
						) as hc_users(pk_user_id bigint, time_zone_location varchar)
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
					left join ""SurveyUser"" as originalSU on originalSU.""pk_SurveyUser_ID"" = mostrecentrevisionset.revision_fk_surveyuser_id
				where 1 = 1
					order by ""pk_SurveyUser_ID""",157
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 103 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",156
Application.models.ClinicalForm.getClinicalFormTagCount( ) -> tagCountQuery,"				select 	count(*) as records,
						fk_survey_tag_resource_id
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25)
				and 	revision_type = 'new'
				and		fk_survey_tag_resource_id is not null
				and		fk_survey_tag_resource_id <> 0
				group by",155
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
						and u.case_no ilike",155
Application.models.ClinicalForm.getClinicalFormRecordCount( ) -> formsCountQuery,"				select	count(*) as records,
						""fk_Resource_ID""
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25)
				and 	""revision_type"" = 'new'
					and	(fk_survey_tag_resource_id is null or fk_survey_tag_resource_id = 0)
				group by",155
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",155
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74)
							or revision_fk_surveyuser_id in ($75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148)
					order by",153
Application.models.ClinicalForm.getClinicalFormTagCount( ) -> tagCountQuery,"				select 	count(*) as records,
						fk_survey_tag_resource_id
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96)
				and 	revision_type = 'new'
				and		fk_survey_tag_resource_id is not null
				and		fk_survey_tag_resource_id <> 0
				group by",153
Application.models.ClinicalForm.getClinicalFormRecordCount( ) -> formsCountQuery,"				select	count(*) as records,
						""fk_Resource_ID""
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96)
				and 	""revision_type"" = 'new'
					and	(fk_survey_tag_resource_id is null or fk_survey_tag_resource_id = 0)
				group by",153
Application.models.Communication.saveCommunicationPreferences( ) -> [update],"				update 	users
				set		mayreceiveemailreminders = $1 
							, agreedtotermsandconditions = $2 
				where 	pk_user_id = $3
				and		fk_company_id =",152
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 99 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",152
Application.models.PatientReport.runReport( ) -> surveyUserQuery,"								select	""pk_SurveyUser_ID"",
										""fk_User_ID_Origin"",
										revision_fk_surveyuser_id,
										fk_survey_tag_resource_id
								from	""SurveyUser""
								where	""pk_SurveyUser_ID"" =",150
Application.models.PatientReport.runReport( ) -> userTodoQuery,"										select	fk_user_todo_id
										from	user_survey_completion_statuses
										where	fk_user_id = $1
										and		fk_resource_id = $2
										and		fk_surveyuser_id =",150
Application.lib.FileUtil.createPatientFoldersfromArray( ) -> insertFolder,"					insert	into ""fileManagerItem""
							(""Name"",
							""isDirectory"")
					values",148
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 20 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",148
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 29 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",148
Application.models.Survey.getQuestionsByTag( ) -> optionsQuery,"				select 	survey.""pk_Resource_ID"" as survey_id,
						question.""pk_Resource_ID"" as question_id,
						option.""pk_Resource_ID"" as option_id,
						question_tags_row.""Predicate_V2_Value"" as question_tags
				from	""Resource"" as survey
				join ""Resource"" as question on question.""Subject_fk_Schema_ID"" = 8
				join ""Resource"" as question_subclass_row on question_subclass_row.""Object_fk_Resource_ID"" = question.""pk_Resource_ID""
					and question_subclass_row.""Predicate_V1_Value_fk_Resource_ID"" = survey.""pk_Resource_ID""
				join ""Resource"" as option on option.""Subject_fk_Schema_ID"" = 10
				join ""Resource"" as option_subclass_row on option_subclass_row.""Object_fk_Resource_ID"" = option.""pk_Resource_ID""
					and option_subclass_row.""Predicate_V1_Value_fk_Resource_ID"" = question.""pk_Resource_ID""
				join ""Resource"" as question_tags_row on question_tags_row.""Object_fk_Resource_ID"" = question.""pk_Resource_ID""
					and question_tags_row.""Subject_fk_Schema_ID"" = 205
					and question_tags_row.""Predicate_V2_Value"" LIKE $1
				where survey.""pk_Resource_ID"" in",147
Application.models.User.getPhysiciansQuery( ) -> physiciansQuery,"				select	u.pk_user_id,
						u.fname,
						u.lname,
						u.internalid
				from	users u
					join medserviceprovider msp on msp.fk_user_id = u.pk_user_id
						and msp.fk_medserviceprovidertype_id = 2
				where	u.fk_company_id = $1 
					and u.sudo_as_fk_user_id = $2 
					and internalid is not null
				and		u.account_status = 1
				and		u.security = 2
				and		u.is_site_user = false
				and		u.lname is not null
				and		u.lname <> ''
				group by u.pk_user_id,
						u.fname,
						u.lname
				order by",146
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"									update 	message_thread_users
									set 	fk_message_thread_state = 1,
											last_message_thread_state = 1,
											updated_at = now()
									where 	fk_user_id in ($1)
									and 	fk_message_thread_id =",145
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 158 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",144
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscExton') and fk_company_id = 10
						AND
					1 =",144
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 158 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",144
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike lower($2)
							and lower(u.lname) ilike",144
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
						and u.internalId ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",143
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18)
				or		""pk_SurveyUser_ID"" in ($19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36)
				order by",143
Application.models.Messaging.getPostTypes( ) -> postTypesQuery,"					select	mpt.pk_message_post_type_id,
							mpt.med_name as message_post_type_name,
							mc.category_name,
							mptcr.medside_recipient_type_id
					from 	message_post_type_company_role mptcr
					join medserviceprovidertype mspt on mspt.pk_medserviceprovidertype_id = mptcr.fk_medserviceprovidertype_id
					join message_post_type2 mpt on mpt.pk_message_post_type_id = mptcr.fk_message_post_type_id
						and mpt.pk_message_post_type_id <> 11 
					join message_category mc on mc.pk_message_category_id = mpt.fk_message_category_id
					where	mptcr.fk_company_id = $1
					and 	mptcr.medside_recipient_type_id in ($2,$3,$4,$5,$6)
					and 	mptcr.medside_recipient_type_id not in ($7,$8,$9,$10,$11,$12)
					and 	mptcr.show_in_compose_actions = true
					order by",143
Application.models.Messaging.getActionsQuery( ) -> actionsQuery,"				select	mpt.pk_message_post_type_id,
						mpt.message_post_type_name,
						mpt.fk_message_category_id,
						mptcr.medside_recipient_type_id
				from	message_post_type_company_role mptcr
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mptcr.fk_message_post_type_id
				where	mptcr.fk_company_id = $1
				and		mptcr.show_in_compose_actions = true
				order by",143
Application.models.Site.getSiteUsers( ) -> siteUsersQuery,"				select	pk_user_id,
						sudo_as_fk_user_id,
						lname
				from 	users
				where 	fk_company_id = $1
				and 	account_status = 1
				and		security > 1
				and 	is_site_user = true
				and		lname is not null
				and		lname <> ''
				order by",142
Application.models.Site.getSudoSiteUsers( ) -> sudoSiteUsersQuery,"				select	u.pk_user_id,
						u2.lname
				from 	users u
				join users u2 on u2.pk_user_id = u.sudo_as_fk_user_id
					and u2.is_site_user = true
				where 	u.fk_company_id = $1
				and 	u.security > 1
				and 	u.account_status = 1
				and 	u.is_site_user =",142
Application.models.PatientPortalTemplate.getTemplate( ) -> calendarTemplatesQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptc.pk_patient_portal_template_calendar_id,
						pptc.active_start_interval,
						date('05/02/2022') + pptc.active_start_interval as active_start_date,
						ct.pk_calendartemplate_id,
						ct.name as calendar_name
				from 	patient_portal_templates ppt 
				join patient_portal_template_calendars pptc on pptc.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptc.active = true
				join calendartemplate ct on ct.pk_calendartemplate_id = pptc.fk_calendar_template_id
				where	ppt.pk_patient_portal_template_id = $1
				order by",142
Application.models.PatientPortalTemplate.getTemplate( ) -> formsQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptt.pk_patient_portal_template_todos_id,
						pptt.active_start_interval,
						pptt.active_end_interval,
						date('05/02/2022') as start_date,
						date('05/02/2022') + pptt.active_start_interval as active_start_date,
						date('05/02/2022') + pptt.active_start_interval + pptt.active_end_interval as active_end_date,
						t.pk_todo_id,
						t.name as todo_name,
						t.fk_resource_id
				from 	patient_portal_templates ppt 
				join patient_portal_template_todos pptt on pptt.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
				join todos t on t.pk_todo_id = pptt.fk_todo_id
				where	ppt.pk_patient_portal_template_id = $1
				and		pptt.active = true
				order by pptt.display_position,",142
Application.models.PatientPortalTemplate.getTemplate( ) -> eduMediaQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.name as template_name,
						pptem.pk_patient_portal_template_education_material_id,
						pptem.active_start_interval,
						pptem.active_end_interval,
						date('05/02/2022') + pptem.active_start_interval as active_start_date,
						date('05/02/2022') + pptem.active_start_interval + pptem.active_end_interval as active_end_date,
						fma.""pk_fileManagerACL_ID"",
						fmi.""Name"",
						fmi.""fileExtension"" as file_ext
				from 	patient_portal_templates ppt 
				join patient_portal_template_education_material pptem on pptem.fk_patient_portal_template_id = ppt.pk_patient_portal_template_id
					and pptem.active = true
				join ""fileManagerACL"" fma on fma.""pk_fileManagerACL_ID"" = pptem.""fk_fileManagerACL_ID""
				join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID""
				where	ppt.pk_patient_portal_template_id = $1
				order by pptem.display_position,",142
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9)
							or revision_fk_surveyuser_id in ($10,$11,$12,$13,$14,$15,$16,$17,$18)
					order by",140
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 103 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",140
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
							and lower(u.lname) ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",139
Application.lib.FileUtil.createFileManagerUser( ) -> insertFmUser,"	            insert	into ""fileManagerUser"" 
						(""fk_VT_ID"")
	            values ",138
Application.models.Company.getCompanyConfig( ) -> companyConfigQuery,"				select	has_portable_health_records 
				from	company_config
				where	fk_company_id =",138
Application.models.SurveyUser.printFormsAsPDF( ) -> surveyUserQuery,"					select	max(""pk_SurveyUser_ID"") as ""pk_SurveyUser_ID""
					from	""SurveyUser""
					where	revision_fk_surveyuser_id =",138
Application.helpers.EmailHelper.emailPatientLoginCard( ) -> [update],"	            update	users
	            set 	password = $1,
	                    has_changed_password = false,
	                    password_valid_until = (now() + interval '48 hours')
	            where 	pk_user_id =",137
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25)
				or		""pk_SurveyUser_ID"" in ($26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50)
				order by",137
Application.models.CAProtonsReport.getReferralForms( ) -> draftsQuery,"					select	id,
							user_id_self,
							updated_at
					from	survey_user_drafts
					where	resource_id = 96268088
					and		user_id_self in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19)
					and		is_archived =",134
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739077$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$202953$dontbeevilman$
							AND
					1 =",134
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21)
				or		""pk_SurveyUser_ID"" in ($22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42)
				order by",133
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 101 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",132
Application.models.PatientPortalTemplate.getPortalTemplatesByUser( ) -> portalTemplatesQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.fk_user_id,
						ppt.fk_company_id,
						ppt.modified_by_fk_user_id,
						ppt.name,
						ppt.start_date,
						ppt.end_date,
						ppt.default_template,
						ppt.share_template,
						ppt.hide_template,
						ppt.assign_on_patient_create,
						u.fname,
						u.lname,
						u.login
				from	patient_portal_templates ppt
				join	users u on u.pk_user_id = ppt.fk_user_id
				where	ppt.fk_company_id = $1 
					and (ppt.fk_user_id = $2
						or ppt.share_template = true)
					and	ppt.hide_template = false
				order by name, lname,",132
/patient/features/change_password/change_password_service.cfm -> [update],"			update	users
			set 	password = $1,
					has_changed_password = true,
	            	password_valid_until = null,
					datepatientidchanged = now()
			where	pk_user_id =",131
/patient/features/change_password/change_password_service.cfm -> userQuery,"			select	pk_user_id,
					fk_company_id,
					email,
					mobile_phone,
					may_receive_sms_notifications
			from	users
			where	pk_user_id =",131
Application.models.SmartClip.getFormInstances( ) -> surveyUserQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id
				from	""SurveyUser""
				where	""fk_Resource_ID"" = $1
				and		""fk_User_ID_Self"" =",129
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341528$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1700864873$dontbeevilman$
							AND
					1 =",129
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fname"" =
									$2,
									""lname"" =
									$3,
									""datecreated"" =
									$4,
									""dateupdated"" =
									$5,
									""active"" =
									$6,
									""password"" =
									$7,
									""login"" =
									$8,
									""internalid"" =
									$9,
									""sudo_as_fk_user_id"" =
									$10,
									""agreedtotermsandconditions"" =
									$11,
									""security"" =
									$12,
									""allow_self_reg"" =
									$13,
									""self_reg_capable"" =
									$14,
									""show_all_templates"" =
									$15,
									""account_status"" =
									$16,
									""e_auth"" =
									$17,
									""is_test_user"" =
									$18,
									""identity_validated"" =
									$19,
									""is_site_user"" =
									$20,
									""password_valid_until"" =
									$21,
									""may_receive_sms_notifications"" =
									$22,
									""is_deceased"" =
									$23,
									""is_default_user"" =
									$24,
									""is_alert_sender"" =
									$25,
									""reg_form_create"" =
									$26
					WHERE ""pk_user_id"" =",129
/patient/forgot_password.cfm -> userQuery,"			select	u.pk_user_id,
					u.fk_user_id,
					u.login,
					u.password,
					u.security,
					u.active,
					u.fk_company_id,
					u.may_receive_sms_notifications,
					u.mobile_phone,
					c.local_domain
			from 	users u
			join companies c on c.pk_company_id = u.fk_company_id
			where lower(u.email) = lower($1)
			and 	u.account_status =",128
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 124 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",128
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fname"" =
									$2,
									""lname"" =
									$3,
									""datecreated"" =
									$4,
									""dateupdated"" =
									$5,
									""active"" =
									$6,
									""login"" =
									$7,
									""internalid"" =
									$8,
									""datepatientidchanged"" =
									$9,
									""sudo_as_fk_user_id"" =
									$10,
									""agreedtotermsandconditions"" =
									$11,
									""has_changed_password"" =
									$12,
									""security"" =
									$13,
									""allow_self_reg"" =
									$14,
									""self_reg_capable"" =
									$15,
									""show_all_templates"" =
									$16,
									""account_status"" =
									$17,
									""sudo_retain_user_security"" =
									$18,
									""e_auth"" =
									$19,
									""is_test_user"" =
									$20,
									""identity_validated"" =
									$21,
									""is_site_user"" =
									$22,
									""may_receive_sms_notifications"" =
									$23,
									""is_deceased"" =
									$24,
									""is_default_user"" =
									$25,
									""is_alert_sender"" =
									$26,
									""reg_form_create"" =
									$27
					WHERE ""pk_user_id"" =",128
Application.models.SurveyTypes.RtogRaveWebService.processSurvey( ) -> studySubjectQuery,"				select	study_subject_id
				from	users_studies
				where	user_id =",128
Application.models.SurveyTypes.RtogRaveWebService.processSurvey( ) -> patientQuery,"				select	location
				from	users
				where	pk_user_id =",128
Application.models.SurveyUserSolr.getPatientQuery( ) -> patientQuery,"				select	u.pk_user_id,
						u.fk_user_id,
						u2.pk_user_id as site_fk_user_id,
						u2.lname as site_name,
							u.fname,
							u.lname
							, u.internalid
				from	users u
				left outer join users u2 on u2.pk_user_id = u.fk_user_id
					and u2.is_site_user = true
				where	u.pk_user_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194,$195,$196,$197,$198,$199,$200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214,$215,$216,$217,$218,$219,$220,$221,$222,$223,$224,$225,$226,$227,$228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241,$242,$243,$244,$245,$246,$247,$248,$249,$250,$251,$252,$253,$254,$255,$256,$257,$258,$259,$260,$261,$262,$263,$264,$265,$266,$267,$268,$269,$270,$271,$272,$273,$274,$275,$276,$277,$278,$279,$280,$281,$282,$283,$284,$285,$286,$287,$288,$289,$290,$291,$292,$293,$294,$295,$296,$297,$298,$299,$300,$301,$302,$303,$304,$305,$306,$307,$308,$309,$310,$311,$312,$313,$314,$315,$316,$317,$318,$319,$320,$321,$322,$323,$324,$325,$326,$327,$328,$329,$330,$331,$332,$333,$334,$335,$336,$337,$338,$339,$340,$341,$342,$343,$344,$345,$346,$347,$348,$349,$350,$351,$352,$353,$354,$355,$356,$357,$358,$359,$360,$361,$362,$363,$364,$365,$366,$367,$368,$369,$370,$371,$372,$373,$374,$375,$376,$377,$378,$379,$380,$381,$382,$383,$384,$385,$386,$387,$388,$389,$390,$391,$392,$393,$394,$395,$396,$397,$398,$399,$400,$401,$402,$403,$404,$405,$406,$407,$408,$409,$410,$411,$412,$413,$414,$415,$416,$417,$418,$419,$420,$421,$422,$423,$424,$425,$426,$427,$428,$429,$430,$431,$432,$433,$434,$435,$436,$437,$438,$439,$440,$441,$442,$443,$444,$445,$446,$447,$448,$449,$450,$451,$452,$453,$454,$455,$456,$457,$458,$459,$460,$461,$462,$463,$464,$465,$466,$467,$468,$469,$470,$471,$472,$473,$474,$475,$476,$477,$478,$479,$480,$481,$482,$483,$484,$485,$486,$487,$488,$489,$490,$491,$492,$493,$494,$495,$496,$497,$498,$499,$500,$501,$502,$503,$504,$505,$506,$507,$508,$509,$510,$511,$512,$513,$514,$515,$516,$517,$518,$519,$520,$521,$522,$523,$524,$525,$526,$527,$528,$529,$530,$531,$532,$533,$534,$535,$536,$537,$538,$539,$540,$541,$542,$543,$544,$545,$546,$547,$548,$549,$550,$551)
				and		u.account_status = 1
					and	u.security = 1
				group by 
					u.pk_user_id,
					u.fk_user_id,
					u2.pk_user_id,
					u2.lname,
					u.fname,
					u.lname
						, u.internalid
				order by lower(u.lname),",128
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",126
Application.models.PatientPortalTemplateAssignment.assignTemplate( ) -> userTemplateQuery,"						select	pk_user_portal_template_id
						from	user_portal_templates
						where	fk_patient_portal_template_id = $1
						and		fk_user_id = $2
						and		active =",126
Application.models.PatientPortalTemplateAssignment.assignTemplate( ) -> checkTemplate,"						select	pk_patient_portal_template_id
						from	patient_portal_templates
						where	pk_patient_portal_template_id = $1
						and		fk_company_id =",126
Application.models.PatientPortalTemplateAssignment.assignTemplate( ) -> userTemplateQuery,"							select	pk_user_portal_template_id,
									active_start_date
							from	user_portal_templates
							where	fk_patient_portal_template_id = $1
							and		fk_user_id = $2
							and		active =",126
Application.models.PatientPortalTemplateAssignment.assignTemplate( ) -> checkUser,"					select	pk_user_id
					from	users
					where	pk_user_id = $1
					and		fk_company_id = $2
					and		security = 1
					and		account_status =",126
Application.models.PatientPortalTemplateAssignment.assignTemplate( ) -> userTodosQuery,"						select	ut.pk_user_todo_id,
								t.fk_resource_id
						from 	user_todos ut
						join todos t on t.pk_todo_id = ut.fk_todo_id
						where	ut.fk_patient_portal_template_id = $1
						and		ut.fk_user_id = $2
						and		ut.active = true
						order by",126
Application.models.SurveyUserSolr.getSurveySetup( ) -> setupQuery,"				select	pk_survey_export_question_id,
						option_id,
						option_label as label,
						null as question_tags
				from	survey_export_questions
				where	fk_company_id = $1
				and		fk_resource_id = $2 
					and option_id in ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18)
				order by",126
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike",126
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17)
				or		""pk_SurveyUser_ID"" in ($18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34)
				order by",125
Application.lib.scheduled_scripts.TaskCalendarReminders.run( ) -> [update],"					update	communicatedreminder
					set		sentfasttrack = $1,
								errormessage = $2 
					where	pk_communicatedreminder_id =",125
Application.models.ClinicalForm.getClinicalFormRecordCount( ) -> formsCountQuery,"				select	count(*) as records,
						""fk_Resource_ID""
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8)
				and 	""revision_type"" = 'new'
					and	(fk_survey_tag_resource_id is null or fk_survey_tag_resource_id = 0)
				group by",125
Application.models.ClinicalForm.getClinicalFormTagCount( ) -> tagCountQuery,"				select 	count(*) as records,
						fk_survey_tag_resource_id
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8)
				and 	revision_type = 'new'
				and		fk_survey_tag_resource_id is not null
				and		fk_survey_tag_resource_id <> 0
				group by",125
Application.models.AdvancedReportBuilder.getReports( ) -> reportsQuery,"				select	data
				from	assessment_report_selected_items
				where	companyid = $1
				and		userid =",124
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123)
							or revision_fk_surveyuser_id in ($124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194,$195,$196,$197,$198,$199,$200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214,$215,$216,$217,$218,$219,$220,$221,$222,$223,$224,$225,$226,$227,$228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241,$242,$243,$244,$245,$246)
					order by",124
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368562$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1598807778$dontbeevilman$
							AND
					1 =",123
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739077$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$47376$dontbeevilman$
							AND
					1 =",123
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22)
				or		""pk_SurveyUser_ID"" in ($23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44)
				order by",121
Application.models.SurveyTypes.RtogRaveWebService.getOriginalDateAdded( ) -> surveyUserQuery,"				select	""DateAdded"",
						revision_fk_surveyuser_id
				from	""SurveyUser""
				where	""pk_SurveyUser_ID"" =",121
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 119 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",120
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",120
Application.models.SurveyTypes.SurveyMessagingAlert.getPostTypeId( ) -> postTypeQuery,"					select	fk_message_post_type_id, 
							alert_resourceids 
					from 	message_post_type_company_role 
					where 	fk_company_id =",119
Application.models.FormsLibrary.getTimepoints( ) -> timepointsQuery,"				select	ss.survey_resource_id, 
						st.pk_survey_template_id,
						st.template_name,
						st.git_path,
						st.ts_file_write,
						st.header_version,
						stp.id as timepoint_id,
						stp.named_interval, 
						stp.timepoint_interval,
						sa.patient_edit,
						sa.physician_edit,
						sa.site_edit
					from survey_templates st
					join survey_timepoint_survey_template stst on stst.survey_template_id = st.pk_survey_template_id
					join survey_timepoints stp on stp.id = stst.survey_timepoint_id
					join survey_company sc on sc.survey_id = stp.survey_id
						and sc.company_id = $1
					join survey_timepoint_survey_schema stss on stss.survey_timepoint_id = stp.id
					join survey_schemas ss on ss.id = stss.survey_schema_id
					join survey_access sa on sa.fk_company_id = $2
						and sa.fk_resource_id = ss.survey_resource_id
					where st.git_path = $3
					and st.fk_survey_template_type_id = 2
				order by",116
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 163 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",116
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 128 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",116
Application.models.SurveyTypes.RtogRaveWebService.processSurvey( ) -> [insert],							insert into,116
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 159 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",116
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 150 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",115
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"						select	name
						from 	todos
						where 	fk_resource_id = $1
						and		fk_company_id =",114
Application.models.AdvancedReportBuilder.generateReport( ) -> surveyAccessQuery,"						select	patient_edit
						from	survey_access
						where	fk_company_id = $1
						and		fk_resource_id =",114
Application.models.AdvancedReportBuilder.generateReport( ) -> surveyUserQuery,"						select	""pk_SurveyUser_ID"",
								revision_fk_surveyuser_id,
								fk_survey_tag_resource_id
						from	""SurveyUser""
						where	""pk_SurveyUser_ID"" =",114
Application.models.SurveyUser.getFormCacheFileUUID( ) -> surveyAccessQuery,"					select	cache_file_uuid
					from	survey_access
					where	fk_company_id = $1
					and		fk_resource_id =",113
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id = $1 
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in",113
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike lower($2)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",112
Application.models.SurveyUser.copyFormToAssociatedUser( ) -> [update],"								update	""SurveyUser""
								set		surveyuser_association_uuid = $1
								where	""pk_SurveyUser_ID"" in",110
Application.models.FormDataExportSetup.getExportSetupQuery( ) -> [insert],					insert	into,109
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)
							or revision_fk_surveyuser_id in ($53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104)
					order by",108
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 80 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",108
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
							null as fname,
							null as lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
						and u.case_no ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",108
Application.models.SurveyUserSolr.getPatientQuery( ) -> patientQuery,"				select	u.pk_user_id,
						u.fk_user_id,
						u2.pk_user_id as site_fk_user_id,
						u2.lname as site_name,
							u.fname,
							u.lname
							, u.internalid
				from	users u
				left outer join users u2 on u2.pk_user_id = u.fk_user_id
					and u2.is_site_user = true
				where	u.pk_user_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194,$195,$196,$197,$198,$199,$200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214,$215,$216,$217,$218,$219,$220,$221,$222,$223,$224,$225,$226,$227,$228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241,$242,$243,$244,$245,$246,$247,$248,$249,$250,$251,$252,$253,$254,$255,$256,$257,$258,$259,$260,$261,$262,$263,$264,$265,$266,$267,$268,$269,$270,$271,$272,$273,$274,$275,$276,$277,$278,$279,$280,$281,$282,$283,$284,$285,$286,$287,$288,$289,$290,$291,$292,$293,$294,$295,$296,$297,$298,$299,$300,$301,$302,$303,$304,$305,$306,$307,$308,$309,$310,$311,$312,$313,$314,$315,$316,$317,$318,$319,$320,$321,$322,$323,$324,$325,$326,$327,$328,$329,$330,$331,$332,$333,$334,$335,$336,$337,$338,$339,$340,$341,$342,$343,$344,$345,$346,$347,$348,$349,$350,$351,$352,$353,$354,$355,$356,$357,$358,$359,$360,$361,$362,$363,$364,$365,$366,$367,$368,$369,$370,$371,$372,$373,$374,$375,$376,$377,$378,$379,$380,$381,$382,$383,$384,$385,$386,$387,$388,$389,$390,$391,$392,$393,$394,$395,$396,$397,$398,$399,$400,$401,$402,$403,$404,$405,$406,$407,$408,$409,$410,$411,$412,$413,$414,$415,$416,$417,$418,$419,$420,$421,$422,$423,$424,$425,$426,$427,$428,$429,$430,$431,$432,$433,$434,$435,$436,$437,$438,$439,$440,$441,$442,$443,$444,$445,$446,$447,$448,$449,$450,$451,$452,$453,$454,$455,$456,$457,$458,$459,$460,$461,$462,$463,$464,$465,$466,$467,$468,$469,$470,$471,$472,$473,$474,$475,$476,$477,$478,$479,$480,$481,$482,$483,$484,$485,$486,$487,$488,$489,$490,$491,$492,$493,$494,$495,$496,$497,$498,$499,$500,$501,$502,$503,$504,$505,$506,$507,$508,$509,$510,$511,$512,$513,$514,$515,$516,$517,$518,$519,$520,$521,$522,$523,$524,$525,$526,$527,$528,$529,$530,$531,$532,$533,$534,$535,$536,$537,$538,$539,$540,$541,$542,$543,$544,$545,$546,$547,$548,$549,$550,$551,$552,$553,$554,$555,$556,$557,$558,$559,$560,$561,$562,$563,$564,$565,$566,$567,$568,$569,$570,$571,$572,$573,$574,$575,$576,$577,$578,$579,$580,$581,$582,$583,$584,$585,$586,$587,$588,$589,$590,$591,$592,$593,$594,$595,$596,$597,$598,$599,$600,$601,$602,$603,$604,$605,$606,$607,$608,$609,$610,$611,$612,$613,$614,$615,$616,$617,$618,$619,$620,$621,$622,$623,$624,$625,$626,$627,$628,$629,$630,$631,$632,$633,$634,$635,$636,$637,$638,$639,$640,$641,$642,$643,$644,$645,$646,$647,$648,$649,$650,$651,$652,$653,$654,$655,$656,$657,$658,$659,$660,$661,$662,$663,$664,$665,$666,$667,$668,$669,$670,$671,$672,$673,$674,$675,$676,$677,$678,$679,$680,$681,$682,$683,$684,$685,$686,$687,$688,$689,$690,$691,$692,$693,$694,$695,$696,$697,$698,$699,$700,$701,$702,$703,$704,$705,$706,$707,$708,$709,$710,$711,$712,$713,$714,$715,$716,$717,$718,$719,$720,$721,$722,$723,$724,$725,$726,$727,$728,$729,$730,$731,$732,$733,$734,$735,$736,$737,$738,$739,$740,$741,$742,$743,$744,$745,$746,$747,$748,$749,$750,$751,$752,$753,$754,$755,$756,$757,$758,$759,$760,$761,$762,$763,$764,$765,$766,$767,$768,$769,$770,$771,$772,$773,$774,$775,$776,$777,$778)
				and		u.account_status = 1
					and	u.security = 1
				group by 
					u.pk_user_id,
					u.fk_user_id,
					u2.pk_user_id,
					u2.lname,
					u.fname,
					u.lname
						, u.internalid
				order by lower(u.lname),",106
Application.models.Messaging.sendEmail( ) -> siteQuery,"						select	u2.lname,
								u2.internalid
						from	users u
						join	users u2 on u2.pk_user_id = u.fk_user_id and u2.is_site_user = true
						where 	u.pk_user_id =",105
Application.App.findBy_( ) -> instances,"
				select
					fk_user_id 
				from ""users"" 
				where
							""security"" = $dontbeevilman$1$dontbeevilman$
							AND
							""pk_user_id"" = $dontbeevilman$958936$dontbeevilman$
							AND
					1 =",105
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 145 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",104
Application.models.Messaging.postMessage( ) -> [update],"								update 	message_thread2
								set 	from_id = $1,
										to_id = $2
								where 	pk_message_thread_id = $3 
									and to_id <>",104
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_subject_id ilike $1 
						and rs.study_id not in ($2)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $3
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $4 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",104
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_subject_id ilike $1 
						and rs.study_id not in ($2)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $3
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id =",104
Application.models.Messaging.postMessage( ) -> [update],"									update 	message_thread2
									set 	last_post_date = now(),
												last_post_date_medical_side = now(),
											is_forwarded = false,
											is_forwardreply = false,
											forwarded_to_user_ids = null,
											repliedfrom_id = 0
									where 	pk_message_thread_id =",104
Application.models.PatientReport.getPatientReports( ) -> reportsQuery,"				select	pk_patient_report_id,
						report_name,
						report_json,
						report_desc
				from	patient_report
				where	fk_company_id = $1
				order by",103
Application.App.findBy_( ) -> instances,"
				select
					fk_user_id 
				from ""users"" 
				where
							""security"" = $dontbeevilman$1$dontbeevilman$
							AND
							""pk_user_id"" = $dontbeevilman$959002$dontbeevilman$
							AND
					1 =",103
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41)
							or revision_fk_surveyuser_id in ($42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82)
					order by",103
Application.models.PatientPortalTemplate.getShowAllTemplates( ) -> medTeamQuery,"				select	show_all_templates
				from	users
				where	pk_user_id =",103
Application.models.PatientPortalTemplate.getDefaultTemplate( ) -> templateQuery,"				select	pk_patient_portal_template_id,
						name
				from	patient_portal_templates
				where	fk_company_id = $1
				and		default_template
				order by pk_patient_portal_template_id desc
				limit",103
Application.models.Patient.initSession( ) -> [insert],"				insert into userslog 
						(fk_users_id,
						ipaddy,
						action,
							kiosk_fk_user_id,
						fk_login_mode_id) 
				values",102
Application.lib.FileUtil.allowPatientCreateFolder( ) -> configQuery,"				 select	portal_create_folders
				 from	company_config
				 where	fk_company_id =",102
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368567$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1013998970$dontbeevilman$
							AND
					1 =",100
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [update],"					update	users 
					set 	fname = $1,
							lname = $2,
								mname = null,
								email = $3,
								dob = $4,
								gender = $5 
					where 	pk_user_id =",100
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19)
				or		""pk_SurveyUser_ID"" in ($20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38)
				order by",100
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24)
				or		""pk_SurveyUser_ID"" in ($25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48)
				order by",99
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
				 lower(login) = lower('vscPeru') and fk_company_id = 10
						AND
					1 =",98
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31)
							or revision_fk_surveyuser_id in ($32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62)
					order by",98
Application.models.SurveyUser.setFormCacheFileUUID( ) -> [update],"						update	""SurveyUser""
							set cache_file_uuid = $1 
						where	""pk_SurveyUser_ID"" =",96
Application.models.SurveyUser.setFormCacheFileUUID( ) -> surveyUserQuery,"						select	revision_fk_surveyuser_id
						from	""SurveyUser""
						where	""pk_SurveyUser_ID"" =",96
Application.models.UFPTIMosaiqPatient.updatePatient( ) -> [update],"					update	users 
					set 	fname = $1,
							lname = $2,
								mname = $3,
								email = $4,
								dob = $5,
								gender = $6 
					where 	pk_user_id =",96
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368567$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1427125053$dontbeevilman$
							AND
					1 =",96
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739077$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$72424$dontbeevilman$
							AND
					1 =",95
Application.models.SurveyTypes.SurveyMessagingAlert.afterCreate( ) -> studyQuery,"					select	us.study_subject_id
					from	users_studies us
					join study s on s.pk_study_id = us.study_id
						and s.use_in_reports = true
					where	us.user_id =",95
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and u.fk_user_id =",95
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368570$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1962665877$dontbeevilman$
							AND
					1 =",95
Application.models.SurveyUser.findMostRecentRevisionSet( ) -> surveyUsersQuery,"				select
							mostrecentrevisionset.""pk_SurveyUser_ID"",
							mostrecentrevisionset.""fk_User_ID_Origin"",
							mostrecentrevisionset.""DateAdded"",
							mostrecentrevisionset.""DateCompleted"",
							case
								when originalSU.""DateAdded"" is null
								then mostrecentrevisionset.""DateAdded""
								else originalSU.""DateAdded""
							end as original_date_added,
							mostrecentrevisionset.""fk_Resource_ID"",
							mostrecentrevisionset.""fk_User_ID_Self"",
							mostrecentrevisionset.""IP"",
							mostrecentrevisionset.revision_type,
							mostrecentrevisionset.revision_fk_surveyuser_id,
							mostrecentrevisionset.submitter_id,
							mostrecentrevisionset.visit,
							mostrecentrevisionset.fk_survey_tag_resource_id,
							mostrecentrevisionset.surveyuser_association_uuid,
							mostrecentrevisionset.record_id,
							hc_users.time_zone_location
				from (
					select
							su1.""pk_SurveyUser_ID"",
							su1.""fk_User_ID_Origin"",
							su1.""DateAdded"",
							su1.""DateCompleted"",
							su1.""fk_Resource_ID"",
							su1.""fk_User_ID_Self"",
							su1.""IP"",
							su1.revision_type,
							su1.revision_fk_surveyuser_id,
							su1.submitter_id,
							su1.visit,
							su1.fk_survey_tag_resource_id,
							su1.surveyuser_association_uuid,
							su1.record_id
					from	""SurveyUser"" as su1
					where 	su1.revision_type = 'new'
						and su1.""fk_Resource_ID"" in ($1,$2)
						and su1.""fk_User_ID_Self"" in ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
					and su1.""pk_SurveyUser_ID"" not in (
						select	su2.revision_fk_surveyuser_id
						from 	""SurveyUser"" as su2
						where 	su2.revision_fk_surveyuser_id is not null
							and su2.""fk_Resource_ID"" in ($13,$14)
							and su2.""fk_User_ID_Self"" in ($15,$16,$17,$18,$19,$20,$21,$22,$23,$24)
					)
					union all
					select
							su3.""pk_SurveyUser_ID"",
							su3.""fk_User_ID_Origin"",
							su3.""DateAdded"",
							su3.""DateCompleted"",
							su3.""fk_Resource_ID"",
							su3.""fk_User_ID_Self"",
							su3.""IP"",
							su3.revision_type,
							su3.revision_fk_surveyuser_id,
							su3.submitter_id,
							su3.visit,
							su3.fk_survey_tag_resource_id,
							su3.surveyuser_association_uuid,
							su3.record_id
					from	""SurveyUser"" as su3
					where 	su3.""pk_SurveyUser_ID"" in (
						select 	max(su4.""pk_SurveyUser_ID"") as ""pk_SurveyUser_ID""
						from 	""SurveyUser"" as su4
						where 	su4.revision_type = 'update'
							and su4.""fk_Resource_ID"" in ($25,$26)
							and su4.""fk_User_ID_Self"" in ($27,$28,$29,$30,$31,$32,$33,$34,$35,$36)
						group by su4.""fk_User_ID_Self"",
							su4.""fk_Resource_ID"",
							su4.revision_type,
							su4.""revision_fk_surveyuser_id""
					)
				) as mostrecentrevisionset
					-- 3. inner join on users to scope the resultset to active users
					inner join dblink (
						'hc_dblink_server_connection'::text, $mjrip$
						select	u.pk_user_id,
								c.time_zone_location
						from 	users u
						join companies c on c.pk_company_id = u.fk_company_id
						where 1 = 1
							and u.account_status not in ( 3,5 ) 
							and u.pk_user_id in (958785,927294,847360,942773,780076,914499,941631,943882,772076,860835 )
							$mjrip$::text
						) as hc_users(pk_user_id bigint, time_zone_location varchar)
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
					left join ""SurveyUser"" as originalSU on originalSU.""pk_SurveyUser_ID"" = mostrecentrevisionset.revision_fk_surveyuser_id
				where 1 = 1
					order by ""fk_Resource_ID""",95
Application.models.Study.getUserStudies( ) -> userStudiesQuery,"	  
				select	us.user_id,
						s.name,
						us.study_id,
						us.study_subject_id,  
						us.pk_users_studies_id,
						u.internalid,
						us.is_active_in_vtoc,
						us.is_reminders,
						us.is_reporting,
						us.is_active
				from	users u, 
						users_studies us, 
						study s
				where	u.pk_user_id = us.user_id 
				and		us.study_id = s.pk_study_id
					and	us.user_id in ($1)
				order by us.created_at",95
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 51 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",94
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",94
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike",94
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
								mtu.fk_message_thread_id,
								'' as status_label
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
							or mt.from_id = mtu.fk_user_id
							or mt.physician_id =  mtu.fk_user_id
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7,$8)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $9 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $10 
					and mtu.fk_message_thread_state in ($11,$12,$13,$14,$15,$16,$17)
						group by",93
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40)
							or revision_fk_surveyuser_id in ($41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80)
					order by",93
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dev_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 150 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.SurveyUser.getAssociatedTagId( ) -> tagLabelQuery,"				select	resource_label
				from	survey_tag_resource
				where	pk_survey_tag_resource_id =",92
Application.models.SurveyUser.getAssociatedTagId( ) -> associatedTagQuery,"					select	str.pk_survey_tag_resource_id
					from	survey_tags st
					join survey_tag_resource str on str.fk_survey_tag_id = st.pk_survey_tag_id
						and lower(str.resource_label) = $1
					where	st.fk_company_id =",92
Application.App.findBy_( ) -> instances,"
				select
					fk_user_id 
				from ""users"" 
				where
							""security"" = $dontbeevilman$1$dontbeevilman$
							AND
							""pk_user_id"" = $dontbeevilman$961823$dontbeevilman$
							AND
					1 =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 96 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 112 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 94 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 161 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 90 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 81 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 157 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 128 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 150 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 115 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",92
Application.models.SurveyUser.copyFormToAssociatedUser( ) -> associatedSurveyUserQuery,"								select 	""pk_SurveyUser_ID"",
										fk_survey_tag_resource_id
								from	""SurveyUser""
								where	surveyuser_association_uuid =  $1
								and		""pk_SurveyUser_ID"" <> $2
								and		""fk_User_ID_Self"" = $3
								and		revision_fk_surveyuser_id is",92
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
								, revision_type
								, revision_fk_surveyuser_id
								, ""DateCompleted""
							, submitter_id
								, visit
								, ""DateAdded""
								, fk_login_mode_id
								, fk_survey_tag_resource_id
								, completion_seconds
								, completion_seconds_total
							)
					values ( $1,
							$2,
							$3,
							$4 
								, 'update'
								, $5 
								, $6 
							, $7 
								, $8 
								, $9 
								, $10 
								, $11 
								, $12 
								, $13 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",92
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44)
							or revision_fk_surveyuser_id in ($45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88)
					order by",91
Application.models.SurveyUser.getHeaderVersion( ) -> headerVersionQuery,"					select	st.header_version as header_version
					from 	survey_templates_access sta
					join survey_templates st on sta.fk_survey_template_id = st.pk_survey_template_id
						and st.fk_survey_template_type_id = 2
					where 	sta.fk_resource_id = $1
					limit",91
Application.models.Company.getCompanyLocale( ) -> localeQuery,"					select	supported_locale,
							date_format,
							jscalendar_date_format,
							jscalendar_datetime_format,
							flatpicker_date_format,
							flatpicker_datetime_format,
							todos_template_date_format
					from	company_locale
					where	fk_company_id =",91
Application.models.Photo.getPhoto( ) -> photoQuery,"				select 	pk_picture_id,
						encode(picture::bytea, 'base64') as picture,
						mimetype
				from 	users_pictures
				where 	fk_user_id = $1
				and 	active =",91
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341522$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1346235256$dontbeevilman$
							AND
					1 =",90
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fname"" =
									$2,
									""lname"" =
									$3,
									""email"" =
									$4,
									""datecreated"" =
									$5,
									""dateupdated"" =
									$6,
									""active"" =
									$7,
									""password"" =
									$8,
									""login"" =
									$9,
									""internalid"" =
									$10,
									""sudo_as_fk_user_id"" =
									$11,
									""agreedtotermsandconditions"" =
									$12,
									""has_changed_password"" =
									$13,
									""security"" =
									$14,
									""allow_self_reg"" =
									$15,
									""self_reg_capable"" =
									$16,
									""show_all_templates"" =
									$17,
									""account_status"" =
									$18,
									""sudo_retain_user_security"" =
									$19,
									""e_auth"" =
									$20,
									""is_test_user"" =
									$21,
									""is_site_user"" =
									$22,
									""password_valid_until"" =
									$23,
									""may_receive_sms_notifications"" =
									$24,
									""is_deceased"" =
									$25,
									""is_default_user"" =
									$26,
									""is_alert_sender"" =
									$27,
									""reg_form_create"" =
									$28
					WHERE ""pk_user_id"" =",90
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"								update 	message_thread_users
								set 	fk_message_thread_state = 1,
										last_message_thread_state = 1,
										updated_at = now()
								where 	fk_user_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
								and 	fk_message_thread_id =",90
Application.models.Patient.setPatientInfo( ) -> [update],"						update	""SurveyUser""
						set		""fk_User_ID_Origin"" = $1
						where	""fk_User_ID_Self"" = $2
						and		""fk_User_ID_Origin"" =",89
Application.models.Patient.setPatientInfo( ) -> [update],"						update	users
						set		fk_user_id = $1
						where	pk_user_id =",89
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90)
				or		""pk_SurveyUser_ID"" in ($91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180)
				order by",89
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 145 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",88
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id not in ($1)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",88
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 101 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",88
Application.lib.FileUtil.getFileLogForVTUser( ) -> fileLogQuery,"				select	fmi.""Name"",
						fmi.""fileExtension"",
						fml.""pk_fileManagerLog_ID"",
						fml.""DateAdded"",
						fml.""fk_fileManagerLogAction_ID"",
						fml.actor,
						fml.recipient,
						fml.message,
						fmla.""action"",
						u.pk_user_id,
						u.fname,
						u.lname
				from	""fileManagerUser"" fmu
				join ""fileManagerACL"" fma on fma.""fk_fileManagerUser_ID"" = fmu.""pk_fileManagerUser_ID""
	                and fma.is_deleted = false
				join ""fileManagerItem"" fmi on fmi.""pk_fileManagerItem_ID"" = fma.""fk_fileManagerItem_ID"" and fmi.""isDirectory"" = false
				join ""fileManagerLog"" fml on fml.""fk_fileManagerACL_ID"" = fma.""pk_fileManagerACL_ID""
				join ""fileManagerLogAction"" fmla on fmla.""pk_fileManagerLogAction_ID"" = fml.""fk_fileManagerLogAction_ID""
				left outer join users u on u.pk_user_id = fml.fk_user_id
				where	fmu.""fk_VT_ID"" = $1
				order by fml.""DateAdded""",88
Application.models.Messaging.getUsers( ) -> usersQuery,"				select	distinct u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.email,
						u.security
				from	users u
				where	u.pk_user_id in ($1)
				and 	u.account_status =",87
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id not in ($1)
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.lname) ilike",86
Application.models.NewPatient.createPatient( ) -> physicianQuery,"				select	internalid
				from	users
					where pk_user_id =",86
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24)
							or revision_fk_surveyuser_id in ($25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48)
					order by",86
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135)
							or revision_fk_surveyuser_id in ($136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194,$195,$196,$197,$198,$199,$200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214,$215,$216,$217,$218,$219,$220,$221,$222,$223,$224,$225,$226,$227,$228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241,$242,$243,$244,$245,$246,$247,$248,$249,$250,$251,$252,$253,$254,$255,$256,$257,$258,$259,$260,$261,$262,$263,$264,$265,$266,$267,$268,$269,$270)
					order by",86
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.is_active = true and rs.is_active_in_vtoc = true
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike",85
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.is_active = true and rs.is_active_in_vtoc = true
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
								NULLIF(regexp_replace(lower(string_agg(rs.study_subject_id, ',')), E'\\D', '', 'g'), '')::int,
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",85
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"								update 	message_thread_users
								set 	fk_message_thread_state = 1,
										last_message_thread_state = 1,
										updated_at = now()
								where 	fk_user_id in ($1,$2,$3)
								and 	fk_message_thread_id =",85
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368568$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1912959594$dontbeevilman$
							AND
					1 =",85
Application.models.PatientPortalTemplate.getPortalTemplatesByUser( ) -> portalTemplatesQuery,"				select	ppt.pk_patient_portal_template_id,
						ppt.fk_user_id,
						ppt.fk_company_id,
						ppt.modified_by_fk_user_id,
						ppt.name,
						ppt.start_date,
						ppt.end_date,
						ppt.default_template,
						ppt.share_template,
						ppt.hide_template,
						ppt.assign_on_patient_create,
						u.fname,
						u.lname,
						u.login
				from	patient_portal_templates ppt
				join	users u on u.pk_user_id = ppt.fk_user_id
				where	ppt.fk_company_id = $1 
					and (ppt.fk_user_id = $2
						or ppt.share_template = true)
					and	ppt.hide_template = false
					union
					select	ppt2.pk_patient_portal_template_id,
							ppt2.fk_user_id,
							ppt2.fk_company_id,
							ppt2.modified_by_fk_user_id,
							ppt2.name,
							ppt2.start_date,
							ppt2.end_date,
							ppt2.default_template,
							ppt2.share_template,
							ppt2.hide_template,
							ppt2.assign_on_patient_create,
							u2.fname,
							u2.lname,
							u2.login
					from	patient_portal_templates ppt2
					join users u2 on u2.pk_user_id = ppt2.fk_user_id
					join user_portal_templates upt on upt.fk_patient_portal_template_id = ppt2.pk_patient_portal_template_id
						and upt.fk_user_id = $3
						and upt.active = true
					where	ppt2.fk_company_id = $4 
				order by name, lname,",85
Application.models.PatientPortalTemplate.getMedTeamArray( ) -> sitesQuery,"				select	count(*) as site_count
				from	users
				where	fk_company_id = $1
				and		account_status = 1
				and		security > 1
				and		is_site_user =",85
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fk_user_id"" =
									$2,
									""fname"" =
									$3,
									""lname"" =
									$4,
									""datecreated"" =
									$5,
									""dateupdated"" =
									$6,
									""active"" =
									$7,
									""password"" =
									$8,
									""dob"" =
									$9,
									""internalid"" =
									$10,
									""reminderemail"" =
									$11,
									""mayreceiveemailreminders"" =
									$12,
									""agreedtotermsandconditions"" =
									$13,
									""has_changed_password"" =
									$14,
									""security"" =
									$15,
									""allow_self_reg"" =
									$16,
									""self_reg_capable"" =
									$17,
									""show_all_templates"" =
									$18,
									""import"" =
									$19,
									""gender"" =
									$20,
									""account_status"" =
									$21,
									""is_test_user"" =
									$22,
									""identity_validated"" =
									$23,
									""is_site_user"" =
									$24,
									""password_valid_until"" =
									$25,
									""may_receive_sms_notifications"" =
									$26,
									""is_deceased"" =
									$27,
									""is_default_user"" =
									$28,
									""is_alert_sender"" =
									$29,
									""reg_form_create"" =
									$30
					WHERE ""pk_user_id"" =",84
Application.lib.scheduled_scripts.TaskCCDAFTPImport.run( ) -> patientQuery,"									select	pk_user_id
									from	users
									where	fk_company_id = $1
									and 	internalid =",84
Application.lib.scheduled_scripts.TaskCCDAFTPImport.run( ) -> dataFileQuery,"										select	fmd.""pk_fileManagerData_ID"",
												fmi.""Name"",
												fmi.""fileExtension""
										from	""fileManagerItem"" fmi
										join	""fileManagerData"" fmd ON fmd.""pk_fileManagerData_ID"" = fmi.""fk_fileManagerData_ID""
											and fmd.""MD5"" = $1
										where	fmi.""fk_fileManagerItem_ID"" =",84
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 80 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",84
Application.models.Patient.getUniqueCaseNumber( ) -> checkCaseNo,"					select	pk_user_id
					from	users
					where	fk_company_id = $1
					and		case_no =",84
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739078$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$10086$dontbeevilman$
							AND
					1 =",84
Application.models.NewPatient.createPatient( ) -> checkPatient,"					select 	pk_user_id
					from   	users
					where	lower(fname) = $1
					and		lower(lname) = $2
					and		password is not null
					and 	ltrim(rtrim(password)) != ''
					and 	check_password($3,",84
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id = $1 
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike",84
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 171 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",84
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
								, ""DateCompleted""
							, submitter_id
								, ""DateAdded""
								, fk_login_mode_id
							)
					values ( $1,
							$2,
							$3,
							$4 
								, $5 
							, $6 
								, $7 
								, $8 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",83
Application.models.NewPatient.createPatient( ) -> patRegTodo,"						select	todos.pk_todo_id,
								todos.name,
								todos.fk_todo_type_id,
								todos.fk_resource_id,
								todos.parent_fk_todo_id,
								todos.fk_company_id,
								todos.start_date,
								todos.modified_by_fk_user_id,
								todos.end_date,
								todos.active
						from 	todos
						join survey_access sa on sa.fk_company_id = todos.fk_company_id 
							and sa.fk_resource_id = todos.fk_resource_id
							and sa.physician_read = true
							and sa.physician_edit = true
							and sa.patient_read = true 
							and sa.patient_edit = true
						where 	todos.fk_company_id = $1
						and 	todos.fk_resource_id =",83
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20)
				or		""pk_SurveyUser_ID"" in ($21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40)
				order by",83
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and u.fk_user_id = $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",83
Application.models.UserTodo.getUserTodosByUserId( ) -> userTodoQuery,"				select	pk_user_todo_id,
						fk_user_id,
						fk_todo_id,
						assigned_by_fk_user_id,
						assigned_date,
						active_start_date,
						active_end_date,
						modified_by_fk_user_id,
						fk_patient_portal_template_id,
						fk_user_todo_status_id,
						todo_type_name,
						fk_todo_type_id,
						name,
						description,
						type_table_name,
						fk_id,
						display_position,
						active,
						user_todo_name,
						status_id,
						dense_rank() over (
							partition by fk_user_id, 
										fk_todo_id 
							order by	assigned_date, 
										pk_user_todo_id
						) as similar_todo_rank,
						count(*) over (
							partition by fk_user_id, 
										fk_todo_id
						) as similar_todo_count
				from 	user_todo_detail
				where	fk_user_id = $1 
				 order by",83
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23)
				or		""pk_SurveyUser_ID"" in ($24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46)
				order by",83
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and lower(u.fname) ilike lower($2)
							and lower(u.lname) ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",82
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42)
							or revision_fk_surveyuser_id in ($43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84)
					order by",82
Application.lib.FileUtil.createFolders( ) -> checkOwner,"	            select  ""pk_fileManagerPermissionType_ID""
	            from    ""fileManagerPermissionType""
	            where   ""Type"" =",82
Application.models.NewPatient.createPatient( ) -> physicianQuery,"					select	internalid
					from	users
					where 	pk_user_id =",81
Application.lib.FileUtil.checkFolderSet( ) -> folderSetQuery,"	            select  ""pk_fileManagerNewSet_ID""
	            from    ""fileManagerNewSet""
	            where   ""fk_fileManagerUser_ID"" =",80
Application.lib.FileUtil.createFolders( ) -> insertSet,"		                    insert	into ""fileManagerNewSet"" 
									(""fk_fileManagerUser_ID"",
		                        	""isSet"")
		                    values	($1,
		                       ",80
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368568$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1962665877$dontbeevilman$
							AND
					1 =",80
Application.models.SurveyUserSolr.getSurveySetup( ) -> setupQuery,"				select	pk_survey_export_question_id,
						option_id,
						option_label as label,
						null as question_tags
				from	survey_export_questions
				where	fk_company_id = $1
				and		fk_resource_id = $2 
					and option_id in ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17)
				order by",80
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739077$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$212$dontbeevilman$
							AND
					1 =",79
Application.App.findBy_( ) -> instances,"
				select
					fk_user_id 
				from ""users"" 
				where
							""security"" = $dontbeevilman$1$dontbeevilman$
							AND
							""pk_user_id"" = $dontbeevilman$946869$dontbeevilman$
							AND
					1 =",78
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and u.fk_user_id = $2 
							and lower(u.fname) ilike lower($3)
							and lower(u.lname) ilike $4 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",77
Application.models.Communication.getCommunicationLogs( ) -> smsLogQuery,"					select	sl.pk_sms_log_id as id,
							sl.sms_to,
							sl.sms_from,
							st.name as sms_subject,
							sl.sms_sent,
							sl.sms_error,
							sl.datecreated
					from	sms_log sl
					join users u on u.pk_user_id = sl.fk_user_id
						and u.fk_company_id = $1
					join sms_type st on st.pk_sms_type_id = sl.fk_sms_type_id
					where	sl.fk_user_id =",77
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29)
				or		""pk_SurveyUser_ID"" in ($30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58)
				order by",77
Application.models.PatientPortalTemplate.savePatientTemplate( ) -> [update],"							update	user_portal_templates
							set		active_start_date = $1,
									modified_by_fk_user_id = $2
							where	pk_user_portal_template_id =",77
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
							and u.fk_user_id = $2 
							and lower(u.fname) ilike lower($3)
							and lower(u.lname) ilike",77
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        substring(u.fname, '^([a-zA-Z])') as fname,
	                        substring(u.lname, '^([a-zA-Z])') as lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",76
Application.App.findBy_( ) -> instances,"
				select
					fk_user_id 
				from ""users"" 
				where
							""security"" = $dontbeevilman$1$dontbeevilman$
							AND
							""pk_user_id"" = $dontbeevilman$962017$dontbeevilman$
							AND
					1 =",76
Application.models.SurveyTypes.AssignPortalTemplate.afterCreate( ) -> userTodoQuery,"						select	fk_patient_portal_template_id
						from	user_todos
						where	pk_user_todo_id =",76
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $2 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",75
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"								update 	message_thread_users
								set 	fk_message_thread_state = 1,
										last_message_thread_state = 1,
										updated_at = now()
								where 	fk_user_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25)
								and 	fk_message_thread_id =",74
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739078$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$10121$dontbeevilman$
							AND
					1 =",74
Application.models.FormsLibrary.getFormCount( ) -> surveyUserQuery,"				select	count(*) as thecount
				from	""SurveyUser""
				join	dblink(
							'hc_dev_dblink_server_connection'::text, $mjrip$
							select	pk_user_id
							from	users
							where	fk_company_id = 51 
							and		account_status = 1
							and		security = 1
							$mjrip$::text
						) as hc_users(pk_user_id bigint) 
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
				where	""fk_Resource_ID"" = $1
				and		revision_type =",74
Application.models.Messaging.sendEmail( ) -> doNotEmailQuery,"					select 	fk_user_id
					from 	medserviceprovider
					where 	fk_user_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25)
					and 	fk_medserviceprovidertype_id =",74
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 96 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",74
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28)
				or		""pk_SurveyUser_ID"" in ($29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56)
				order by",73
Application.models.Messaging.updateMessageThreadUsersState( ) -> [update],"							update 	message_thread_users
							set 	fk_message_thread_state = 3,
									last_message_thread_state = 3,
									updated_at = now()
							where 	fk_user_id in ($1,$2,$3,$4,$5)
							and 	fk_message_thread_id = $6
							and 	fk_message_thread_state in",73
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        substring(u.fname, '^([a-zA-Z])') as fname,
	                        substring(u.lname, '^([a-zA-Z])') as lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id = $1 
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.internalId ilike $3 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",72
Application.models.Messaging.postMessage( ) -> [update],"								update 	message_thread2
								set 	from_id = $1,
										to_id = $2
								where 	pk_message_thread_id = $3 
									and from_id <>",72
Application.models.Messaging.postMessage( ) -> [update],"								update 	message_thread2
								set 	last_post_date = now(),
										last_post_date_medical_side = now(),
										is_forwarded = false,
										is_forwardreply = false,
										forwarded_to_user_ids = null
								where 	pk_message_thread_id =",72
Application.models.SurveyTypes.CompparePatientAndSurveyCopy.afterCreate( ) -> siteQuery,"					select	u2.internalid
					from	users u
					join users u2 on u2.pk_user_id = u.fk_user_id and u2.is_site_user = true
					where	u.pk_user_id =",72
Application.lib.scheduled_scripts.TaskSurveyDocsAutoIndexing.run( ) -> [update],"					update	survey_indexing_runs
					set		is_last_run = true
					where 	survey_indexing_run_id =",72
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 164 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",72
Application.models.SurveyTypes.CompparePatientAndSurveyCopy.afterCreate( ) -> thisUserQuery,"				select	fk_user_id,
						internalid,
						fname,
						lname,
						email,
						dob,
						phone,
						gender,
						mayreceiveemailreminders
				from	users
				where	pk_user_id =",72
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 70 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",72
Application.models.PatientPortalTemplate.savePatientForms( ) -> insertUserTodo,"						insert	into user_todos
								(fk_user_id,
								fk_todo_id,
								fk_patient_portal_template_id,
								fk_user_todo_status_id,
								assigned_by_fk_user_id,
								modified_by_fk_user_id,
								active,
								active_start_date,
								active_end_date,
								display_position,
								name)
						values	($1,
								$2,
									null,
								1,
								$3,
								$4,
								true,
								$5,
								$6,
								$7,
								$8)
						returning",72
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 164 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",72
Application.models.Patient.setPatientInfo( ) -> [update],"				update	users
				set		
							active = $1,
								dob = $2,
								email = $3,
								fname = $4,
								internalid = $5,
								lname = $6,
							mayreceiveemailreminders = $7,
							may_receive_sms_notifications = $8,
								mname = null,
								mobile_phone = null,
								mobile_phone_dial_code = null,
								phone = null,
								phone_dial_code = null,
								reminderemail = $9,
								year_of_birth = null,
						modified_by_fk_user_id = $10
				where   pk_user_id =",71
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> [update],"					update	user_calendar_templates
					set		active = false
					where	pk_user_calendar_template_id in ($1)
						and	pk_user_calendar_template_id not in",71
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368568$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1962507863$dontbeevilman$
							AND
					1 =",71
Application.models.PatientPortalTemplate.savePatientCalendarTemplates( ) -> [update],"					update	calendaritem
					set		active = false
					where	fk_user_calendar_template_id in ($1)
						and	fk_user_calendar_template_id not in",71
Application.models.PatientPortal.getContactInfoByUser( ) -> contactsQuery,"	            select	ct.""Content""
	            from	""Contact"" as c
	            join ""ContactTemplate"" as ct on ct.""pk_ContactTemplate_ID"" = c.""fk_ContactTemplate_ID""
	            where	c.""fk_Company_ID"" = $1
	            and		c.""fk_User_ID"" =",71
Application.models.PatientPortalTemplate.savePatientForms( ) -> [update],"						update	user_todos
						set		active = false
						where	pk_user_todo_id in",71
Application.models.PatientPortal.getPhoto( ) -> photoQuery,"	            select  encode(p.picture::bytea, 'base64') as picture, 
						p.pic_width, 
						p.pic_height, 
						p.mimetype, 
						p.caption
	            from    users u
				join users_pictures p on p.fk_user_id = u.pk_user_id
	        		and p.active = true
	            where   u.fk_company_id = $1
				and		u.pk_user_id =",71
Application.models.NewPatient.createPatient( ) -> checkInternalId,"					select 	pk_user_id
					from   	users
					where	internalid = $1
					and		fk_user_id = $2
					and		account_status =",70
Application.models.Messaging.sendEmail( ) -> doNotEmailQuery,"					select 	fk_user_id
					from 	medserviceprovider
					where 	fk_user_id in ($1,$2,$3)
					and 	fk_medserviceprovidertype_id =",70
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fname"" =
									$2,
									""lname"" =
									$3,
									""email"" =
									$4,
									""datecreated"" =
									$5,
									""dateupdated"" =
									$6,
									""active"" =
									$7,
									""password"" =
									$8,
									""login"" =
									$9,
									""internalid"" =
									$10,
									""mayreceiveemailreminders"" =
									$11,
									""sudo_as_fk_user_id"" =
									$12,
									""agreedtotermsandconditions"" =
									$13,
									""has_changed_password"" =
									$14,
									""security"" =
									$15,
									""allow_self_reg"" =
									$16,
									""self_reg_capable"" =
									$17,
									""show_all_templates"" =
									$18,
									""account_status"" =
									$19,
									""sudo_retain_user_security"" =
									$20,
									""e_auth"" =
									$21,
									""name_suffix"" =
									$22,
									""is_test_user"" =
									$23,
									""is_site_user"" =
									$24,
									""may_receive_sms_notifications"" =
									$25,
									""is_deceased"" =
									$26,
									""is_default_user"" =
									$27,
									""is_alert_sender"" =
									$28,
									""reg_form_create"" =
									$29
					WHERE ""pk_user_id"" =",70
Application.models.SurveyUser.findMostRecentRevisionSet( ) -> surveyUsersQuery,"				select
							mostrecentrevisionset.""pk_SurveyUser_ID"",
							mostrecentrevisionset.""fk_User_ID_Origin"",
							mostrecentrevisionset.""DateAdded"",
							mostrecentrevisionset.""DateCompleted"",
							case
								when originalSU.""DateAdded"" is null
								then mostrecentrevisionset.""DateAdded""
								else originalSU.""DateAdded""
							end as original_date_added,
							mostrecentrevisionset.""fk_Resource_ID"",
							mostrecentrevisionset.""fk_User_ID_Self"",
							mostrecentrevisionset.""IP"",
							mostrecentrevisionset.revision_type,
							mostrecentrevisionset.revision_fk_surveyuser_id,
							mostrecentrevisionset.submitter_id,
							mostrecentrevisionset.visit,
							mostrecentrevisionset.fk_survey_tag_resource_id,
							mostrecentrevisionset.surveyuser_association_uuid,
							mostrecentrevisionset.record_id,
							hc_users.time_zone_location
				from (
					select
							su1.""pk_SurveyUser_ID"",
							su1.""fk_User_ID_Origin"",
							su1.""DateAdded"",
							su1.""DateCompleted"",
							su1.""fk_Resource_ID"",
							su1.""fk_User_ID_Self"",
							su1.""IP"",
							su1.revision_type,
							su1.revision_fk_surveyuser_id,
							su1.submitter_id,
							su1.visit,
							su1.fk_survey_tag_resource_id,
							su1.surveyuser_association_uuid,
							su1.record_id
					from	""SurveyUser"" as su1
					where 	su1.revision_type = 'new'
						and su1.""fk_Resource_ID"" in ($1)
						and su1.""fk_User_ID_Self"" in ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
					and su1.""pk_SurveyUser_ID"" not in (
						select	su2.revision_fk_surveyuser_id
						from 	""SurveyUser"" as su2
						where 	su2.revision_fk_surveyuser_id is not null
							and su2.""fk_Resource_ID"" in ($12)
							and su2.""fk_User_ID_Self"" in ($13,$14,$15,$16,$17,$18,$19,$20,$21,$22)
					)
					union all
					select
							su3.""pk_SurveyUser_ID"",
							su3.""fk_User_ID_Origin"",
							su3.""DateAdded"",
							su3.""DateCompleted"",
							su3.""fk_Resource_ID"",
							su3.""fk_User_ID_Self"",
							su3.""IP"",
							su3.revision_type,
							su3.revision_fk_surveyuser_id,
							su3.submitter_id,
							su3.visit,
							su3.fk_survey_tag_resource_id,
							su3.surveyuser_association_uuid,
							su3.record_id
					from	""SurveyUser"" as su3
					where 	su3.""pk_SurveyUser_ID"" in (
						select 	max(su4.""pk_SurveyUser_ID"") as ""pk_SurveyUser_ID""
						from 	""SurveyUser"" as su4
						where 	su4.revision_type = 'update'
							and su4.""fk_Resource_ID"" in ($23)
							and su4.""fk_User_ID_Self"" in ($24,$25,$26,$27,$28,$29,$30,$31,$32,$33)
						group by su4.""fk_User_ID_Self"",
							su4.""fk_Resource_ID"",
							su4.revision_type,
							su4.""revision_fk_surveyuser_id""
					)
				) as mostrecentrevisionset
					-- 3. inner join on users to scope the resultset to active users
					inner join dblink (
						'hc_dblink_server_connection'::text, $mjrip$
						select	u.pk_user_id,
								c.time_zone_location
						from 	users u
						join companies c on c.pk_company_id = u.fk_company_id
						where 1 = 1
							and u.account_status not in ( 3,5 ) 
							and u.pk_user_id in (959001,959002,959003,959004,959005,959006,959007,959008,959009,959010 )
							$mjrip$::text
						) as hc_users(pk_user_id bigint, time_zone_location varchar)
						on ""fk_User_ID_Self"" = hc_users.pk_user_id
					left join ""SurveyUser"" as originalSU on originalSU.""pk_SurveyUser_ID"" = mostrecentrevisionset.revision_fk_surveyuser_id
				where 1 = 1
					order by ""fk_Resource_ID""",70
Application.models.Messaging.getThreads( ) -> threadsQuery,"				select	'0' as id,
							case
								when max(mtu.fk_message_thread_state) = 1 then 'Unread'
								when max(mtu.fk_message_thread_state) = 2 then 'Message sent'
								when max(mtu.fk_message_thread_state) = 3 then 'Viewed'
								when max(mtu.fk_message_thread_state) = 4 then 'Read'
								when max(mtu.fk_message_thread_state) = 5 then 'Response Required'
								when max(mtu.fk_message_thread_state) = 6 then 'Closed'
								when max(mtu.fk_message_thread_state) = 7 then 'Archived'
								when max(mtu.fk_message_thread_state) = 8 then 'Forwarded'
								when max(mtu.fk_message_thread_state) = 9 then 'Completed'
								when max(mtu.fk_message_thread_state) = 10 then 'Forwarded From'
							end as status_label,
							case
								when max(mtu.fk_message_thread_state) = 1 then '1'
								when max(mtu.fk_message_thread_state) = 2 then '5'
								when max(mtu.fk_message_thread_state) = 3 then '6'
								when max(mtu.fk_message_thread_state) = 4 then '4'
								when max(mtu.fk_message_thread_state) = 5 then '3'
								when max(mtu.fk_message_thread_state) = 6 then '7'
								when max(mtu.fk_message_thread_state) = 7 then '8'
								when max(mtu.fk_message_thread_state) = 8 then '2'
								when max(mtu.fk_message_thread_state) = 9 then '9'
								when max(mtu.fk_message_thread_state) = 10 then '10'
							end as thread_state_order,
							max(mtu.fk_message_thread_state) as ui_state,
							max(mt.thread_name) as thread_name,
							max(mt.pk_message_thread_id) as pk_message_thread_id,
							to_char(max(mt.last_post_date) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date,
							to_char(max(mt.last_post_date_medical_side) + interval '0 hours', 'FMMonth FMDD, yyyy FMHH:MI AM') as last_post_date_medical_side,
							mt.from_id,
							mt.to_id as to_id,
							mt.forwardedfrom_id,
							mt.is_forwarded,
							mt.is_forwardreply,
							mt.repliedfrom_id,
							mt.forwarded_to_user_ids,
							max(mt.roles_based_mailbox_name) as roles_based_mailbox_name,
							max(mt.date_created) + interval '0 hours' as date_created,
							mt.medside_recipient_type_id,
							mt.fk_medserviceprovidertype_id,
							max(mpt.message_post_type_name) as category_name,
							max(mpt.pk_message_post_type_id) as pk_message_post_type_id
				from	message_thread_users mtu
				join message_thread2 mt on mt.pk_message_thread_id = mtu.fk_message_thread_id
					and	(mt.to_id = mtu.fk_user_id 
						or mt.medside_recipient_type_id in ($1,$2,$3,$4) 
							or mt.medside_recipient_type_id in ($5,$6,$7)
						)
				join message_post mp on mp.fk_message_thread_id = mt.pk_message_thread_id
					and mp.viewable_medside_only = false
				join users u on u.pk_user_id = mp.fk_user_id 
					and u.fk_company_id = $8 
				join message_post_type2 mpt on mpt.pk_message_post_type_id = mp.fk_message_post_type_id
				where 1 = 1
					and mtu.fk_user_id = $9 
					and mtu.fk_message_thread_state in ($10,$11,$12,$13,$14,$15,$16,$17)
					group by
						mt.to_id,
						mt.from_id,
						mt.recipient,
						mt.roles_based_mailbox_name,
						mt.date_created,
						mt.fk_message_post_type_company_role_id,
						mt.medside_recipient_type_id,
						mt.fk_medserviceprovidertype_id,
						mt.forwarded_to_user_ids,
						mt.forwardedfrom_id,
						mt.is_forwarded,
						mt.is_forwardreply,
						mt.repliedfrom_id,
						mt.last_post_date_medical_side,
						mt.last_post_date
					order by mt.last_post_date desc, thread_state_order 
						limit 500 
						offset",69
Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> surveyUserQuery,"					select	""pk_SurveyUser_ID""
					from	""SurveyUser""
					where	""fk_User_ID_Self"" = $1
					and		""fk_Resource_ID"" = 8400
					order by ""pk_SurveyUser_ID"" desc
					limit",69
Application.App.findBy_( ) -> instances,"
				select
					pk_user_id 
				from ""users"" 
				where
				 fk_company_id = 112 AND security > 1 AND account_status = 1
						AND
					1 =",69
Application.models.Patient.updatePatientRegistration( ) -> statusQuery,"						select	uscs.pk_user_survey_completion_statuses_id
						from	todos t
						join user_todos ut on t.pk_todo_id = ut.fk_todo_id
							and ut.fk_user_id = $1
						join user_survey_completion_statuses uscs on uscs.fk_user_todo_id = ut.pk_user_todo_id
							and uscs.fk_resource_id = t.fk_resource_id
							and uscs.fk_surveyuser_id is null
						where	t.fk_company_id = $2
						and		t.fk_resource_id = 8400
						order by pk_user_survey_completion_statuses_id desc
						limit",69
Application.models.VisitSummary.getVisitSummaries( ) -> senderQuery,"	            select  email
	            from    users
	            where   pk_user_id =",69
Application.models.User.getUser( ) -> userQuery,"				select	fk_user_id 
				from	users
				where	pk_user_id =",69
Application.lib.scheduled_scripts.TaskExportPatientToRcopia.run( ) -> [insert],					insert into,69
Application.models.Messaging.getMedTeamUsers( ) -> usersQuery,"				select 	distinct u.pk_user_id,
						u.fname,
						u.lname,
						u.name_suffix as title,
						u.email,
						u.security
				from 	users u
				join medserviceprovider msp on msp.fk_user_id = u.pk_user_id
					and msp.fk_medserviceprovidertype_id = $1
				where 	u.fk_company_id = $2
				and 	u.account_status = 1
					-- if site user specified, medteam user must be admin, sudo as site user or is site user
					and (
							u.pk_user_id = $3 
							or u.sudo_as_fk_user_id = $4 
							or u.security = 4
						)
					union
					select 	distinct u3.pk_user_id,
							u3.fname,
							u3.lname,
							u3.name_suffix as title,
							u3.email,
							u3.security
					from 	users u2
					join users u3 on u3.sudo_as_fk_user_id = u2.pk_user_id
					join medserviceprovider msp2 on msp2.fk_user_id = u3.pk_user_id
						and msp2.fk_medserviceprovidertype_id = $5
					where 	u2.fk_company_id = $6
					and		u2.security = 4
					and 	u2.account_status =",69
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368008$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1710072624$dontbeevilman$
							AND
					1 =",68
Application.models.PatientPortal.getContactInfoByCompany( ) -> contactsQuery,"	            select	ct.""Content""
	            from 	""Contact"" as c
	            join ""ContactTemplate"" as ct on ct.""pk_ContactTemplate_ID"" = c.""fk_ContactTemplate_ID""
	            where	c.""fk_Company_ID"" = $1
	            and		c.""fk_User_ID"" is",68
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$341535$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1689660011$dontbeevilman$
							AND
					1 =",68
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 138 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",68
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id = $1 
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $3 
						and u.internalId ilike",67
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$368567$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$1912959594$dontbeevilman$
							AND
					1 =",67
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739077$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$166$dontbeevilman$
							AND
					1 =",67
Application.models.AdvancedReportBuilder.generateReport( ) -> timepointsQuery,"				select	id as timepoint_id,
						survey_id,
						timepoint_interval
				from	survey_timepoints
				where	id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18)
				order by timepoint_interval,",67
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        substring(u.fname, '^([a-zA-Z])') as fname,
	                        substring(u.lname, '^([a-zA-Z])') as lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '3 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						join users_studies rs on rs.user_id = u.pk_user_id
						and rs.study_id = $1 
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $2
					and     u.security = 1
						and u.account_status not in (3,5)
						and u.fk_user_id = $3 
						and u.internalId ilike $4 
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",67
Application.models.AdvancedReportBuilder.getPatientIdsToReportOn( ) -> patientQuery,"								select 	distinct u.pk_user_id
								from	users u
								where	u.fk_company_id = $1
								and		u.account_status = 1
								and		u.security = 1
									and u.internalid ilike",67
Application.models.SurveyUserSolr.getPatientQuery( ) -> patientQuery,"				select	u.pk_user_id,
						u.fk_user_id,
						u2.pk_user_id as site_fk_user_id,
						u2.lname as site_name,
							u.fname,
							u.lname
							, u.internalid
				from	users u
				left outer join users u2 on u2.pk_user_id = u.fk_user_id
					and u2.is_site_user = true
				where	u.pk_user_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194,$195,$196,$197,$198,$199,$200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214,$215,$216,$217,$218,$219,$220,$221,$222,$223,$224,$225,$226,$227,$228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241,$242,$243,$244,$245,$246,$247,$248,$249,$250,$251,$252,$253,$254,$255,$256,$257,$258,$259,$260,$261,$262,$263,$264,$265,$266,$267,$268,$269,$270,$271,$272,$273,$274,$275,$276,$277,$278,$279,$280,$281,$282,$283,$284,$285,$286,$287,$288,$289,$290,$291,$292,$293,$294,$295,$296,$297,$298,$299,$300,$301,$302,$303,$304,$305,$306,$307,$308,$309,$310,$311,$312,$313,$314,$315,$316,$317,$318,$319,$320,$321,$322,$323,$324,$325,$326,$327,$328,$329,$330,$331,$332,$333,$334,$335,$336,$337,$338,$339,$340,$341,$342,$343,$344,$345,$346,$347,$348,$349,$350,$351,$352,$353,$354,$355,$356,$357,$358,$359,$360,$361,$362,$363,$364,$365,$366,$367,$368,$369,$370,$371,$372,$373,$374,$375,$376,$377,$378,$379,$380,$381,$382,$383,$384,$385,$386,$387,$388,$389,$390,$391,$392,$393,$394,$395,$396,$397,$398,$399,$400,$401,$402,$403,$404,$405,$406,$407,$408,$409,$410,$411,$412,$413,$414,$415,$416,$417,$418,$419,$420,$421,$422,$423,$424,$425,$426,$427,$428,$429,$430,$431,$432,$433,$434,$435,$436,$437,$438,$439,$440,$441,$442,$443,$444,$445,$446,$447,$448,$449,$450,$451,$452,$453,$454,$455,$456,$457,$458,$459,$460,$461,$462,$463,$464,$465,$466,$467,$468,$469,$470,$471,$472,$473,$474,$475,$476,$477,$478,$479,$480,$481,$482,$483,$484,$485,$486,$487,$488,$489,$490,$491,$492,$493,$494,$495,$496,$497,$498,$499,$500,$501,$502,$503,$504,$505,$506,$507,$508,$509,$510,$511,$512,$513,$514,$515,$516,$517,$518,$519,$520,$521,$522,$523,$524,$525,$526,$527,$528,$529,$530,$531,$532,$533,$534,$535,$536,$537,$538,$539,$540,$541)
				and		u.account_status = 1
					and	u.security = 1
				group by 
					u.pk_user_id,
					u.fk_user_id,
					u2.pk_user_id,
					u2.lname,
					u.fname,
					u.lname
						, u.internalid
				order by lower(u.lname),",67
Application.models.ContentManager.getSiteName( ) -> siteQuery,"				select	lname
				from	users
				where	pk_user_id =",67
Application.App.findBy_( ) -> instances,"
				select
					fk_user_id 
				from ""users"" 
				where
							""security"" = $dontbeevilman$1$dontbeevilman$
							AND
							""pk_user_id"" = $dontbeevilman$961926$dontbeevilman$
							AND
					1 =",66
Application.models.SurveyUserSolr.getSurveySetup( ) -> setupQuery,"				select	pk_survey_export_question_id,
						option_id,
						option_label as label,
						null as question_tags
				from	survey_export_questions
				where	fk_company_id = $1
				and		fk_resource_id = $2 
					and option_id in ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19)
				order by",66
Application.models.UserTodo.list( ) -> surveyUsersQuery,"					select 	""pk_SurveyUser_ID"",
							revision_fk_surveyuser_id
					from	""SurveyUser""
					where	""pk_SurveyUser_ID"" in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
							or revision_fk_surveyuser_id in ($14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26)
					order by",66
Application.models.FormDataExportSetup.saveQuestions( ) -> [delete],"					delete 	from survey_export_questions
					where	fk_company_id = $1
					and		fk_resource_id =",66
Application.models.FormDataExportSetup.saveQuestions( ) -> [update],"					update	survey_export_setup
					set		include_oid_headers = $1
					where	pk_survey_export_setup_id =",66
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30)
				or		""pk_SurveyUser_ID"" in ($31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60)
				order by",66
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(distinct u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study s on s.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in",65
Application.App.findBy_( ) -> instances,"
				select
					""pk_user_id"",""fk_company_id"",""fk_user_id"",""fname"",""lname"",""email"",""phone"",""datecreated"",""dateupdated"",""active"",""password"",""login"",""patientid"",""dob"",""ssn"",""internalid"",""reminderemail"",""mayreceiveemailreminders"",""datepatientidchanged"",""sudo_as_fk_user_id"",""agreedtotermsandconditions"",""has_changed_password"",""security"",""fk_selfreg_id"",""allow_self_reg"",""self_reg_capable"",""show_all_templates"",""institution_no"",""import"",""fk_hospital_ids"",""race"",""gender"",""account_status"",""mname"",""sudo_retain_user_security"",""e_auth"",""name_suffix"",""case_no"",""created_by"",""is_test_user"",""identity_validated"",""is_site_user"",""user_time_zone_location"",""password_valid_until"",""may_receive_sms_notifications"",""location"",""year_of_birth"",""fhir_id"",""is_deceased"",""date_of_death"",""deceased_notes"",""mobile_phone"",""is_default_user"",""user_association_uuid"",""is_alert_sender"",""reg_form_create"",""sex_at_birth"",""mobile_phone_dial_code"",""phone_dial_code"",""modified_by_fk_user_id"" 
				from ""users"" 
				where
							""fk_company_id"" = $dontbeevilman$10$dontbeevilman$
							AND
							""security"" = $dontbeevilman$2$dontbeevilman$
							AND
							""sudo_as_fk_user_id"" = $dontbeevilman$739077$dontbeevilman$
							AND
							""internalid"" = $dontbeevilman$85115$dontbeevilman$
							AND
					1 =",65
Application.models.SurveyUserSolr.getSurveySetup( ) -> setupQuery,"				select	pk_survey_export_question_id,
						option_id,
						option_label as label,
						null as question_tags
				from	survey_export_questions
				where	fk_company_id = $1
				and		fk_resource_id = $2 
					and option_id in ($3,$4,$5,$6,$7,$8,$9)
				order by",65
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                        string_agg(rs.study_subject_id, ', ') as study_subject_id,
							string_agg(rs.study_id::varchar, ', ') as study_id,
							string_agg(s.name, ', ' order by s.name) as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '0 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
					left outer join study s on s.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",64
Application.models.SurveyUser.findMostRecentRevisionSetLite( ) -> surveyUsersQuery,"				select	max(instanceid) as pk_surveyuser_id,
						surveykey,
						user_id as fk_user_id_self,
						surveyresourceid,
						min(""DateAdded"") as original_date_added,
						max(""DateAdded"") as most_recent_date_added
				from   (select ""revision_fk_surveyuser_id"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as surveyresourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'update'
						and 	""fk_Resource_ID"" in ($1)
						union
						select ""pk_SurveyUser_ID"" as surveykey,
								""fk_User_ID_Self"" as user_id,
								""fk_Resource_ID"" as resourceid,
								""pk_SurveyUser_ID"" as instanceid,
								""DateAdded""
						from   ""SurveyUser""
						where  revision_type = 'new'
						and 	""fk_Resource_ID"" in ($2)
				) as instances
				inner join dblink(
						'hc_dev_dblink_server_connection'::text, $mjrip$
					select	pk_user_id
					from	users
					where 	fk_company_id = 134 
					and		account_status = 1 
						$mjrip$::text
					) as hc_users(pk_user_id bigint)
					on ""user_id"" = hc_users.pk_user_id
				group by surveykey,
						surveyresourceid,
						user_id
				order by pk_surveyuser_id",64
Application.models.SurveyUserSolr.getPatientQuery( ) -> patientQuery,"				select	u.pk_user_id,
						u.fk_user_id,
						u2.pk_user_id as site_fk_user_id,
						u2.lname as site_name,
							u.fname,
							u.lname
							, u.internalid
				from	users u
				left outer join users u2 on u2.pk_user_id = u.fk_user_id
					and u2.is_site_user = true
				where	u.pk_user_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194,$195,$196,$197,$198,$199,$200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214,$215,$216,$217,$218,$219,$220,$221,$222,$223,$224,$225,$226,$227,$228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241,$242,$243,$244,$245,$246,$247,$248,$249,$250,$251,$252,$253,$254,$255,$256,$257,$258,$259,$260,$261,$262,$263,$264,$265,$266,$267,$268,$269,$270,$271,$272,$273,$274,$275,$276,$277,$278,$279,$280,$281,$282,$283,$284,$285,$286,$287,$288,$289,$290,$291,$292,$293,$294,$295,$296,$297,$298,$299,$300,$301,$302,$303,$304,$305,$306,$307,$308,$309,$310,$311,$312,$313,$314,$315,$316,$317,$318,$319,$320,$321,$322,$323,$324,$325,$326,$327,$328,$329,$330,$331,$332,$333,$334,$335,$336,$337,$338,$339,$340,$341,$342,$343,$344,$345,$346,$347,$348,$349,$350,$351,$352,$353,$354,$355,$356,$357,$358,$359,$360,$361,$362,$363,$364,$365,$366,$367,$368,$369,$370,$371,$372,$373,$374,$375,$376,$377,$378,$379,$380,$381,$382,$383,$384,$385,$386,$387,$388,$389,$390,$391,$392,$393,$394,$395,$396,$397,$398,$399,$400,$401,$402,$403,$404,$405,$406,$407,$408,$409,$410,$411,$412,$413,$414,$415,$416,$417,$418,$419,$420,$421,$422,$423,$424,$425,$426,$427,$428,$429,$430,$431,$432,$433,$434,$435,$436,$437,$438,$439,$440,$441,$442,$443,$444,$445,$446,$447,$448,$449,$450,$451,$452,$453,$454,$455,$456,$457,$458,$459,$460,$461,$462,$463,$464,$465,$466,$467,$468,$469,$470,$471,$472,$473,$474,$475,$476,$477,$478,$479,$480,$481,$482,$483,$484,$485,$486,$487,$488,$489,$490,$491,$492,$493,$494,$495,$496,$497,$498,$499,$500,$501,$502,$503,$504,$505,$506,$507,$508,$509,$510,$511,$512,$513,$514,$515,$516,$517,$518,$519,$520,$521,$522,$523,$524,$525,$526,$527,$528,$529,$530,$531,$532,$533)
				and		u.account_status = 1
					and	u.security = 1
				group by 
					u.pk_user_id,
					u.fk_user_id,
					u2.pk_user_id,
					u2.lname,
					u.fname,
					u.lname
						, u.internalid
				order by lower(u.lname),",64
Application.models.ContentManager.getContentQuery( ) -> contentQuery,"				select	c.pk_content_id,
						c.fk_company_id,
						c.content,
						c.subject,
						c.kiosk_exit_label,
						c.kiosk_exit_url,
						c.fasttrack_exit_label,
						c.fasttrack_exit_url,
						c.is_active,
						c.include_logo,
						c.include_footer
				from	content c
				where	c.fk_company_id = $1
				and		c.fk_content_category_id = $2 
					and c.site_fk_user_id is",64
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
						u.pk_user_id,
	                    u.fk_company_id,
	                         string_agg(rs.study_subject_id, ', ') as study_subject_id,
								string_agg(rs.study_id::varchar, ', ') as study_id,
								string_agg(study.name, ', ') as study_name,
	                        u.fname,
	                        u.lname,
							null as mname,
	                        u.email,
	                        u.internalid,
	                    u.phone,
						u.phone as phone_original,
						u.mobile_phone,
						u.mobile_phone as mobile_phone_original,
	                    u.import as importId,
	                    u.location,
	                    to_char((u.datecreated + '2 hour'), 'yyyy-mm-dd') as datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
							 to_char(u.dob, 'yyyy-mm-dd') as dob,
						u.year_of_birth,
						u.is_deceased,
						to_char(u.date_of_death, 'yyyy-mm-dd') as date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.is_active = true and rs.is_active_in_vtoc = true
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in (3,5)
					group by
						u.pk_user_id,
	                    u.fk_company_id,
	                        rs.study_subject_id,
	                        rs.study_id,
	                        study.name,
						u.fname,
						u.lname,
						u.mname,
						u.email,
						u.internalid,
	                    u.phone,
						u.mobile_phone,
	                    u.import,
	                    u.location,
	                    u.datecreated,
	                    u.security,
	                    u.active,
	                    u.fk_user_id,
	                    u.dob,
						u.year_of_birth,
						u.is_deceased,
						u.date_of_death,
						u.deceased_notes,
	                    u.institution_no,
	                    u.mayreceiveemailreminders,
						u.may_receive_sms_notifications,
	                    u.datepatientidchanged,
	                    u.fk_selfreg_id,
	                    u.account_status,
	                    u.case_no,
						u.gender,
						u.sex_at_birth
	                order by
								NULLIF(regexp_replace(lower(string_agg(rs.study_subject_id, ',')), E'\\D', '', 'g'), '')::int,
							lower(u.lname),
							lower(u.fname),
							lower(u.mname),
							u.internalid,
							u.datecreated
	                    limit   10
	                    offset ",64
Application.App.findBy_( ) -> instances,"
				select
					fk_user_id 
				from ""users"" 
				where
							""security"" = $dontbeevilman$1$dontbeevilman$
							AND
							""pk_user_id"" = $dontbeevilman$960961$dontbeevilman$
							AND
					1 =",64
Application.models.ClinicalForm.getClinicalFormRecordCount( ) -> formsCountQuery,"				select	count(*) as records,
						""fk_Resource_ID""
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123)
				and 	""revision_type"" = 'new'
					and	(fk_survey_tag_resource_id is null or fk_survey_tag_resource_id = 0)
				group by",64
Application.models.SurveyUser.create( ) -> insertSurveyUser,"					insert into ""SurveyUser""
							(
								""fk_User_ID_Origin"",
							""fk_User_ID_Self"",
							""IP"",
							""fk_Resource_ID""
								, ""DateCompleted""
							, submitter_id
								, visit
								, ""DateAdded""
								, fk_login_mode_id
								, fk_survey_tag_resource_id
								, completion_seconds
								, completion_seconds_total
							)
					values ( $1,
							$2,
							$3,
							$4 
								, $5 
							, $6 
								, $7 
								, $8 
								, $9 
								, $10 
								, $11 
								, $12 )
					returning ""pk_SurveyUser_ID"", ""fk_User_ID_Origin"", revision_type,",64
Application.models.ClinicalForm.getClinicalFormTagCount( ) -> tagCountQuery,"				select 	count(*) as records,
						fk_survey_tag_resource_id
				from 	""SurveyUser""
				where 	""fk_User_ID_Self"" = $1
				and 	""fk_Resource_ID"" in ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123)
				and 	revision_type = 'new'
				and		fk_survey_tag_resource_id is not null
				and		fk_survey_tag_resource_id <> 0
				group by",64
Application.models.SurveyUserSolr.getSurveySetup( ) -> setupQuery,"				select	pk_survey_export_question_id,
						option_id,
						option_label as label,
						null as question_tags
				from	survey_export_questions
				where	fk_company_id = $1
				and		fk_resource_id = $2 
					and option_id in ($3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16)
				order by",63
Application.models.PatientPortal.checkNodeAccess( ) -> nodeQuery,"				select	""pk_fileManagerACL_ID""
				from	""fileManagerACL""
				where	""pk_fileManagerACL_ID"" = $1
				and		""fk_fileManagerUser_ID"" =",63
Application.models.Patient.getPatients( ) -> patientsQuery,"	            select
	                    count(u.pk_user_id) as total
	            from users as u
				join users u2 on u2.pk_user_id = u.fk_user_id
						left outer join users_studies rs on rs.user_id = u.pk_user_id
						and rs.is_active = true and rs.is_active_in_vtoc = true
					left outer join study on study.pk_study_id = rs.study_id
					where   u.fk_company_id = $1
					and     u.security = 1
						and u.account_status not in",63
patient.portal.model.surveys.SurveyGateway.getSurveyLastTakenDates( ) -> surveyUsersQuery,"				select	""pk_SurveyUser_ID"",
						revision_fk_surveyuser_id,
						""DateAdded""
				from	""SurveyUser""
				where	revision_fk_surveyuser_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26)
				or		""pk_SurveyUser_ID"" in ($27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52)
				order by",63
Application.models.Survey.reparseSurvey( ) -> parsedStatusQuery,"				select	pk_survey_export_parsed_survey_id
				from	survey_export_parsed_surveys
				where	fk_company_id = $1
				and		fk_resource_id =",62
Application.App.save( ) -> save,"
					UPDATE ""users""
					SET ""fk_company_id"" =
									$1,
									""fk_user_id"" =
									$2,
									""fname"" =
									$3,
									""lname"" =
									$4,
									""phone"" =
									$5,
									""datecreated"" =
									$6,
									""active"" =
									$7,
									""password"" =
									$8,
									""dob"" =
									$9,
									""internalid"" =
									$10,
									""reminderemail"" =
									$11,
									""mayreceiveemailreminders"" =
									$12,
									""agreedtotermsandconditions"" =
									$13,
									""security"" =
									$14,
									""allow_self_reg"" =
									$15,
									""self_reg_capable"" =
									$16,
									""show_all_templates"" =
									$17,
									""import"" =
									$18,
									""gender"" =
									$19,
									""account_status"" =
									$20,
									""is_test_user"" =
									$21,
									""identity_validated"" =
									$22,
									""is_site_user"" =
									$23,
									""may_receive_sms_notifications"" =
									$24,
									""is_deceased"" =
									$25,
									""is_default_user"" =
									$26,
									""is_alert_sender"" =
									$27,
									""reg_form_create"" =
									$28
					WHERE ""pk_user_id"" =",62
Application.models.TemplateTranslator.translateAlias( ) -> aliasQuery,"					select 	mname 
					from	users 
					where 	pk_user_id =",62
Application.models.Survey.reparseSurvey( ) -> [delete],"					delete	from survey_export_parsed_questions
					where	fk_company_id = $1
					and		fk_resource_id =",62
Application.models.SurveyUserSolr.getPatientQuery( ) -> patientQuery,"				select	u.pk_user_id,
						u.fk_user_id,
						u2.pk_user_id as site_fk_user_id,
						u2.lname as site_name,
							u.fname,
							u.lname
							, u.internalid
				from	users u
				left outer join users u2 on u2.pk_user_id = u.fk_user_id
					and u2.is_site_user = true
				where	u.pk_user_id in ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104,$105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$140,$141,$142,$143,$144,$145,$146,$147,$148,$149,$150,$151,$152,$153,$154,$155,$156,$157,$158,$159,$160,$161,$162,$163,$164,$165,$166,$167,$168,$169,$170,$171,$172,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182,$183,$184,$185,$186,$187,$188,$189,$190,$191,$192,$193,$194,$195,$196,$197,$198,$199,$200,$201,$202,$203,$204,$205,$206,$207,$208,$209,$210,$211,$212,$213,$214,$215,$216,$217,$218,$219,$220,$221,$222,$223,$224,$225,$226,$227,$228,$229,$230,$231,$232,$233,$234,$235,$236,$237,$238,$239,$240,$241,$242,$243,$244,$245,$246,$247,$248,$249,$250,$251,$252,$253,$254,$255,$256,$257,$258,$259,$260,$261,$262,$263,$264,$265,$266,$267,$268,$269,$270,$271,$272,$273,$274,$275,$276,$277,$278,$279,$280,$281,$282,$283,$284,$285,$286,$287,$288,$289,$290,$291,$292,$293,$294,$295,$296,$297,$298,$299,$300,$301,$302,$303,$304,$305,$306,$307,$308,$309,$310,$311,$312,$313,$314,$315,$316,$317,$318,$319,$320,$321,$322,$323,$324,$325,$326,$327,$328,$329,$330,$331,$332,$333,$334,$335,$336,$337,$338,$339,$340,$341,$342,$343,$344,$345,$346,$347,$348,$349,$350,$351,$352,$353,$354,$355,$356,$357,$358,$359,$360,$361,$362,$363,$364,$365,$366,$367,$368,$369,$370,$371,$372,$373,$374,$375,$376,$377,$378,$379,$380,$381,$382,$383,$384,$385,$386,$387,$388,$389,$390,$391,$392,$393,$394,$395,$396,$397,$398,$399,$400,$401,$402,$403,$404,$405,$406,$407,$408,$409,$410,$411,$412,$413,$414,$415,$416,$417,$418,$419,$420,$421,$422,$423,$424,$425,$426,$427,$428,$429,$430,$431,$432,$433,$434,$435,$436,$437,$438,$439,$440,$441,$442,$443,$444,$445,$446,$447,$448,$449,$450,$451,$452,$453,$454,$455,$456,$457,$458,$459,$460,$461,$462,$463,$464,$465,$466,$467,$468,$469,$470,$471,$472,$473,$474,$475,$476,$477,$478,$479,$480,$481,$482,$483,$484,$485,$486,$487,$488,$489,$490,$491,$492,$493,$494,$495,$496,$497,$498,$499,$500,$501,$502,$503,$504,$505,$506,$507,$508,$509,$510,$511,$512,$513,$514,$515,$516,$517,$518,$519,$520,$521,$522,$523,$524,$525,$526,$527,$528,$529,$530,$531,$532,$533,$534,$535,$536,$537,$538,$539,$540,$541,$542,$543,$544,$545,$546,$547,$548,$549,$550,$551,$552,$553,$554,$555,$556,$557,$558,$559,$560,$561,$562,$563,$564,$565,$566,$567,$568,$569,$570,$571,$572,$573,$574,$575,$576,$577,$578,$579,$580,$581,$582,$583,$584,$585,$586,$587,$588,$589,$590,$591,$592,$593,$594,$595,$596,$597,$598,$599,$600,$601,$602,$603,$604,$605,$606,$607,$608,$609,$610,$611,$612,$613,$614,$615,$616,$617,$618,$619,$620,$621,$622,$623,$624,$625,$626,$627,$628,$629,$630,$631,$632,$633,$634,$635,$636,$637,$638,$639,$640,$641,$642,$643,$644,$645,$646,$647,$648,$649,$650,$651,$652,$653,$654,$655,$656,$657,$658,$659,$660,$661,$662,$663,$664,$665,$666,$667,$668,$669,$670,$671,$672,$673,$674,$675,$676,$677,$678,$679,$680,$681,$682,$683,$684,$685,$686,$687,$688,$689,$690,$691,$692,$693,$694,$695,$696,$697,$698,$699,$700,$701,$702,$703,$704,$705,$706,$707,$708,$709,$710,$711,$712,$713,$714,$715,$716,$717,$718,$719,$720,$721,$722,$723,$724,$725,$726,$727,$728,$729,$730,$731,$732,$733,$734,$735,$736,$737,$738,$739,$740,$741,$742,$743,$744,$745,$746,$747,$748,$749,$750,$751,$752,$753,$754,$755,$756,$757,$758,$759,$760,$761,$762,$763,$764,$765,$766,$767,$768,$769,$770,$771,$772,$773,$774,$775,$776,$777)
				and		u.account_status = 1
					and	u.security = 1
				group by 
					u.pk_user_id,
					u.fk_user_id,
					u2.pk_user_id,
					u2.lname,
					u.fname,
					u.lname
						, u.internalid
				order by lower(u.lname),",62